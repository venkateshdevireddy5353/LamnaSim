{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _DiscreteGestureHandler = _interopRequireDefault(require(\"./DiscreteGestureHandler\"));\n\nvar NodeManager = _interopRequireWildcard(require(\"./NodeManager\"));\n\nvar _PressGestureHandler2 = _interopRequireDefault(require(\"./PressGestureHandler\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar NativeViewGestureHandler = function (_PressGestureHandler) {\n  (0, _inherits2.default)(NativeViewGestureHandler, _PressGestureHandler);\n\n  var _super = _createSuper(NativeViewGestureHandler);\n\n  function NativeViewGestureHandler() {\n    (0, _classCallCheck2.default)(this, NativeViewGestureHandler);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(NativeViewGestureHandler, [{\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeViewGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!ev.isFinal) {\n        if ((0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n          x: ev.deltaX,\n          y: ev.deltaY\n        }), 10)) {\n          if (this.config.disallowInterruption) {\n            var gestures = Object.values(NodeManager.getNodes()).filter(function (gesture) {\n              var handlerTag = gesture.handlerTag,\n                  view = gesture.view,\n                  isGestureRunning = gesture.isGestureRunning;\n              return handlerTag !== _this.handlerTag && isGestureRunning && gesture instanceof _DiscreteGestureHandler.default && view && _this.view.contains(view);\n            });\n\n            for (var _iterator = _createForOfIteratorHelperLoose(gestures), _step; !(_step = _iterator()).done;) {\n              var gesture = _step.value;\n              gesture.forceInvalidate(ev);\n            }\n          }\n        }\n      }\n    }\n  }]);\n  return NativeViewGestureHandler;\n}(_PressGestureHandler2.default);\n\nvar _default = NativeViewGestureHandler;\nexports.default = _default;","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["onRawEvent","ev","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","x","y","deltaY","gestures","NodeManager","gesture","isGestureRunning","handlerTag"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;IAEA,wB;;;;;;;;;;;;WACEA,oBAAU,EAAVA,EAA+B;AAAA;;AAC7B,2HAAA,EAAA;;AACA,UAAI,CAACC,EAAE,CAAP,OAAA,EAAiB;AAEf,YAAIC,gCAAoBC,uBAAW;AAAEC,UAAAA,CAAC,EAAEH,EAAE,CAAP,MAAA;AAAgBI,UAAAA,CAAC,EAAEJ,EAAE,CAACK;AAAtB,SAAXH,CAApBD,EAAJ,EAAIA,CAAJ,EAAyE;AAEvE,cAAI,KAAA,MAAA,CAAJ,oBAAA,EAAsC;AACpC,gBAAMK,QAAQ,GAAG,MAAM,CAAN,MAAA,CAAcC,WAAW,CAAzB,QAAcA,EAAd,EAAA,MAAA,CACdC,UAAAA,OAAD,EAAa;AACX,kBAAM,UAAN,GAAA,OAAA,CAAM,UAAN;AAAA,kBAAM,IAAN,GAAA,OAAA,CAAM,IAAN;AAAA,kBAA0BC,gBAA1B,GAAA,OAAA,CAA0BA,gBAA1B;AACA,qBAEEC,UAAU,KAAK,KAAA,CAAfA,UAAAA,IAAAA,gBAAAA,IAIAF,OAAO,YAJPE,+BAAAA,IAAAA,IAAAA,IAQA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAVF;AAJgC,aACnB,CAAjB;;AAkBA,iEAAA,QAAA,wCAAgC;AAAA,kBAAhC,OAAgC;AAE9BF,cAAAA,OAAO,CAAPA,eAAAA,CAAAA,EAAAA;AACD;AACF;AACF;AACF;AACF;;;EAjCH,6B;;eAoCA,wB","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        // @ts-ignore FIXME(TS) config type\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(\n            (gesture) => {\n              const { handlerTag, view, isGestureRunning } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            }\n          );\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"]},"metadata":{},"sourceType":"script"}