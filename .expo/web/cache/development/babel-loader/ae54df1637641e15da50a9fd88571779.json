{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Device = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _TypeDefinition = require(\"./TypeDefinition\");\n\nvar Device = function () {\n  function Device(nativeDevice, manager) {\n    (0, _classCallCheck2.default)(this, Device);\n    (0, _extends2.default)(this, nativeDevice, {\n      _manager: manager\n    });\n  }\n\n  (0, _createClass2.default)(Device, [{\n    key: \"requestConnectionPriority\",\n    value: function requestConnectionPriority(connectionPriority, transactionId) {\n      return this._manager.requestConnectionPriorityForDevice(this.id, connectionPriority, transactionId);\n    }\n  }, {\n    key: \"readRSSI\",\n    value: function readRSSI(transactionId) {\n      return this._manager.readRSSIForDevice(this.id, transactionId);\n    }\n  }, {\n    key: \"requestMTU\",\n    value: function requestMTU(mtu, transactionId) {\n      return this._manager.requestMTUForDevice(this.id, mtu, transactionId);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(options) {\n      return this._manager.connectToDevice(this.id, options);\n    }\n  }, {\n    key: \"cancelConnection\",\n    value: function cancelConnection() {\n      return this._manager.cancelDeviceConnection(this.id);\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this._manager.isDeviceConnected(this.id);\n    }\n  }, {\n    key: \"onDisconnected\",\n    value: function onDisconnected(listener) {\n      return this._manager.onDeviceDisconnected(this.id, listener);\n    }\n  }, {\n    key: \"discoverAllServicesAndCharacteristics\",\n    value: function discoverAllServicesAndCharacteristics(transactionId) {\n      return this._manager.discoverAllServicesAndCharacteristicsForDevice(this.id, transactionId);\n    }\n  }, {\n    key: \"services\",\n    value: function services() {\n      return this._manager.servicesForDevice(this.id);\n    }\n  }, {\n    key: \"characteristicsForService\",\n    value: function characteristicsForService(serviceUUID) {\n      return this._manager.characteristicsForDevice(this.id, serviceUUID);\n    }\n  }, {\n    key: \"descriptorsForService\",\n    value: function descriptorsForService(serviceUUID, characteristicUUID) {\n      return this._manager.descriptorsForDevice(this.id, serviceUUID, characteristicUUID);\n    }\n  }, {\n    key: \"readCharacteristicForService\",\n    value: function readCharacteristicForService(serviceUUID, characteristicUUID, transactionId) {\n      return this._manager.readCharacteristicForDevice(this.id, serviceUUID, characteristicUUID, transactionId);\n    }\n  }, {\n    key: \"writeCharacteristicWithResponseForService\",\n    value: function writeCharacteristicWithResponseForService(serviceUUID, characteristicUUID, valueBase64, transactionId) {\n      return this._manager.writeCharacteristicWithResponseForDevice(this.id, serviceUUID, characteristicUUID, valueBase64, transactionId);\n    }\n  }, {\n    key: \"writeCharacteristicWithoutResponseForService\",\n    value: function writeCharacteristicWithoutResponseForService(serviceUUID, characteristicUUID, valueBase64, transactionId) {\n      return this._manager.writeCharacteristicWithoutResponseForDevice(this.id, serviceUUID, characteristicUUID, valueBase64, transactionId);\n    }\n  }, {\n    key: \"monitorCharacteristicForService\",\n    value: function monitorCharacteristicForService(serviceUUID, characteristicUUID, listener, transactionId) {\n      return this._manager.monitorCharacteristicForDevice(this.id, serviceUUID, characteristicUUID, listener, transactionId);\n    }\n  }, {\n    key: \"readDescriptorForService\",\n    value: function readDescriptorForService(serviceUUID, characteristicUUID, descriptorUUID, transactionId) {\n      return _regenerator.default.async(function readDescriptorForService$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this._manager.readDescriptorForDevice(this.id, serviceUUID, characteristicUUID, descriptorUUID, transactionId));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"writeDescriptorForService\",\n    value: function writeDescriptorForService(serviceUUID, characteristicUUID, descriptorUUID, valueBase64, transactionId) {\n      return _regenerator.default.async(function writeDescriptorForService$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this._manager.writeDescriptorForDevice(this.id, serviceUUID, characteristicUUID, descriptorUUID, valueBase64, transactionId));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return Device;\n}();\n\nexports.Device = Device;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-ble-plx/src/Device.js"],"names":["Device","nativeDevice","manager","_manager","connectionPriority","transactionId","requestConnectionPriorityForDevice","id","readRSSIForDevice","mtu","requestMTUForDevice","options","connectToDevice","cancelDeviceConnection","isDeviceConnected","listener","onDeviceDisconnected","discoverAllServicesAndCharacteristicsForDevice","servicesForDevice","serviceUUID","characteristicsForDevice","characteristicUUID","descriptorsForDevice","readCharacteristicForDevice","valueBase64","writeCharacteristicWithResponseForDevice","writeCharacteristicWithoutResponseForDevice","monitorCharacteristicForDevice","descriptorUUID","readDescriptorForDevice","writeDescriptorForDevice"],"mappings":"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","sourcesContent":["// @flow\n'use strict'\n\nimport type { BleManager } from './BleManager'\nimport type { BleError } from './BleError'\nimport type { Characteristic } from './Characteristic'\nimport type { Service } from './Service'\nimport type { Descriptor } from './Descriptor'\nimport { ConnectionPriority } from './TypeDefinition'\nimport type { NativeDevice } from './BleModule'\nimport type { DeviceId, Base64, UUID, Subscription, TransactionId, ConnectionOptions } from './TypeDefinition'\n\n/**\n * Device instance which can be retrieved only by calling\n * {@link #blemanagerstartdevicescan|bleManager.startDeviceScan()}.\n */\nexport class Device implements NativeDevice {\n  /**\n   * Internal BLE Manager handle\n   * @private\n   */\n  _manager: BleManager\n\n  /**\n   * Device identifier: MAC address on Android and UUID on iOS.\n   */\n  id: DeviceId\n\n  /**\n   * Device name if present\n   */\n  name: ?string\n\n  /**\n   * Current Received Signal Strength Indication of device\n   */\n  rssi: ?number\n\n  /**\n   * Current Maximum Transmission Unit for this device. When device is not connected\n   * default value of 23 is used.\n   */\n  mtu: number\n\n  // Advertisement\n\n  /**\n   * Device's custom manufacturer data. Its format is defined by manufacturer.\n   */\n  manufacturerData: ?Base64\n\n  /**\n   * Map of service UUIDs (as keys) with associated data (as values).\n   */\n  serviceData: ?{ [uuid: UUID]: Base64 }\n\n  /**\n   * List of available services visible during scanning.\n   */\n  serviceUUIDs: ?Array<UUID>\n\n  /**\n   * User friendly name of device.\n   */\n  localName: ?string\n\n  /**\n   * Transmission power level of device.\n   */\n  txPowerLevel: ?number\n\n  /**\n   * List of solicited service UUIDs.\n   */\n  solicitedServiceUUIDs: ?Array<UUID>\n\n  /**\n   * Is device connectable. [iOS only]\n   */\n  isConnectable: ?boolean\n\n  /**\n   * List of overflow service UUIDs. [iOS only]\n   */\n  overflowServiceUUIDs: ?Array<UUID>\n\n  /**\n   * Private constructor used to create {@link Device} object.\n   *\n   * @param {NativeDevice} nativeDevice Native device properties\n   * @param {BleManager} manager {@link BleManager} handle\n   * @private\n   */\n  constructor(nativeDevice: NativeDevice, manager: BleManager) {\n    Object.assign(this, nativeDevice, { _manager: manager })\n  }\n\n  /**\n   * {@link #blemanagerrequestconnectionpriorityfordevice|bleManager.requestConnectionPriorityForDevice()} with partially filled arguments.\n   *\n   * @param {ConnectionPriority} connectionPriority: Connection priority.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation.\n   * @returns {Promise<Device>} Connected device.\n   */\n  requestConnectionPriority(\n    connectionPriority: $Values<typeof ConnectionPriority>,\n    transactionId: ?TransactionId\n  ): Promise<Device> {\n    return this._manager.requestConnectionPriorityForDevice(this.id, connectionPriority, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerreadrssifordevice|bleManager.readRSSIForDevice()} with partially filled arguments.\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation.\n   * @returns {Promise<Device>} This device with updated RSSI value.\n   */\n  readRSSI(transactionId: ?TransactionId): Promise<Device> {\n    return this._manager.readRSSIForDevice(this.id, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerrequestmtufordevice|bleManager.requestMTUForDevice()} with partially filled arguments.\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation.\n   * @returns {Promise<Device>} Device with updated MTU size. Default value is 23.\n   */\n  requestMTU(mtu: number, transactionId: ?TransactionId): Promise<Device> {\n    return this._manager.requestMTUForDevice(this.id, mtu, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerconnecttodevice|bleManager.connectToDevice()} with partially filled arguments.\n   *\n   * @param {?ConnectionOptions} options Platform specific options for connection establishment. Not used currently.\n   * @returns {Promise<Device>} Connected {@link Device} object if successful.\n   */\n  connect(options: ?ConnectionOptions): Promise<Device> {\n    return this._manager.connectToDevice(this.id, options)\n  }\n\n  /**\n   * {@link #blemanagercanceldeviceconnection|bleManager.cancelDeviceConnection()} with partially filled arguments.\n   *\n   * @returns {Promise<Device>} Returns closed {@link Device} when operation is successful.\n   */\n  cancelConnection(): Promise<Device> {\n    return this._manager.cancelDeviceConnection(this.id)\n  }\n\n  /**\n   * {@link #blemanagerisdeviceconnected|bleManager.isDeviceConnected()} with partially filled arguments.\n   *\n   * @returns {Promise<boolean>} Promise which emits `true` if device is connected, and `false` otherwise.\n   */\n  isConnected(): Promise<boolean> {\n    return this._manager.isDeviceConnected(this.id)\n  }\n\n  /**\n   * {@link #blemanagerondevicedisconnected|bleManager.onDeviceDisconnected()} with partially filled arguments.\n   *\n   * @param {function(error: ?BleError, device: Device)} listener callback returning error as a reason of disconnection\n   * if available and {@link Device} object. If an error is null, that means the connection was terminated by\n   * {@link #blemanagercanceldeviceconnection|bleManager.cancelDeviceConnection()} call.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  onDisconnected(listener: (error: ?BleError, device: Device) => void): Subscription {\n    return this._manager.onDeviceDisconnected(this.id, listener)\n  }\n\n  /**\n   * {@link #blemanagerdiscoverallservicesandcharacteristicsfordevice|bleManager.discoverAllServicesAndCharacteristicsForDevice()} with partially filled arguments.\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Device>} Promise which emits {@link Device} object if all available services and\n   * characteristics have been discovered.\n   */\n  discoverAllServicesAndCharacteristics(transactionId: ?TransactionId): Promise<Device> {\n    return this._manager.discoverAllServicesAndCharacteristicsForDevice(this.id, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerservicesfordevice|bleManager.servicesForDevice()} with partially filled arguments.\n   *\n   * @returns {Promise<Service[]>} Promise which emits array of {@link Service} objects which are discovered by this\n   * device.\n   */\n  services(): Promise<Service[]> {\n    return this._manager.servicesForDevice(this.id)\n  }\n\n  /**\n   * {@link #blemanagercharacteristicsfordevice|bleManager.characteristicsForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @returns {Promise<Characteristic[]>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered for a {@link Device} in specified {@link Service}.\n   */\n  characteristicsForService(serviceUUID: string): Promise<Characteristic[]> {\n    return this._manager.characteristicsForDevice(this.id, serviceUUID)\n  }\n\n  /**\n   * {@link #blemanagerdescriptorsfordevice|bleManager.descriptorsForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for this {@link Characteristic}.\n   */\n  descriptorsForService(serviceUUID: UUID, characteristicUUID: UUID): Promise<Array<Descriptor>> {\n    return this._manager.descriptorsForDevice(this.id, serviceUUID, characteristicUUID)\n  }\n\n  /**\n   * {@link #blemanagerreadcharacteristicfordevice|bleManager.readCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of {@link Characteristic} will be stored inside returned object.\n   */\n  readCharacteristicForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    return this._manager.readCharacteristicForDevice(this.id, serviceUUID, characteristicUUID, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithresponsefordevice|bleManager.writeCharacteristicWithResponseForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   */\n  writeCharacteristicWithResponseForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    return this._manager.writeCharacteristicWithResponseForDevice(\n      this.id,\n      serviceUUID,\n      characteristicUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithoutresponsefordevice|bleManager.writeCharacteristicWithoutResponseForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   */\n  writeCharacteristicWithoutResponseForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    return this._manager.writeCharacteristicWithoutResponseForDevice(\n      this.id,\n      serviceUUID,\n      characteristicUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n\n  /**\n   * {@link #blemanagermonitorcharacteristicfordevice|bleManager.monitorCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  monitorCharacteristicForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId\n  ): Subscription {\n    return this._manager.monitorCharacteristicForDevice(\n      this.id,\n      serviceUUID,\n      characteristicUUID,\n      listener,\n      transactionId\n    )\n  }\n\n  /**\n   * {@link #blemanagerreaddescriptorfordevice|bleManager.readDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   */\n  async readDescriptorForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    return this._manager.readDescriptorForDevice(\n      this.id,\n      serviceUUID,\n      characteristicUUID,\n      descriptorUUID,\n      transactionId\n    )\n  }\n\n  /**\n   * {@link #blemanagerwritedescriptorfordevice|bleManager.writeDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value.\n   */\n  async writeDescriptorForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    return this._manager.writeDescriptorForDevice(\n      this.id,\n      serviceUUID,\n      characteristicUUID,\n      descriptorUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}