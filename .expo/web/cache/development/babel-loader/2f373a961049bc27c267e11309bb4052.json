{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.updatePropsJestWrapper = exports.updateProps = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _Colors = require(\"./Colors\");\n\nvar _core = require(\"./core\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsReanimated = require(\"./js-reanimated\");\n\nvar colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nvar ColorProperties = !(0, _core.isConfigured)() ? [] : (0, _core.makeShareable)(colorProps);\n\nvar updateProps = function updateProps(viewDescriptor, updates, maybeViewRef, adapters) {\n  'worklet';\n\n  var viewName = viewDescriptor.value.name || 'RCTView';\n\n  if (adapters) {\n    adapters.forEach(function (adapter) {\n      adapter(updates);\n    });\n  }\n\n  if (_reactNative.Platform.OS !== 'web') {\n    Object.keys(updates).forEach(function (key) {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = (0, _Colors.processColor)(updates[key]);\n      }\n    });\n  }\n\n  var updatePropsInternal = typeof _updateProps === 'undefined' ? _jsReanimated._updatePropsJS : _updateProps;\n  updatePropsInternal(viewDescriptor.value.tag, viewName, updates, maybeViewRef);\n};\n\nexports.updateProps = updateProps;\n\nvar updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptor, updates, maybeViewRef, adapters, animatedStyle) {\n  animatedStyle.current.value = (0, _extends2.default)((0, _extends2.default)({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\n\nexports.updatePropsJestWrapper = updatePropsJestWrapper;\nvar _default = updateProps;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js"],"names":["colorProps","ColorProperties","updateProps","viewDescriptor","updates","maybeViewRef","adapters","viewName","value","name","forEach","adapter","Platform","OS","Object","keys","key","indexOf","updatePropsInternal","_updateProps","_updatePropsJS","tag","updatePropsJestWrapper","animatedStyle","current"],"mappings":";;;;;;;;;AAGA;;AACA;;AACA;;AACA;;AAEA,IAAMA,UAAU,GAAG,CACf,iBADe,EAEf,mBAFe,EAGf,aAHe,EAIf,iBAJe,EAKf,kBALe,EAMf,gBANe,EAOf,kBAPe,EAQf,gBARe,EASf,OATe,EAUf,aAVe,EAWf,qBAXe,EAYf,WAZe,EAaf,iBAbe,EAcf,cAde,CAAnB;AAgBA,IAAMC,eAAe,GAAG,CAAC,yBAAD,GAAkB,EAAlB,GAAuB,yBAAcD,UAAd,CAA/C;;AACO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,EAAqD;AAC5E;;AACA,MAAMC,QAAQ,GAAGJ,cAAc,CAACK,KAAf,CAAqBC,IAArB,IAA6B,SAA9C;;AACA,MAAIH,QAAJ,EAAc;AACVA,IAAAA,QAAQ,CAACI,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC1BA,MAAAA,OAAO,CAACP,OAAD,CAAP;AACH,KAFD;AAGH;;AACD,MAAIQ,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACvBC,IAAAA,MAAM,CAACC,IAAP,CAAYX,OAAZ,EAAqBM,OAArB,CAA6B,UAACM,GAAD,EAAS;AAClC,UAAIf,eAAe,CAACgB,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AACrCZ,QAAAA,OAAO,CAACY,GAAD,CAAP,GAAe,0BAAaZ,OAAO,CAACY,GAAD,CAApB,CAAf;AACH;AACJ,KAJD;AAKH;;AACD,MAAME,mBAAmB,GAAG,OAAOC,YAAP,KAAwB,WAAxB,GAAsCC,4BAAtC,GAAuDD,YAAnF;AACAD,EAAAA,mBAAmB,CAACf,cAAc,CAACK,KAAf,CAAqBa,GAAtB,EAA2Bd,QAA3B,EAAqCH,OAArC,EAA8CC,YAA9C,CAAnB;AACH,CAjBM;;;;AAkBA,IAAMiB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACnB,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,EAAkDiB,aAAlD,EAAoE;AACtGA,EAAAA,aAAa,CAACC,OAAd,CAAsBhB,KAAtB,GAA8B,uBAAc,uBAAc,EAAd,EAAkBe,aAAa,CAACC,OAAd,CAAsBhB,KAAxC,CAAd,EAA8DJ,OAA9D,CAA9B;AACAF,EAAAA,WAAW,CAACC,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,CAAX;AACH,CAHM;;;eAIQJ,W","sourcesContent":["/* global _updateProps */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { processColor } from './Colors';\nimport { makeShareable, isConfigured } from './core';\nimport { Platform } from 'react-native';\nimport { _updatePropsJS } from './js-reanimated';\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nconst colorProps = [\n    'backgroundColor',\n    'borderBottomColor',\n    'borderColor',\n    'borderLeftColor',\n    'borderRightColor',\n    'borderTopColor',\n    'borderStartColor',\n    'borderEndColor',\n    'color',\n    'shadowColor',\n    'textDecorationColor',\n    'tintColor',\n    'textShadowColor',\n    'overlayColor',\n];\nconst ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nexport const updateProps = (viewDescriptor, updates, maybeViewRef, adapters) => {\n    'worklet';\n    const viewName = viewDescriptor.value.name || 'RCTView';\n    if (adapters) {\n        adapters.forEach((adapter) => {\n            adapter(updates);\n        });\n    }\n    if (Platform.OS !== 'web') {\n        Object.keys(updates).forEach((key) => {\n            if (ColorProperties.indexOf(key) !== -1) {\n                updates[key] = processColor(updates[key]);\n            }\n        });\n    }\n    const updatePropsInternal = typeof _updateProps === 'undefined' ? _updatePropsJS : _updateProps;\n    updatePropsInternal(viewDescriptor.value.tag, viewName, updates, maybeViewRef);\n};\nexport const updatePropsJestWrapper = (viewDescriptor, updates, maybeViewRef, adapters, animatedStyle) => {\n    animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n    updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\nexport default updateProps;\n"]},"metadata":{},"sourceType":"script"}