{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useScreenDimensions = useScreenDimensions;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native\");\n\nfunction getOrientation(width, height) {\n  if (width > height) {\n    return 'landscape';\n  }\n\n  return 'portrait';\n}\n\nfunction useScreenDimensions() {\n  var _useState = (0, _react.useState)(_reactNative.Dimensions.get('screen')),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      screenData = _useState2[0],\n      setScreenData = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(getOrientation(screenData.width, screenData.height)),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      orientation = _useState4[0],\n      setOrientation = _useState4[1];\n\n  var onChange = function onChange(result) {\n    setScreenData(result.screen);\n    setOrientation(getOrientation(result.screen.width, result.screen.height));\n  };\n\n  (0, _react.useEffect)(function () {\n    _reactNative.Dimensions.addEventListener('change', onChange);\n\n    return function () {\n      _reactNative.Dimensions.removeEventListener('change', onChange);\n    };\n  }, [orientation]);\n  return {\n    screen: screenData,\n    orientation: orientation\n  };\n}","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/hooks/layout.ts"],"names":["getOrientation","width","height","useScreenDimensions","Dimensions","get","screenData","setScreenData","orientation","setOrientation","onChange","result","screen","addEventListener","removeEventListener"],"mappings":";;;;;;;;;AAAA;;AACA;;AAGA,SAASA,cAAT,CAAwBC,KAAxB,EAAuCC,MAAvC,EAAoE;AAChE,MAAID,KAAK,GAAGC,MAAZ,EAAoB;AAChB,WAAO,WAAP;AACH;;AACD,SAAO,UAAP;AACH;;AAEM,SAASC,mBAAT,GAA+B;AAClC,kBAAoC,qBAASC,wBAAWC,GAAX,CAAe,QAAf,CAAT,CAApC;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAsC,qBAAsBP,cAAc,CAACM,UAAU,CAACL,KAAZ,EAAmBK,UAAU,CAACJ,MAA9B,CAApC,CAAtC;AAAA;AAAA,MAAOM,WAAP;AAAA,MAAoBC,cAApB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAAwD;AACrEJ,IAAAA,aAAa,CAACI,MAAM,CAACC,MAAR,CAAb;AACAH,IAAAA,cAAc,CAACT,cAAc,CAACW,MAAM,CAACC,MAAP,CAAcX,KAAf,EAAsBU,MAAM,CAACC,MAAP,CAAcV,MAApC,CAAf,CAAd;AAEH,GAJD;;AAMA,wBAAU,YAAM;AACZE,4BAAWS,gBAAX,CAA4B,QAA5B,EAAsCH,QAAtC;;AACA,WAAO,YAAM;AACTN,8BAAWU,mBAAX,CAA+B,QAA/B,EAAyCJ,QAAzC;AACH,KAFD;AAGH,GALD,EAKG,CAACF,WAAD,CALH;AAMA,SAAO;AAAEI,IAAAA,MAAM,EAAEN,UAAV;AAAsBE,IAAAA,WAAW,EAAXA;AAAtB,GAAP;AACH","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Dimensions, ScaledSize } from \"react-native\";\r\n\r\ntype Orientation = 'portrait' | 'landscape';\r\nfunction getOrientation(width: number, height: number): Orientation {\r\n    if (width > height) {\r\n        return 'landscape';\r\n    }\r\n    return 'portrait';\r\n}\r\n\r\nexport function useScreenDimensions() {\r\n    const [screenData, setScreenData] = useState(Dimensions.get('screen'));\r\n    const [orientation, setOrientation] = useState<Orientation>(getOrientation(screenData.width, screenData.height));\r\n\r\n    const onChange = (result: { window: ScaledSize, screen: ScaledSize }) => {\r\n        setScreenData(result.screen);\r\n        setOrientation(getOrientation(result.screen.width, result.screen.height));\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        Dimensions.addEventListener('change', onChange);\r\n        return () => {\r\n            Dimensions.removeEventListener('change', onChange);\r\n        }\r\n    }, [orientation]);\r\n    return { screen: screenData, orientation };\r\n}"]},"metadata":{},"sourceType":"script"}