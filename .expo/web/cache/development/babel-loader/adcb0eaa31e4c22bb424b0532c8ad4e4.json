{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventEmitter = exports.BleModule = void 0;\n\nvar _reactNative = require(\"react-native\");\n\nvar _TypeDefinition = require(\"./TypeDefinition\");\n\nvar BleModule = _reactNative.NativeModules.BleClientManager;\nexports.BleModule = BleModule;\nvar EventEmitter = _reactNative.NativeEventEmitter;\nexports.EventEmitter = EventEmitter;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-ble-plx/src/BleModule.js"],"names":["BleModule","NativeModules","BleClientManager","EventEmitter","NativeEventEmitter"],"mappings":"AACA;;;;;;;AAEA;;AACA;;AAqzBO,IAAMA,SAA6B,GAAGC,2BAAcC,gBAApD;;AACA,IAAMC,YAAY,GAAGC,+BAArB","sourcesContent":["// @flow\n'use strict'\n\nimport { NativeModules, NativeEventEmitter } from 'react-native'\nimport { State, LogLevel, ConnectionPriority } from './TypeDefinition'\nimport type {\n  DeviceId,\n  Identifier,\n  UUID,\n  TransactionId,\n  Base64,\n  ScanOptions,\n  ConnectionOptions\n} from './TypeDefinition'\n\n/**\n * Native device object passed from BleModule.\n * @private\n */\nexport interface NativeDevice {\n  /**\n   * Device identifier: MAC address on Android and UUID on iOS.\n   * @private\n   */\n  id: DeviceId;\n  /**\n   * Device name if present\n   * @private\n   */\n  name: ?string;\n  /**\n   * Current Received Signal Strength Indication of device\n   * @private\n   */\n  rssi: ?number;\n  /**\n   * Current Maximum Transmission Unit for this device. When device is not connected\n   * default value of 23 is used.\n   * @private\n   */\n  mtu: number;\n\n  // Advertisement\n\n  /**\n   * Device's custom manufacturer data. Its format is defined by manufacturer.\n   * @private\n   */\n  manufacturerData: ?Base64;\n\n  /**\n   * Map od service UUIDs with associated data.\n   * @private\n   */\n  serviceData: ?{ [uuid: UUID]: Base64 };\n\n  /**\n   * List of available services visible during scanning.\n   * @private\n   */\n  serviceUUIDs: ?Array<UUID>;\n\n  /**\n   * User friendly name of device.\n   * @private\n   */\n  localName: ?string;\n\n  /**\n   * Transmission power level of device.\n   * @private\n   */\n  txPowerLevel: ?number;\n\n  /**\n   * List of solicited service UUIDs.\n   * @private\n   */\n  solicitedServiceUUIDs: ?Array<UUID>;\n\n  /**\n   * Is device connectable.\n   * @private\n   */\n  isConnectable: ?boolean;\n\n  /**\n   * List of overflow service UUIDs.\n   * @private\n   */\n  overflowServiceUUIDs: ?Array<UUID>;\n}\n\n/**\n * Native service object passed from BleModule.\n * @private\n */\nexport interface NativeService {\n  /**\n   * Service unique identifier\n   * @private\n   */\n  id: Identifier;\n  /**\n   * Service UUID\n   * @private\n   */\n  uuid: UUID;\n  /**\n   * Device's ID to which service belongs\n   * @private\n   */\n  deviceID: DeviceId;\n  /**\n   * Value indicating whether the type of service is primary or secondary.\n   * @private\n   */\n  isPrimary: boolean;\n}\n\n/**\n * Native characteristic object passed from BleModule.\n * @private\n */\nexport interface NativeCharacteristic {\n  /**\n   * Characteristic unique identifier\n   * @private\n   */\n  id: Identifier;\n  /**\n   * Characteristic UUID\n   * @private\n   */\n  uuid: UUID;\n  /**\n   * Service's ID to which characteristic belongs\n   * @private\n   */\n  serviceID: Identifier;\n  /**\n   * Service's UUID to which characteristic belongs\n   * @private\n   */\n  serviceUUID: UUID;\n  /**\n   * Device's ID to which characteristic belongs\n   * @private\n   */\n  deviceID: DeviceId;\n  /**\n   * True if characteristic can be read\n   * @private\n   */\n  isReadable: boolean;\n  /**\n   * True if characteristic can be written with response\n   * @private\n   */\n  isWritableWithResponse: boolean;\n  /**\n   * True if characteristic can be written without response\n   * @private\n   */\n  isWritableWithoutResponse: boolean;\n  /**\n   * True if characteristic can monitor value changes.\n   * @private\n   */\n  isNotifiable: boolean;\n  /**\n   * True if characteristic is monitoring value changes without ACK.\n   * @private\n   */\n  isNotifying: boolean;\n  /**\n   * True if characteristic is monitoring value changes with ACK.\n   * @private\n   */\n  isIndicatable: boolean;\n  /**\n   * Characteristic value if present\n   * @private\n   */\n  value: ?Base64;\n}\n\n/**\n * Native descriptor object passed from BleModule.\n * @private\n */\nexport interface NativeDescriptor {\n  /**\n   * Descriptor unique identifier\n   * @private\n   */\n  id: Identifier;\n  /**\n   * Descriptor UUID\n   * @private\n   */\n  uuid: UUID;\n  /**\n   * Characteristic's ID to which descriptor belongs\n   * @private\n   */\n  characteristicID: Identifier;\n  /**\n   * Characteristic's UUID to which descriptor belongs\n   * @private\n   */\n  characteristicUUID: UUID;\n  /**\n   * Service's ID to which descriptor belongs\n   * @private\n   */\n  serviceID: Identifier;\n  /**\n   * Service's UUID to which descriptor belongs\n   * @private\n   */\n  serviceUUID: UUID;\n  /**\n   * Device's ID to which descriptor belongs\n   * @private\n   */\n  deviceID: DeviceId;\n  /**\n   * Descriptor value if present\n   * @private\n   */\n  value: ?Base64;\n}\n\n/**\n * Object representing information about restored BLE state after application relaunch.\n * @private\n */\nexport interface NativeBleRestoredState {\n  /**\n   * List of connected devices after state restoration.\n   * @type {Array<NativeDevice>}\n   * @instance\n   * @memberof NativeBleRestoredState\n   * @private\n   */\n  connectedPeripherals: Array<NativeDevice>;\n}\n\n/**\n * Native BLE Module interface\n * @private\n */\nexport interface BleModuleInterface {\n  // NativeModule methods\n\n  addListener(string): void;\n  removeListeners(number): void;\n\n  // Lifecycle\n\n  /**\n   * Creates new native module internally. Only one module\n   * is allowed to be instantiated.\n   * @param {?string} restoreIdentifierKey Optional unique Id used for state restoration of BLE manager.\n   * @private\n   */\n  createClient(restoreIdentifierKey: ?string): void;\n\n  /**\n   * Destroys previously instantiated module. This function is\n   * only safe when previously BleModule was created.\n   * @private\n   */\n  destroyClient(): void;\n\n  // Monitoring state\n\n  /**\n   * Enable Bluetooth. This function blocks until BLE is in PoweredOn state. [Android only]\n   *\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<void>} Promise completes when state transition was successful.\n   * @private\n   */\n  enable(transactionId: TransactionId): Promise<void>;\n\n  /**\n   * Disable Bluetooth. This function blocks until BLE is in PoweredOff state. [Android only]\n   *\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<void>} Promise completes when state transition was successful.\n   * @private\n   */\n  disable(transactionId: TransactionId): Promise<void>;\n\n  /**\n   * Current state of BLE device.\n   *\n   * @returns {Promise<State>} Current state of BLE device.\n   * @private\n   */\n  state(): Promise<$Keys<typeof State>>;\n\n  // Scanning\n\n  /**\n   * Starts device scan.\n   *\n   * @param {?Array<UUID>} filteredUUIDs List of UUIDs for services which needs to be present to detect device during\n   * scanning.\n   * @param {?ScanOptions} options Platform dependent options\n   * @private\n   */\n  startDeviceScan(filteredUUIDs: ?Array<UUID>, options: ?ScanOptions): void;\n\n  /**\n   * Stops device scan.\n   * @private\n   */\n  stopDeviceScan(): void;\n\n  // Device operations\n\n  /**\n   * Request a connection parameter update. This functions may update connection parameters on Android API level 21 or\n   * above.\n   *\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {ConnectionPriority} connectionPriority: Connection priority.\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation.\n   * @returns {Promise<NativeDevice>} Connected device.\n   * @private\n   */\n  requestConnectionPriorityForDevice(\n    deviceIdentifier: DeviceId,\n    connectionPriority: $Values<typeof ConnectionPriority>,\n    transactionId: TransactionId\n  ): Promise<NativeDevice>;\n\n  /**\n   * Reads RSSI for connected device.\n   *\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeDevice>} Connected device with updated RSSI value.\n   * @private\n   */\n  readRSSIForDevice(deviceIdentifier: DeviceId, transactionId: TransactionId): Promise<NativeDevice>;\n\n  /**\n   * Request new MTU value for this device. This function currently is not doing anything\n   * on iOS platform as MTU exchange is done automatically.\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {number} mtu New MTU to negotiate.\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeDevice>} Device with updated MTU size. Default value is 23.\n   * @private\n   */\n  requestMTUForDevice(deviceIdentifier: DeviceId, mtu: number, transactionId: TransactionId): Promise<NativeDevice>;\n\n  // Device management\n\n  /**\n   * Returns a list of known peripherals by their identifiers.\n   * @param {Array<DeviceId>} deviceIdentifiers List of device identifiers\n   * @returns {Promise<Array<NativeDevice>>} List of known devices by their identifiers.\n   * @private\n   */\n  devices(deviceIdentifiers: Array<DeviceId>): Promise<Array<NativeDevice>>;\n\n  /**\n   * Returns a list of the peripherals (containing any of the specified services) currently connected to the system\n   * which have discovered services. Returned devices **may not be connected** to your application.\n   * @param {Array<UUID>} serviceUUIDs List of service UUIDs. Device must contain at least one of them to be listed.\n   * @returns {Promise<Array<NativeDevice>>} List of known devices with discovered services as stated in the parameter.\n   * @private\n   */\n  connectedDevices(serviceUUIDs: Array<UUID>): Promise<Array<NativeDevice>>;\n\n  // Connection management\n\n  /**\n   * Connect to specified device.\n   *\n   * @param {DeviceId} deviceIdentifier Device identifier to connect to.\n   * @param {?ConnectionOptions} options Connection options.\n   * @returns {Promise<NativeDevice>} Connected device.\n   * @private\n   */\n  connectToDevice(deviceIdentifier: DeviceId, options: ?ConnectionOptions): Promise<NativeDevice>;\n\n  /**\n   * Cancels pending device connection.\n   *\n   * @param {DeviceId} deviceIdentifier Device identifier which is already connected.\n   * @returns {Promise<NativeDevice>} Disconnected device.\n   * @private\n   */\n  cancelDeviceConnection(deviceIdentifier: DeviceId): Promise<NativeDevice>;\n\n  /**\n   * Checks if specified device is connected.\n   *\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @returns {Promise<boolean>} True if specified device is connected.\n   * @private\n   */\n  isDeviceConnected(deviceIdentifier: DeviceId): Promise<boolean>;\n\n  // Discovery\n\n  /**\n   * Discovers all services, characteristics and descriptors for specified device.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier.\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeDevice>} Device which has discovered characteristics and services.\n   * @private\n   */\n  discoverAllServicesAndCharacteristicsForDevice(\n    deviceIdentifier: DeviceId,\n    transactionId: TransactionId\n  ): Promise<NativeDevice>;\n\n  // Service and characteristic getters\n\n  /**\n   * List of discovered services for specified device.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier.\n   * @returns {Promise<Array<NativeService>>} List of services available in device.\n   * @private\n   */\n  servicesForDevice(deviceIdentifier: DeviceId): Promise<Array<NativeService>>;\n\n  /**\n   * List of discovered characteristics for specified service.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier.\n   * @param {UUID} serviceUUID Service UUID which contains characteristics.\n   * @returns {Promise<Array<NativeCharacteristic>>} List of characteristics available in service.\n   * @private\n   */\n  characteristicsForDevice(deviceIdentifier: DeviceId, serviceUUID: UUID): Promise<Array<NativeCharacteristic>>;\n\n  /**\n   * List of discovered characteristics for specified service.\n   *\n   * @param {Identifier} serviceIdentifier Service ID which contains characteristics.\n   * @returns {Promise<Array<NativeCharacteristic>>} List of characteristics available in service.\n   * @private\n   */\n  characteristicsForService(serviceIdentifier: Identifier): Promise<Array<NativeCharacteristic>>;\n\n  /**\n   * List of discovered descriptors for specified characteristic.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier.\n   * @param {UUID} serviceUUID Service UUID which contains descriptors.\n   * @param {UUID} characteristicUUID Characteristic UUID which contains descriptors.\n   * @returns {Promise<Array<NativeDescriptor>>} List of descriptors available in characteristic.\n   * @private\n   */\n  descriptorsForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID\n  ): Promise<Array<NativeDescriptor>>;\n\n  /**\n   * List of discovered descriptors for specified characteristic.\n   *\n   * @param {Identifier} serviceIdentifier Service identifier which contains descriptors.\n   * @param {UUID} characteristicUUID Characteristic UUID which contains descriptors.\n   * @returns {Promise<Array<NativeDescriptor>>} List of descriptors available in characteristic.\n   * @private\n   */\n  descriptorsForService(serviceIdentifier: Identifier, characteristicUUID: UUID): Promise<Array<NativeDescriptor>>;\n\n  /**\n   * List of discovered descriptors for specified characteristic.\n   *\n   * @param {Identifier} characteristicIdentifier Characteristic identifier which contains descriptors.\n   * @returns {Promise<Array<NativeDescriptor>>} List of descriptors available in characteristic.\n   * @private\n   */\n  descriptorsForCharacteristic(characteristicIdentifier: Identifier): Promise<Array<NativeDescriptor>>;\n\n  // Characteristics operations\n\n  /**\n   * Read characteristic's value.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier\n   * @param {UUID} serviceUUID Service UUID\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeCharacteristic>} Characteristic for which value was read\n   * @private\n   */\n  readCharacteristicForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    transactionId: TransactionId\n  ): Promise<NativeCharacteristic>;\n\n  /**\n   * Read characteristic's value.\n   *\n   * @param {Identifier} serviceIdentifier Service ID\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeCharacteristic>} Characteristic for which value was read\n   * @private\n   */\n  readCharacteristicForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    transactionId: TransactionId\n  ): Promise<NativeCharacteristic>;\n\n  /**\n   * Read characteristic's value.\n   *\n   * @param {Identifier} characteristicIdentifer Characteristic ID\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeCharacteristic>} Characteristic for which value was read\n   * @private\n   */\n  readCharacteristic(characteristicIdentifer: Identifier, transactionId: TransactionId): Promise<NativeCharacteristic>;\n\n  /**\n   * Write value to characteristic.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier\n   * @param {UUID} serviceUUID Service UUID\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {boolean} withResponse True if write should be with response\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeCharacteristic>} Characteristic which saved passed value\n   * @private\n   */\n  writeCharacteristicForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    valueBase64: Base64,\n    withResponse: boolean,\n    transactionId: TransactionId\n  ): Promise<NativeCharacteristic>;\n\n  /**\n   * Write value to characteristic.\n   *\n   * @param {Identifier} serviceIdentifier Service ID\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {boolean} withResponse True if write should be with response\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeCharacteristic>} Characteristic which saved passed value\n   * @private\n   */\n  writeCharacteristicForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    valueBase64: Base64,\n    withResponse: boolean,\n    transactionId: TransactionId\n  ): Promise<NativeCharacteristic>;\n\n  /**\n   * Write value to characteristic.\n   *\n   * @param {Identifier} characteristicIdentifier Characteristic ID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {boolean} withResponse True if write should be with response\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeCharacteristic>} Characteristic which saved passed value\n   * @private\n   */\n  writeCharacteristic(\n    characteristicIdentifier: Identifier,\n    valueBase64: Base64,\n    withResponse: boolean,\n    transactionId: TransactionId\n  ): Promise<NativeCharacteristic>;\n\n  /**\n   * Setup monitoring of characteristic value.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier\n   * @param {UUID} serviceUUID Service UUID\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<void>} Value which is returned when monitoring was cancelled or resulted in error\n   * @private\n   */\n  monitorCharacteristicForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    transactionId: TransactionId\n  ): Promise<void>;\n\n  /**\n   * Setup monitoring of characteristic value.\n   *\n   * @param {Identifier} serviceIdentifier Service ID\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<void>} Value which is returned when monitoring was cancelled or resulted in error\n   * @private\n   */\n  monitorCharacteristicForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    transactionId: TransactionId\n  ): Promise<void>;\n\n  /**\n   * Setup monitoring of characteristic value.\n   *\n   * @param {Identifier} characteristicIdentifier Characteristic ID\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<void>} Value which is returned when monitoring was cancelled or resulted in error\n   * @private\n   */\n  monitorCharacteristic(characteristicIdentifier: Identifier, transactionId: TransactionId): Promise<void>;\n\n  // Descriptor operations\n\n  /**\n   * Read descriptor's value.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier\n   * @param {UUID} serviceUUID Service UUID\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeDescriptor>} Descriptor for which value was read\n   * @private\n   */\n  readDescriptorForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: TransactionId\n  ): Promise<NativeDescriptor>;\n\n  /**\n   * Read descriptor's value.\n   *\n   * @param {Identifier} serviceIdentifier Service identifier\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeDescriptor>} Descriptor for which value was read\n   * @private\n   */\n  readDescriptorForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: TransactionId\n  ): Promise<NativeDescriptor>;\n\n  /**\n   * Read descriptor's value.\n   *\n   * @param {Identifier} characteristicIdentifier Characteristic identifier\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeDescriptor>} Descriptor for which value was read\n   * @private\n   */\n  readDescriptorForCharacteristic(\n    characteristicIdentifier: Identifier,\n    descriptorUUID: UUID,\n    transactionId: TransactionId\n  ): Promise<NativeDescriptor>;\n\n  /**\n   * Read descriptor's value.\n   *\n   * @param {Identifier} descriptorIdentifier Descriptor identifier\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeDescriptor>} Descriptor for which value was read\n   * @private\n   */\n  readDescriptor(descriptorIdentifier: Identifier, transactionId: TransactionId): Promise<NativeDescriptor>;\n\n  /**\n   * Write value to descriptor.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier\n   * @param {UUID} serviceUUID Service UUID\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeDescriptor>} Descriptor which saved passed value\n   * @private\n   */\n  writeDescriptorForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: TransactionId\n  ): Promise<NativeDescriptor>;\n\n  /**\n   * Write value to descriptor.\n   *\n   * @param {Identifier} serviceIdentifier Service identifier\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeDescriptor>} Descriptor which saved passed value\n   * @private\n   */\n  writeDescriptorForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: TransactionId\n  ): Promise<NativeDescriptor>;\n\n  /**\n   * Write value to descriptor.\n   *\n   * @param {Identifier} characteristicIdentifier Characteristic identifier\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeDescriptor>} Descriptor which saved passed value\n   * @private\n   */\n  writeDescriptorForCharacteristic(\n    characteristicIdentifier: Identifier,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: TransactionId\n  ): Promise<NativeDescriptor>;\n\n  /**\n   * Write value to descriptor.\n   *\n   * @param {Identifier} descriptorIdentifier Descriptor identifier\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<NativeDescriptor>} Descriptor which saved passed value\n   * @private\n   */\n  writeDescriptor(\n    descriptorIdentifier: Identifier,\n    valueBase64: Base64,\n    transactionId: TransactionId\n  ): Promise<NativeDescriptor>;\n\n  // Other APIs\n\n  /**\n   * Cancels specified transaction\n   *\n   * @param {TransactionId} transactionId Transaction handle for operation to be cancelled\n   * @private\n   */\n  cancelTransaction(transactionId: TransactionId): void;\n\n  /**\n   * Sets new log level for native module's logging mechanism.\n   * @param {LogLevel} logLevel New log level to be set.\n   * @private\n   */\n  setLogLevel(logLevel: $Keys<typeof LogLevel>): void;\n\n  /**\n   * Get current log level for native module's logging mechanism.\n   * @returns {Promise<LogLevel>} Current log level.\n   * @private\n   */\n  logLevel(): Promise<$Keys<typeof LogLevel>>;\n\n  // Events\n\n  /**\n   * New scanned event arrived as [?Error, ?NativeDevice] object.\n   * @private\n   */\n  ScanEvent: string;\n\n  /**\n   * Characteristic value update broadcasted due to registered notification as\n   * [?Error, ?NativeCharacteristic, ?TransactionId].\n   * @private\n   */\n  ReadEvent: string;\n\n  /**\n   * BLE Manager changed its state as $Keys<typeof State>\n   * @private\n   */\n  StateChangeEvent: string;\n\n  /**\n   * BLE Manager restored its internal state\n   * @private\n   */\n  RestoreStateEvent: string;\n\n  /**\n   * Device disconnected as [Error?, NativeDevice]\n   * @private\n   */\n  DisconnectionEvent: string;\n}\n\nexport const BleModule: BleModuleInterface = NativeModules.BleClientManager\nexport const EventEmitter = NativeEventEmitter\n"]},"metadata":{},"sourceType":"script"}