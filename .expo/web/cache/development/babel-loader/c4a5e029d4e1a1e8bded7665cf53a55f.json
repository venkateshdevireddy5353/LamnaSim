{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Providers;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _config = require(\"../contexts/config\");\n\nvar _utils = require(\"../components/utils\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _appleHealth = require(\"../health/appleHealth\");\n\nvar _googleFit = require(\"../health/googleFit\");\n\nvar _typography = require(\"../components/typography\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _types = require(\"../types\");\n\nvar _ble = require(\"../health/ble\");\n\nvar _central = require(\"../api/central\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\venkatesh.devireddy\\\\Projects\\\\IoT_Central_CPM\\\\src\\\\screens\\\\providers.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Manager = _reactNative.Platform.select({\n  android: _googleFit.GoogleFitManager,\n  ios: _appleHealth.AppleHealthManager\n});\n\nfunction Providers() {\n  var _useContext = (0, _react.useContext)(_config.ConfigContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var navigation = (0, _native.useNavigation)();\n  (0, _react.useEffect)(function () {\n    var initManager = function initManager() {\n      var payload;\n      return _regenerator.default.async(function initManager$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (state.healthManager) {\n                state.healthManager.startScan(function _callee(device) {\n                  var dev;\n                  return _regenerator.default.async(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _regenerator.default.awrap(state.healthManager.connect(''));\n\n                        case 2:\n                          dev = _context.sent;\n                          navigation.navigate(_types.CONSTANTS.Screens.INSIGHT_SCREEN);\n                          _context.next = 6;\n                          return _regenerator.default.awrap(dev.fetch());\n\n                        case 6:\n                          if (state.centralClient) {\n                            dev.addListener(_ble.DATA_AVAILABLE_EVENT, _central.sendTelemetryData.bind(null, state.centralClient, false));\n                          }\n\n                          dispatch({\n                            type: 'HEALTH_CONNECT',\n                            payload: dev\n                          });\n\n                        case 8:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                });\n              } else {\n                payload = new Manager();\n                dispatch({\n                  type: 'ACTIVATE',\n                  payload: payload\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    initManager();\n  }, [state.healthManager]);\n\n  if (!state.healthManager) {\n    return _react.default.createElement(_reactNative.View, {\n      style: {\n        flex: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, _react.default.createElement(_utils.Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }), _react.default.createElement(_typography.Headline, {\n      style: {\n        flex: 1,\n        textAlign: 'center',\n        justifyContent: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, \"Loading provider data ...\"));\n  }\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/screens/providers.tsx"],"names":["Manager","Platform","select","android","GoogleFitManager","ios","AppleHealthManager","Providers","ConfigContext","state","dispatch","navigation","initManager","healthManager","startScan","device","connect","dev","navigate","CONSTANTS","Screens","INSIGHT_SCREEN","fetch","centralClient","addListener","DATA_AVAILABLE_EVENT","sendTelemetryData","bind","type","payload","flex","textAlign","justifyContent"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAGA,IAAMA,OAAO,GAAGC,sBAASC,MAAT,CAAqE;AACjFC,EAAAA,OAAO,EAAEC,2BADwE;AAEjFC,EAAAA,GAAG,EAAEC;AAF4E,CAArE,CAAhB;;AAKe,SAASC,SAAT,GAAqB;AAChC,oBAA4B,uBAAWC,qBAAX,CAA5B;AAAA,MAAQC,KAAR,eAAQA,KAAR;AAAA,MAAeC,QAAf,eAAeA,QAAf;;AACA,MAAMC,UAAU,GAAG,4BAAnB;AAEA,wBAAU,YAAM;AACZ,QAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB,kBAAIH,KAAK,CAACI,aAAV,EAAyB;AACrBJ,gBAAAA,KAAK,CAACI,aAAN,CAAoBC,SAApB,CAA8B,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DACPN,KAAK,CAACI,aAAP,CAAwCG,OAAxC,CAAgD,EAAhD,CADQ;;AAAA;AACpBC,0BAAAA,GADoB;AAE1BN,0BAAAA,UAAU,CAACO,QAAX,CAAoBC,iBAAUC,OAAV,CAAkBC,cAAtC;AAF0B;AAAA,4DAGpBJ,GAAG,CAACK,KAAJ,EAHoB;;AAAA;AAK1B,8BAAIb,KAAK,CAACc,aAAV,EAAyB;AACrBN,4BAAAA,GAAG,CAACO,WAAJ,CAAgBC,yBAAhB,EAAsCC,2BAAkBC,IAAlB,CAAuB,IAAvB,EAA6BlB,KAAK,CAACc,aAAnC,EAAkD,KAAlD,CAAtC;AACH;;AACDb,0BAAAA,QAAQ,CAAC;AACLkB,4BAAAA,IAAI,EAAE,gBADD;AAELC,4BAAAA,OAAO,EAAEZ;AAFJ,2BAAD,CAAR;;AAR0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA9B;AAaH,eAdD,MAeK;AACKY,gBAAAA,OADL,GACe,IAAI7B,OAAJ,EADf;AAEDU,gBAAAA,QAAQ,CAAC;AACLkB,kBAAAA,IAAI,EAAE,UADD;AAELC,kBAAAA,OAAO,EAAPA;AAFK,iBAAD,CAAR;AAIH;;AAtBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAwBAjB,IAAAA,WAAW;AACd,GA1BD,EA0BG,CAACH,KAAK,CAACI,aAAP,CA1BH;;AA4BA,MAAI,CAACJ,KAAK,CAACI,aAAX,EAA0B;AACtB,WACI,6BAAC,iBAAD;AAAM,MAAA,KAAK,EAAE;AAAEiB,QAAAA,IAAI,EAAE;AAAR,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,6BAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,6BAAC,oBAAD;AAAU,MAAA,KAAK,EAAE;AAAEA,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,SAAS,EAAE,QAAtB;AAAgCC,QAAAA,cAAc,EAAE;AAAhD,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAFJ,CADJ;AAKH;;AAED,SAAQ,IAAR;AACH","sourcesContent":["import React, { useContext, useEffect } from 'react';\r\nimport { ConfigContext } from '../contexts/config';\r\nimport { Loading } from '../components/utils';\r\nimport { Platform, View } from 'react-native';\r\nimport { AppleHealthManager } from '../health/appleHealth';\r\nimport { IHealthManager, IHealthDevice } from '../models';\r\nimport { GoogleFitManager } from '../health/googleFit';\r\nimport { Headline } from '../components/typography';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { NavigationProperty, CONSTANTS } from '../types';\r\nimport { DATA_AVAILABLE_EVENT } from '../health/ble';\r\nimport { sendTelemetryData } from '../api/central';\r\n\r\n\r\nconst Manager = Platform.select<typeof AppleHealthManager | typeof GoogleFitManager>({\r\n    android: GoogleFitManager,\r\n    ios: AppleHealthManager\r\n}) as (typeof AppleHealthManager | typeof GoogleFitManager);\r\n\r\nexport default function Providers() {\r\n    const { state, dispatch } = useContext(ConfigContext);\r\n    const navigation = useNavigation<NavigationProperty>();\r\n\r\n    useEffect(() => {\r\n        const initManager = async () => {\r\n            if (state.healthManager) {\r\n                state.healthManager.startScan(async (device) => {\r\n                    const dev = await (state.healthManager as IHealthManager).connect('');\r\n                    navigation.navigate(CONSTANTS.Screens.INSIGHT_SCREEN);\r\n                    await dev.fetch();\r\n\r\n                    if (state.centralClient) {\r\n                        dev.addListener(DATA_AVAILABLE_EVENT, sendTelemetryData.bind(null, state.centralClient, false));\r\n                    }\r\n                    dispatch({\r\n                        type: 'HEALTH_CONNECT',\r\n                        payload: dev\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                const payload = new Manager();\r\n                dispatch({\r\n                    type: 'ACTIVATE',\r\n                    payload\r\n                });\r\n            }\r\n        }\r\n        initManager();\r\n    }, [state.healthManager]);\r\n\r\n    if (!state.healthManager) {\r\n        return (\r\n            <View style={{ flex: 1 }}>\r\n                <Loading />\r\n                <Headline style={{ flex: 1, textAlign: 'center', justifyContent: 'center' }}>Loading provider data ...</Headline>\r\n            </View>)\r\n    }\r\n\r\n    return (null);\r\n}"]},"metadata":{},"sourceType":"script"}