{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppleHealthDevice = exports.AppleHealthManager = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _rnAppleHealthkit = _interopRequireDefault(require(\"rn-apple-healthkit\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _utils = require(\"../utils\");\n\nvar _types = require(\"../types\");\n\nvar _ble = require(\"./ble\");\n\nvar _events = require(\"events\");\n\nvar PERMS = _rnAppleHealthkit.default.Constants.Permissions;\nvar OBSERVABLES = [PERMS.StepCount, PERMS.HeartRate, PERMS.DistanceWalkingRunning, PERMS.DistanceCycling, PERMS.BodyTemperature, PERMS.BloodPressureDiastolic, PERMS.BloodPressureSystolic];\nvar OPTIONS = {\n  permissions: {\n    read: OBSERVABLES,\n    write: []\n  }\n};\n\nfunction requestPermissions() {\n  return _regenerator.default.async(function requestPermissions$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            _rnAppleHealthkit.default.isAvailable(function (err, result) {\n              if (err) {\n                return reject(err);\n              }\n\n              return resolve();\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar AppleHealthManager = function () {\n  function AppleHealthManager() {\n    (0, _classCallCheck2.default)(this, AppleHealthManager);\n    this.device = null;\n  }\n\n  (0, _createClass2.default)(AppleHealthManager, [{\n    key: \"startScan\",\n    value: function startScan(onDeviceFound) {\n      var _this = this;\n\n      requestPermissions().then(function () {\n        _rnAppleHealthkit.default.initHealthKit(OPTIONS, function (err, results) {\n          if (err) {\n            throw err;\n          }\n\n          _rnAppleHealthkit.default.initStepCountObserver({}, function () {});\n\n          _rnAppleHealthkit.default.setObserver({\n            type: _types.HealthRealTimeData.Walking\n          });\n\n          _rnAppleHealthkit.default.setObserver({\n            type: _types.HealthRealTimeData.Running\n          });\n\n          _rnAppleHealthkit.default.setObserver({\n            type: _types.HealthRealTimeData.Cycling\n          });\n\n          _this.device = new AppleHealthDevice('healthKit', 'Apple Health Kit');\n          onDeviceFound(_this.device);\n        });\n      });\n    }\n  }, {\n    key: \"stopScan\",\n    value: function stopScan() {\n      return;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(deviceId) {\n      return Promise.resolve(this.device);\n    }\n  }]);\n  return AppleHealthManager;\n}();\n\nexports.AppleHealthManager = AppleHealthManager;\n\nvar AppleHealthDevice = function () {\n  function AppleHealthDevice(id, name) {\n    var _this2 = this;\n\n    (0, _classCallCheck2.default)(this, AppleHealthDevice);\n    this.id = id;\n    this.name = name;\n    this.type = 'platform';\n    this.paired = true;\n    this.connected = false;\n    this.enabled = {};\n    this.eventEmitter = new _events.EventEmitter();\n\n    _reactNative.NativeAppEventEmitter.addListener('change:steps', function (data) {\n      _rnAppleHealthkit.default.getStepCount({}, function (err, result) {\n        if (err) {\n          console.log(\"Error from Apple HealthKit:\\n\" + err.message);\n          return;\n        }\n\n        if (_this2.items) {\n          var item = _this2.items.find(function (i) {\n            return i.id === PERMS.StepCount;\n          });\n\n          if (item) {\n            item.value = result.value;\n          }\n        }\n      });\n    });\n\n    _reactNative.NativeAppEventEmitter.addListener('observer', function (data) {\n      console.log(\"Observer: \" + data);\n    });\n  }\n\n  (0, _createClass2.default)(AppleHealthDevice, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      this.eventEmitter.addListener(eventType, listener);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      this.eventEmitter.removeListener(eventType, listener);\n    }\n  }, {\n    key: \"enableItem\",\n    value: function enableItem(item, status) {\n      var _this3 = this;\n\n      var startDate;\n      return _regenerator.default.async(function enableItem$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!status) {\n                _context2.next = 40;\n                break;\n              }\n\n              if (!this.enabled[item.id]) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", true);\n\n            case 3:\n              startDate = new Date();\n              startDate.setDate(startDate.getDate() - 1);\n              _context2.t0 = item.id;\n              _context2.next = _context2.t0 === PERMS.Steps ? 8 : _context2.t0 === PERMS.StepCount ? 8 : _context2.t0 === PERMS.HeartRate ? 18 : _context2.t0 === PERMS.BodyTemperature ? 22 : _context2.t0 === PERMS.BloodPressureDiastolic ? 26 : _context2.t0 === PERMS.BloodPressureSystolic ? 30 : 34;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.next = 11;\n              return _regenerator.default.awrap(new Promise(function (resolve, reject) {\n                return _rnAppleHealthkit.default.getStepCount({}, function (err, result) {\n                  if (err) {\n                    reject(\"Error from Apple HealthKit:\\n\" + err.message);\n                  } else {\n                    resolve(result.value);\n                  }\n                });\n              }));\n\n            case 11:\n              item.value = _context2.sent;\n              _context2.next = 17;\n              break;\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t1 = _context2[\"catch\"](8);\n              item.value = 0;\n\n            case 17:\n              return _context2.abrupt(\"break\", 35);\n\n            case 18:\n              _context2.next = 20;\n              return _regenerator.default.awrap(new Promise(function (r) {\n                return _rnAppleHealthkit.default.getHeartRateSamples({\n                  startDate: startDate.toISOString()\n                }, function (err, result) {\n                  if (result.length > 0) {\n                    r(result[result.length - 1].value);\n                  } else r(undefined);\n                });\n              }));\n\n            case 20:\n              item.value = _context2.sent;\n              return _context2.abrupt(\"break\", 35);\n\n            case 22:\n              _context2.next = 24;\n              return _regenerator.default.awrap(new Promise(function (r) {\n                return _rnAppleHealthkit.default.getBodyTemperatureSamples({\n                  startDate: startDate.toISOString()\n                }, function (err, result) {\n                  if (result.length > 0) {\n                    r(result[result.length - 1].value);\n                  } else r(undefined);\n                });\n              }));\n\n            case 24:\n              item.value = _context2.sent;\n              return _context2.abrupt(\"break\", 35);\n\n            case 26:\n              _context2.next = 28;\n              return _regenerator.default.awrap(new Promise(function (r) {\n                return _rnAppleHealthkit.default.getBloodPressureSamples({\n                  startDate: startDate.toISOString()\n                }, function (err, result) {\n                  if (result.length > 0) {\n                    r(result[result.length - 1].bloodPressureDiastolicValue);\n                  } else r(undefined);\n                });\n              }));\n\n            case 28:\n              item.value = _context2.sent;\n              return _context2.abrupt(\"break\", 35);\n\n            case 30:\n              _context2.next = 32;\n              return _regenerator.default.awrap(new Promise(function (r) {\n                return _rnAppleHealthkit.default.getBloodPressureSamples({\n                  startDate: startDate.toISOString()\n                }, function (err, result) {\n                  if (result.length > 0) {\n                    r(result[result.length - 1].bloodPressureSystolicValue);\n                  } else r(undefined);\n                });\n              }));\n\n            case 32:\n              item.value = _context2.sent;\n              return _context2.abrupt(\"break\", 35);\n\n            case 34:\n              item.value = 0;\n\n            case 35:\n              this.enabled[item.id] = setInterval(function () {\n                if (item.value != undefined || item.value != null) {\n                  _this3.eventEmitter.emit(_ble.DATA_AVAILABLE_EVENT, {\n                    itemId: item.id,\n                    value: item.value,\n                    itemName: item.name\n                  });\n                }\n              }, 5000);\n              item.enabled = true;\n              return _context2.abrupt(\"return\", true);\n\n            case 40:\n              if (this.enabled[item.id]) {\n                delete this.enabled[item.id];\n              }\n\n              item.enabled = false;\n              return _context2.abrupt(\"return\", false);\n\n            case 43:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[8, 14]], Promise);\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch() {\n      var _this4 = this;\n\n      var fetchedItems;\n      return _regenerator.default.async(function fetch$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              fetchedItems = Object.keys(_types.HealthRealTimeData).concat(OBSERVABLES).map(function (perm) {\n                return {\n                  id: perm,\n                  name: (0, _utils.camelToName)(perm),\n                  enabled: true,\n                  value: undefined\n                };\n              });\n              fetchedItems.map(function (i) {\n                i.enable = function (status) {\n                  return this.enableItem(i, status);\n                }.bind(_this4);\n              }, this);\n              this.items = fetchedItems;\n              this.items.forEach(function (item) {\n                if (item.enabled) {\n                  item.enable(true);\n                }\n              });\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _this5 = this;\n\n      return _regenerator.default.async(function disconnect$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(this.enabled && this.items)) {\n                _context4.next = 3;\n                break;\n              }\n\n              Object.keys(this.enabled).forEach(function (enabledItem) {\n                clearInterval(_this5.enabled[enabledItem]);\n\n                var currentItem = _this5.items.find(function (i) {\n                  return i.id === enabledItem;\n                });\n\n                if (currentItem) {\n                  currentItem.enabled = false;\n                }\n\n                delete _this5.enabled[enabledItem];\n              }, this);\n              return _context4.abrupt(\"return\", Promise.resolve());\n\n            case 3:\n              this.eventEmitter.removeAllListeners(_ble.DATA_AVAILABLE_EVENT);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return AppleHealthDevice;\n}();\n\nexports.AppleHealthDevice = AppleHealthDevice;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/health/appleHealth.ts"],"names":["PERMS","HealthKit","Constants","Permissions","OBSERVABLES","StepCount","HeartRate","DistanceWalkingRunning","DistanceCycling","BodyTemperature","BloodPressureDiastolic","BloodPressureSystolic","OPTIONS","permissions","read","write","requestPermissions","Promise","resolve","reject","isAvailable","err","result","AppleHealthManager","device","onDeviceFound","then","initHealthKit","results","initStepCountObserver","setObserver","type","HealthRealTimeData","Walking","Running","Cycling","AppleHealthDevice","deviceId","id","name","paired","connected","enabled","eventEmitter","EventEmitter","NativeAppEventEmitter","addListener","data","getStepCount","console","log","message","items","item","find","i","value","eventType","listener","context","removeListener","status","startDate","Date","setDate","getDate","Steps","r","getHeartRateSamples","toISOString","length","undefined","getBodyTemperatureSamples","getBloodPressureSamples","bloodPressureDiastolicValue","bloodPressureSystolicValue","setInterval","emit","DATA_AVAILABLE_EVENT","itemId","itemName","fetchedItems","Object","keys","concat","map","perm","enable","enableItem","bind","forEach","enabledItem","clearInterval","currentItem","removeAllListeners"],"mappings":"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","sourcesContent":["import { IHealthManager, IHealthDevice, IHealthItem, DataAvailableCallback, DeviceType } from \"../models\";\r\nimport HealthKit, { HealthKitPermissions, RealTimeData } from 'rn-apple-healthkit';\r\nimport { NativeAppEventEmitter } from \"react-native\";\r\nimport { camelToName } from \"../utils\";\r\nimport { HealthRealTimeData } from \"../types\";\r\nimport { DATA_AVAILABLE_EVENT } from \"./ble\";\r\nimport { EventEmitter } from 'events';\r\n\r\n\r\nconst PERMS = HealthKit.Constants.Permissions;\r\nconst OBSERVABLES = [PERMS.StepCount, PERMS.HeartRate, PERMS.DistanceWalkingRunning, PERMS.DistanceCycling, PERMS.BodyTemperature, PERMS.BloodPressureDiastolic, PERMS.BloodPressureSystolic];\r\nconst OPTIONS: HealthKitPermissions = {\r\n    permissions: {\r\n        read: OBSERVABLES,\r\n        write: []\r\n    }\r\n}\r\n\r\nasync function requestPermissions(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        HealthKit.isAvailable((err, result) => {\r\n            if (err) {\r\n                return reject(err);\r\n            }\r\n            return resolve();\r\n        })\r\n    });\r\n}\r\n\r\nexport class AppleHealthManager implements IHealthManager {\r\n\r\n    private device: IHealthDevice | null;\r\n    constructor() {\r\n        this.device = null;\r\n    }\r\n\r\n    startScan(onDeviceFound: (device: IHealthDevice) => void): void {\r\n        // Use start scan to init\r\n        requestPermissions().then(() => {\r\n            HealthKit.initHealthKit(OPTIONS, (err, results) => {\r\n                if (err) {\r\n                    throw (err);\r\n                }\r\n                HealthKit.initStepCountObserver({}, () => { });\r\n\r\n                HealthKit.setObserver({ type: HealthRealTimeData.Walking });\r\n                HealthKit.setObserver({ type: HealthRealTimeData.Running });\r\n                HealthKit.setObserver({ type: HealthRealTimeData.Cycling });\r\n                this.device = new AppleHealthDevice('healthKit', 'Apple Health Kit')\r\n                onDeviceFound(this.device);\r\n            });\r\n        });\r\n    }\r\n    stopScan(): void {\r\n        return;\r\n    }\r\n    connect(deviceId: string): Promise<IHealthDevice> {\r\n        return Promise.resolve(this.device as IHealthDevice);\r\n    }\r\n\r\n}\r\n\r\nexport class AppleHealthDevice implements IHealthDevice {\r\n\r\n    public items: IHealthItem[] | undefined;\r\n    public paired: boolean;\r\n    public connected: boolean;\r\n    private eventEmitter: EventEmitter;\r\n    public type: DeviceType = 'platform';\r\n\r\n    /**\r\n    * keeps track of the subscribtions\r\n    * The value of each item represents a listener for the event emitter.\r\n    */\r\n    private enabled: {\r\n        [itemId: string]: number;\r\n    };\r\n\r\n    constructor(public id: string, public name: string) {\r\n        this.paired = true;\r\n        this.connected = false;\r\n        this.enabled = {};\r\n        this.eventEmitter = new EventEmitter();\r\n        NativeAppEventEmitter.addListener('change:steps', (data) => {\r\n            HealthKit.getStepCount({}, (err, result) => {\r\n                if (err) {\r\n                    console.log(`Error from Apple HealthKit:\\n${(err as any).message}`);\r\n                    return;\r\n                }\r\n                if (this.items) {\r\n                    let item = this.items.find(i => i.id === PERMS.StepCount);\r\n                    if (item) {\r\n                        item.value = result.value;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        NativeAppEventEmitter.addListener('observer', (data) => {\r\n            console.log(`Observer: ${data}`);\r\n        })\r\n    }\r\n\r\n    addListener(eventType: string, listener: (...args: any[]) => any, context?: any) {\r\n        this.eventEmitter.addListener(eventType, listener)\r\n    }\r\n    removeListener(eventType: string, listener: (...args: any[]) => any) {\r\n        this.eventEmitter.removeListener(eventType, listener);\r\n    }\r\n\r\n    private async enableItem(item: IHealthItem, status: boolean): Promise<boolean> {\r\n        if (status) {\r\n            if (this.enabled[item.id]) {\r\n                return true;\r\n            }\r\n\r\n            // get current value for the item\r\n\r\n            let startDate = new Date();\r\n            startDate.setDate(startDate.getDate() - 1);\r\n            switch (item.id) {\r\n                case PERMS.Steps:\r\n                case PERMS.StepCount:\r\n                    try {\r\n                        item.value = await new Promise((resolve, reject) => HealthKit.getStepCount({}, (err, result) => {\r\n                            if (err) {\r\n                                reject(`Error from Apple HealthKit:\\n${(err as any).message}`)\r\n                            }\r\n                            else {\r\n                                resolve(result.value);\r\n                            }\r\n                        }));\r\n                    }\r\n                    catch (e) {\r\n                        // steps not available for today. Let's put 0\r\n                        item.value = 0\r\n                    }\r\n                    break;\r\n                case PERMS.HeartRate:\r\n                    item.value = await new Promise(r => HealthKit.getHeartRateSamples({ startDate: startDate.toISOString() }, (err, result) => {\r\n                        if (result.length > 0) {\r\n                            r(result[result.length - 1].value);\r\n                        }\r\n                        else r(undefined);\r\n                    }));\r\n                    break;\r\n                case PERMS.BodyTemperature:\r\n                    item.value = await new Promise(r => HealthKit.getBodyTemperatureSamples({ startDate: startDate.toISOString() }, (err, result) => {\r\n                        if (result.length > 0) {\r\n                            r(result[result.length - 1].value);\r\n                        }\r\n                        else r(undefined);\r\n                    }));\r\n                    break;\r\n                case PERMS.BloodPressureDiastolic:\r\n                    item.value = await new Promise(r => HealthKit.getBloodPressureSamples({ startDate: startDate.toISOString() }, (err, result) => {\r\n                        if (result.length > 0) {\r\n                            r(result[result.length - 1].bloodPressureDiastolicValue);\r\n                        }\r\n                        else r(undefined);\r\n                    }));\r\n                    break;\r\n                case PERMS.BloodPressureSystolic:\r\n                    item.value = await new Promise(r => HealthKit.getBloodPressureSamples({ startDate: startDate.toISOString() }, (err, result) => {\r\n                        if (result.length > 0) {\r\n                            r(result[result.length - 1].bloodPressureSystolicValue);\r\n                        }\r\n                        else r(undefined);\r\n                    }));\r\n                    break;\r\n                default:\r\n                    item.value = 0;\r\n            }\r\n\r\n            // @ts-ignore\r\n            // sometimes setInterval gets typings from node instead of react-native\r\n            this.enabled[item.id] = setInterval(() => {\r\n                if (item.value != undefined || item.value != null) {\r\n                    this.eventEmitter.emit(DATA_AVAILABLE_EVENT, { itemId: item.id, value: item.value, itemName: item.name });\r\n                }\r\n            }, 5000);\r\n            item.enabled = true;\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.enabled[item.id]) {\r\n                delete this.enabled[item.id];\r\n            }\r\n            item.enabled = false;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public async fetch() {\r\n        let fetchedItems: any[] = Object.keys(HealthRealTimeData).concat(OBSERVABLES).map(perm => ({\r\n            id: perm,\r\n            name: camelToName(perm),\r\n            enabled: true,\r\n            value: undefined\r\n        }));\r\n        fetchedItems.map(i => {\r\n            i.enable = function (this: AppleHealthDevice, status: boolean) {\r\n                return this.enableItem(i, status);\r\n            }.bind(this);\r\n        }, this);\r\n        this.items = fetchedItems;\r\n        this.items.forEach(item => {\r\n            if (item.enabled) {\r\n                item.enable(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    public async disconnect() {\r\n        // loop through listeners\r\n        if (this.enabled && this.items) {\r\n            Object.keys(this.enabled).forEach(enabledItem => {\r\n                clearInterval(this.enabled[enabledItem]);\r\n                const currentItem = (this.items as IHealthItem[]).find(i => i.id === enabledItem);\r\n                if (currentItem) {\r\n                    currentItem.enabled = false;\r\n                }\r\n                delete this.enabled[enabledItem];\r\n            }, this);\r\n            return Promise.resolve();\r\n        }\r\n        // remove all data listeners\r\n        this.eventEmitter.removeAllListeners(DATA_AVAILABLE_EVENT);\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"script"}