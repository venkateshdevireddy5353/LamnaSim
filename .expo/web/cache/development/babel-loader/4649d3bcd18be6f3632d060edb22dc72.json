{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.invariant = invariant;\nexports.format = format;\nexports.validate = validate;\nexports.writeUint16 = writeUint16;\nexports.writeString = writeString;\nexports.readUint16 = readUint16;\nexports.encodeMultiByteInteger = encodeMultiByteInteger;\nexports.lengthOfUTF8 = lengthOfUTF8;\nexports.stringToUTF8 = stringToUTF8;\nexports.parseUTF8 = parseUTF8;\nexports.decodeMessage = decodeMessage;\n\nvar _constants = require(\"./constants\");\n\nvar _WireMessage = _interopRequireDefault(require(\"./WireMessage\"));\n\nvar _PublishMessage = _interopRequireDefault(require(\"./PublishMessage\"));\n\nvar _Message = _interopRequireDefault(require(\"./Message\"));\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nfunction format(error, substitutions) {\n  var text = error.text;\n\n  if (substitutions) {\n    var field;\n    substitutions.forEach(function (substitution, i) {\n      if (substitution === null) {\n        substitution = 'null';\n      }\n\n      if (substitution === undefined) {\n        substitution = 'undefined';\n      }\n\n      field = '{' + i + '}';\n      text = text.replace(field, substitution.toString());\n    });\n  }\n\n  return text;\n}\n\nfunction validate(obj, keys) {\n  Object.keys(obj).forEach(function (key) {\n    if (keys.hasOwnProperty(key)) {\n      var desiredType = keys[key];\n\n      if (!(desiredType.indexOf('?') === 0 && (typeof obj[key] === 'undefined' || obj[key] === null))) {\n        desiredType = desiredType.replace(/^\\?/, '');\n\n        if (typeof obj[key] !== desiredType) {\n          throw new Error(format(_constants.ERROR.INVALID_TYPE, [typeof obj[key], key]));\n        }\n      }\n    } else {\n      throw new Error('Unknown property, ' + key + '. Valid properties are: ' + Object.keys(keys).join(' '));\n    }\n  });\n}\n\nfunction writeUint16(input, buffer, offset) {\n  buffer[offset++] = input >> 8;\n  buffer[offset++] = input % 256;\n  return offset;\n}\n\nfunction writeString(input, utf8Length, buffer, offset) {\n  offset = writeUint16(utf8Length, buffer, offset);\n  stringToUTF8(input, buffer, offset);\n  return offset + utf8Length;\n}\n\nfunction readUint16(buffer, offset) {\n  return 256 * buffer[offset] + buffer[offset + 1];\n}\n\nfunction encodeMultiByteInteger(number) {\n  var output = new Array(1);\n  var numBytes = 0;\n\n  do {\n    var digit = number % 128;\n    number = number >> 7;\n\n    if (number > 0) {\n      digit |= 0x80;\n    }\n\n    output[numBytes++] = digit;\n  } while (number > 0 && numBytes < 4);\n\n  return output;\n}\n\nfunction lengthOfUTF8(input) {\n  var output = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    var charCode = input.charCodeAt(i);\n\n    if (charCode > 0x7FF) {\n      if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n        i++;\n        output++;\n      }\n\n      output += 3;\n    } else if (charCode > 0x7F) {\n      output += 2;\n    } else {\n      output++;\n    }\n  }\n\n  return output;\n}\n\nfunction stringToUTF8(input, output, start) {\n  var pos = start;\n\n  for (var i = 0; i < input.length; i++) {\n    var charCode = input.charCodeAt(i);\n\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      var lowCharCode = input.charCodeAt(++i);\n\n      if (isNaN(lowCharCode)) {\n        throw new Error(format(_constants.ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n      }\n\n      charCode = (charCode - 0xD800 << 10) + (lowCharCode - 0xDC00) + 0x10000;\n    }\n\n    if (charCode <= 0x7F) {\n      output[pos++] = charCode;\n    } else if (charCode <= 0x7FF) {\n      output[pos++] = charCode >> 6 & 0x1F | 0xC0;\n      output[pos++] = charCode & 0x3F | 0x80;\n    } else if (charCode <= 0xFFFF) {\n      output[pos++] = charCode >> 12 & 0x0F | 0xE0;\n      output[pos++] = charCode >> 6 & 0x3F | 0x80;\n      output[pos++] = charCode & 0x3F | 0x80;\n    } else {\n      output[pos++] = charCode >> 18 & 0x07 | 0xF0;\n      output[pos++] = charCode >> 12 & 0x3F | 0x80;\n      output[pos++] = charCode >> 6 & 0x3F | 0x80;\n      output[pos++] = charCode & 0x3F | 0x80;\n    }\n  }\n\n  return output;\n}\n\nfunction parseUTF8(input, offset, length) {\n  var output = '';\n  var utf16;\n  var pos = offset;\n\n  while (pos < offset + length) {\n    var byte1 = input[pos++];\n\n    if (byte1 < 128) {\n      utf16 = byte1;\n    } else {\n      var byte2 = input[pos++] - 128;\n\n      if (byte2 < 0) {\n        throw new Error(format(_constants.ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), '']));\n      }\n\n      if (byte1 < 0xE0) {\n          utf16 = 64 * (byte1 - 0xC0) + byte2;\n        } else {\n        var byte3 = input[pos++] - 128;\n\n        if (byte3 < 0) {\n          throw new Error(format(_constants.ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n        }\n\n        if (byte1 < 0xF0) {\n            utf16 = 4096 * (byte1 - 0xE0) + 64 * byte2 + byte3;\n          } else {\n          var byte4 = input[pos++] - 128;\n\n          if (byte4 < 0) {\n            throw new Error(format(_constants.ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n          }\n\n          if (byte1 < 0xF8) {\n              utf16 = 262144 * (byte1 - 0xF0) + 4096 * byte2 + 64 * byte3 + byte4;\n            } else {\n              throw new Error(format(_constants.ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n            }\n        }\n      }\n    }\n\n    if (utf16 > 0xFFFF) {\n        utf16 -= 0x10000;\n        output += String.fromCharCode(0xD800 + (utf16 >> 10));\n        utf16 = 0xDC00 + (utf16 & 0x3FF);\n      }\n\n    output += String.fromCharCode(utf16);\n  }\n\n  return output;\n}\n\nfunction decodeMessage(input, pos) {\n  var startingPos = pos;\n  var first = input[pos];\n  var type = first >> 4;\n  var messageInfo = first & 0x0f;\n  pos += 1;\n  var digit;\n  var remLength = 0;\n  var multiplier = 1;\n\n  do {\n    if (pos === input.length) {\n      return [null, startingPos];\n    }\n\n    digit = input[pos++];\n    remLength += (digit & 0x7F) * multiplier;\n    multiplier *= 128;\n  } while ((digit & 0x80) !== 0);\n\n  var endPos = pos + remLength;\n\n  if (endPos > input.length) {\n    return [null, startingPos];\n  }\n\n  var wireMessage;\n\n  switch (type) {\n    case _constants.MESSAGE_TYPE.CONNACK:\n      wireMessage = new _WireMessage.default(type);\n      var connectAcknowledgeFlags = input[pos++];\n      var sessionPresent = connectAcknowledgeFlags & 0x01;\n\n      if (sessionPresent) {\n        wireMessage.sessionPresent = true;\n      }\n\n      wireMessage.returnCode = input[pos++];\n      break;\n\n    case _constants.MESSAGE_TYPE.PUBLISH:\n      var qos = messageInfo >> 1 & 0x03;\n      var len = readUint16(input, pos);\n      pos += 2;\n      var topicName = parseUTF8(input, pos, len);\n      pos += len;\n      var messageIdentifier;\n\n      if (qos > 0) {\n        messageIdentifier = readUint16(input, pos);\n        pos += 2;\n      }\n\n      var message = new _Message.default(input.subarray(pos, endPos));\n\n      if ((messageInfo & 0x01) === 0x01) {\n        message.retained = true;\n      }\n\n      if ((messageInfo & 0x08) === 0x08) {\n        message.duplicate = true;\n      }\n\n      message.qos = qos;\n      message.destinationName = topicName;\n      return [new _PublishMessage.default(message, messageIdentifier), endPos];\n\n    case _constants.MESSAGE_TYPE.PUBACK:\n    case _constants.MESSAGE_TYPE.PUBREC:\n    case _constants.MESSAGE_TYPE.PUBREL:\n    case _constants.MESSAGE_TYPE.PUBCOMP:\n    case _constants.MESSAGE_TYPE.UNSUBACK:\n      wireMessage = new _WireMessage.default(type);\n      wireMessage.messageIdentifier = readUint16(input, pos);\n      break;\n\n    case _constants.MESSAGE_TYPE.SUBACK:\n      wireMessage = new _WireMessage.default(type);\n      wireMessage.messageIdentifier = readUint16(input, pos);\n      pos += 2;\n      wireMessage.returnCode = input.subarray(pos, endPos);\n      break;\n\n    default:\n      wireMessage = new _WireMessage.default(type);\n  }\n\n  return [wireMessage, endPos];\n}","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-azure-iotcentral-client/node_modules/react-native-paho-mqtt/src/util.js"],"names":["invariant","condition","message","Error","format","error","substitutions","text","field","forEach","substitution","i","undefined","replace","toString","validate","obj","keys","Object","key","hasOwnProperty","desiredType","indexOf","ERROR","INVALID_TYPE","join","writeUint16","input","buffer","offset","writeString","utf8Length","stringToUTF8","readUint16","encodeMultiByteInteger","number","output","Array","numBytes","digit","lengthOfUTF8","length","charCode","charCodeAt","start","pos","lowCharCode","isNaN","MALFORMED_UNICODE","parseUTF8","utf16","byte1","byte2","MALFORMED_UTF","byte3","byte4","String","fromCharCode","decodeMessage","startingPos","first","type","messageInfo","remLength","multiplier","endPos","wireMessage","MESSAGE_TYPE","CONNACK","WireMessage","connectAcknowledgeFlags","sessionPresent","returnCode","PUBLISH","qos","len","topicName","messageIdentifier","Message","subarray","retained","duplicate","destinationName","PublishMessage","PUBACK","PUBREC","PUBREL","PUBCOMP","UNSUBACK","SUBACK"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport { ERROR, MESSAGE_TYPE } from './constants';\nimport WireMessage from './WireMessage';\nimport PublishMessage from './PublishMessage';\nimport Message from './Message';\n\nexport function invariant(condition: boolean, message: string) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\n/**\n * Format an error message text.\n *\n * @param error ERROR.KEY value above.\n * @param substitutions [array] substituted into the text.\n * @return the text with the substitutions made.\n */\nexport function format(error: { text: string }, substitutions?: (?(string | number | Uint8Array))[]) {\n  let text = error.text;\n  if (substitutions) {\n    let field;\n    substitutions.forEach((substitution, i) => {\n      if (substitution === null) {\n        substitution = 'null';\n      }\n      if (substitution === undefined) {\n        substitution = 'undefined';\n      }\n      field = '{' + i + '}';\n      text = text.replace(field, substitution.toString());\n    });\n  }\n  return text;\n}\n\n/**\n * Validate an object's parameter names to ensure they\n * match a list of expected letiables name for this option\n * type. Used to ensure option object passed into the API don't\n * contain erroneous parameters.\n * @param {Object} obj - User options object\n * @param {Object} keys - valid keys and types that may exist in obj.\n * @throws {Error} Invalid option parameter found.\n * @private\n */\nexport function validate(obj: {}, keys: { [key: string]: string }) {\n  Object.keys(obj).forEach(key => {\n    if (keys.hasOwnProperty(key)) {\n      let desiredType = keys[key];\n      if (!(desiredType.indexOf('?') === 0 && (typeof obj[key] === 'undefined' || obj[key] === null))) {\n        desiredType = desiredType.replace(/^\\?/, '');\n        if (typeof obj[key] !== desiredType) {\n          throw new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n        }\n      }\n    } else {\n      throw new Error('Unknown property, ' + key + '. Valid properties are: ' + Object.keys(keys).join(' '));\n    }\n  });\n}\n\n//Write a 16-bit number into two bytes of Uint8Array, starting at offset\nexport function writeUint16(input: number, buffer: Uint8Array, offset: number): number {\n  buffer[offset++] = input >> 8;      //MSB\n  buffer[offset++] = input % 256;     //LSB\n  return offset;\n}\n\nexport function writeString(input: string, utf8Length: number, buffer: Uint8Array, offset: number) {\n  offset = writeUint16(utf8Length, buffer, offset);\n  stringToUTF8(input, buffer, offset);\n  return offset + utf8Length;\n}\n\n//Read a 16-bit number out of two bytes of a Uint8Array\nexport function readUint16(buffer: Uint8Array, offset: number): number {\n  return 256 * buffer[offset] + buffer[offset + 1];\n}\n\n/**\n * Encodes an MQTT Multi-Byte Integer\n * @private\n */\nexport function encodeMultiByteInteger(number: number) {\n  let output = new Array(1);\n  let numBytes = 0;\n\n  do {\n    let digit = number % 128;\n    number = number >> 7;\n    if (number > 0) {\n      digit |= 0x80;\n    }\n    output[numBytes++] = digit;\n  } while ((number > 0) && (numBytes < 4));\n\n  return output;\n}\n\n/**\n * Takes a String and calculates its length in bytes when encoded in UTF8.\n * @private\n */\nexport function lengthOfUTF8(input: string): number {\n  let output = 0;\n  for (let i = 0; i < input.length; i++) {\n    const charCode = input.charCodeAt(i);\n    if (charCode > 0x7FF) {\n      // Surrogate pair means its a 4 byte character\n      if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n        i++;\n        output++;\n      }\n      output += 3;\n    }\n    else if (charCode > 0x7F) {\n      output += 2;\n    } else {\n      output++;\n    }\n  }\n  return output;\n}\n\n/**\n * Takes a String and writes it into an array as UTF8 encoded bytes.\n * @private\n */\nexport function stringToUTF8(input: string, output: Uint8Array, start: number): Uint8Array {\n  let pos = start;\n  for (let i = 0; i < input.length; i++) {\n    let charCode = input.charCodeAt(i);\n\n    // Check for a surrogate pair.\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      const lowCharCode = input.charCodeAt(++i);\n      if (isNaN(lowCharCode)) {\n        throw new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n      }\n      charCode = ((charCode - 0xD800) << 10) + (lowCharCode - 0xDC00) + 0x10000;\n\n    }\n\n    if (charCode <= 0x7F) {\n      output[pos++] = charCode;\n    } else if (charCode <= 0x7FF) {\n      output[pos++] = charCode >> 6 & 0x1F | 0xC0;\n      output[pos++] = charCode & 0x3F | 0x80;\n    } else if (charCode <= 0xFFFF) {\n      output[pos++] = charCode >> 12 & 0x0F | 0xE0;\n      output[pos++] = charCode >> 6 & 0x3F | 0x80;\n      output[pos++] = charCode & 0x3F | 0x80;\n    } else {\n      output[pos++] = charCode >> 18 & 0x07 | 0xF0;\n      output[pos++] = charCode >> 12 & 0x3F | 0x80;\n      output[pos++] = charCode >> 6 & 0x3F | 0x80;\n      output[pos++] = charCode & 0x3F | 0x80;\n    }\n  }\n  return output;\n}\n\nexport function parseUTF8(input: Uint8Array, offset: number, length: number): string {\n  let output = '';\n  let utf16;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    let byte1 = input[pos++];\n    if (byte1 < 128) {\n      utf16 = byte1;\n    } else {\n      let byte2 = input[pos++] - 128;\n      if (byte2 < 0) {\n        throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), '']));\n      }\n      if (byte1 < 0xE0)             // 2 byte character\n      {\n        utf16 = 64 * (byte1 - 0xC0) + byte2;\n      } else {\n        let byte3 = input[pos++] - 128;\n        if (byte3 < 0) {\n          throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n        }\n        if (byte1 < 0xF0)        // 3 byte character\n        {\n          utf16 = 4096 * (byte1 - 0xE0) + 64 * byte2 + byte3;\n        } else {\n          let byte4 = input[pos++] - 128;\n          if (byte4 < 0) {\n            throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n          }\n          if (byte1 < 0xF8)        // 4 byte character\n          {\n            utf16 = 262144 * (byte1 - 0xF0) + 4096 * byte2 + 64 * byte3 + byte4;\n          } else                     // longer encodings are not supported\n          {\n            throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n          }\n        }\n      }\n    }\n\n    if (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n    {\n      utf16 -= 0x10000;\n      output += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n      utf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n    }\n    output += String.fromCharCode(utf16);\n  }\n  return output;\n}\n\nexport function decodeMessage(input: Uint8Array, pos: number): [?WireMessage | PublishMessage, number] {\n  const startingPos = pos;\n  let first = input[pos];\n  const type = first >> 4;\n  const messageInfo = (first & 0x0f);\n  pos += 1;\n\n\n  // Decode the remaining length (MBI format)\n\n  let digit;\n  let remLength = 0;\n  let multiplier = 1;\n  do {\n    if (pos === input.length) {\n      return [null, startingPos];\n    }\n    digit = input[pos++];\n    remLength += ((digit & 0x7F) * multiplier);\n    multiplier *= 128;\n  } while ((digit & 0x80) !== 0);\n\n  const endPos = pos + remLength;\n  if (endPos > input.length) {\n    return [null, startingPos];\n  }\n\n  let wireMessage;\n  switch (type) {\n    case MESSAGE_TYPE.CONNACK:\n      wireMessage = new WireMessage(type);\n      const connectAcknowledgeFlags = input[pos++];\n      const sessionPresent = connectAcknowledgeFlags & 0x01;\n      if (sessionPresent) {\n        wireMessage.sessionPresent = true;\n      }\n      wireMessage.returnCode = input[pos++];\n      break;\n\n    case MESSAGE_TYPE.PUBLISH:\n      const qos: any = (messageInfo >> 1) & 0x03;\n\n      const len = readUint16(input, pos);\n      pos += 2;\n      const topicName = parseUTF8(input, pos, len);\n      pos += len;\n      let messageIdentifier;\n      // If QoS 1 or 2 there will be a messageIdentifier\n      if (qos > 0) {\n        messageIdentifier = readUint16(input, pos);\n        pos += 2;\n      }\n\n      const message = new Message(input.subarray(pos, endPos));\n      if ((messageInfo & 0x01) === 0x01) {\n        message.retained = true;\n      }\n      if ((messageInfo & 0x08) === 0x08) {\n        message.duplicate = true;\n      }\n      message.qos = qos;\n      message.destinationName = topicName;\n      return [new PublishMessage(message, messageIdentifier), endPos];\n\n    case  MESSAGE_TYPE.PUBACK:\n    case  MESSAGE_TYPE.PUBREC:\n    case  MESSAGE_TYPE.PUBREL:\n    case  MESSAGE_TYPE.PUBCOMP:\n    case  MESSAGE_TYPE.UNSUBACK:\n      wireMessage = new WireMessage(type);\n      wireMessage.messageIdentifier = readUint16(input, pos);\n      break;\n\n    case  MESSAGE_TYPE.SUBACK:\n      wireMessage = new WireMessage(type);\n      wireMessage.messageIdentifier = readUint16(input, pos);\n      pos += 2;\n      wireMessage.returnCode = input.subarray(pos, endPos);\n      break;\n\n    default:\n      wireMessage = new WireMessage(type);\n  }\n  return [wireMessage, endPos];\n}\n"]},"metadata":{},"sourceType":"script"}