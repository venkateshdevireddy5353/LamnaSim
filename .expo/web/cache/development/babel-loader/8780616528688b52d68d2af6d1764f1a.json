{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Characteristic = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _Descriptor = require(\"./Descriptor\");\n\nvar Characteristic = function () {\n  function Characteristic(nativeCharacteristic, manager) {\n    (0, _classCallCheck2.default)(this, Characteristic);\n    (0, _extends2.default)(this, nativeCharacteristic, {\n      _manager: manager\n    });\n  }\n\n  (0, _createClass2.default)(Characteristic, [{\n    key: \"descriptors\",\n    value: function descriptors() {\n      return this._manager._descriptorsForCharacteristic(this.id);\n    }\n  }, {\n    key: \"read\",\n    value: function read(transactionId) {\n      return this._manager._readCharacteristic(this.id, transactionId);\n    }\n  }, {\n    key: \"writeWithResponse\",\n    value: function writeWithResponse(valueBase64, transactionId) {\n      return this._manager._writeCharacteristicWithResponse(this.id, valueBase64, transactionId);\n    }\n  }, {\n    key: \"writeWithoutResponse\",\n    value: function writeWithoutResponse(valueBase64, transactionId) {\n      return this._manager._writeCharacteristicWithoutResponse(this.id, valueBase64, transactionId);\n    }\n  }, {\n    key: \"monitor\",\n    value: function monitor(listener, transactionId) {\n      return this._manager._monitorCharacteristic(this.id, listener, transactionId);\n    }\n  }, {\n    key: \"readDescriptor\",\n    value: function readDescriptor(descriptorUUID, transactionId) {\n      return _regenerator.default.async(function readDescriptor$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this._manager._readDescriptorForCharacteristic(this.id, descriptorUUID, transactionId));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"writeDescriptor\",\n    value: function writeDescriptor(descriptorUUID, valueBase64, transactionId) {\n      return _regenerator.default.async(function writeDescriptor$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this._manager._writeDescriptorForCharacteristic(this.id, descriptorUUID, valueBase64, transactionId));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return Characteristic;\n}();\n\nexports.Characteristic = Characteristic;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-ble-plx/src/Characteristic.js"],"names":["Characteristic","nativeCharacteristic","manager","_manager","_descriptorsForCharacteristic","id","transactionId","_readCharacteristic","valueBase64","_writeCharacteristicWithResponse","_writeCharacteristicWithoutResponse","listener","_monitorCharacteristic","descriptorUUID","_readDescriptorForCharacteristic","_writeDescriptorForCharacteristic"],"mappings":"AACA;;;;;;;;;;;;;;;;;AAIA;;IAOaA,c;AA6DX,0BAAYC,oBAAZ,EAAwDC,OAAxD,EAA6E;AAAA;AAC3E,2BAAc,IAAd,EAAoBD,oBAApB,EAA0C;AAAEE,MAAAA,QAAQ,EAAED;AAAZ,KAA1C;AACD;;;;WAQD,uBAA0C;AACxC,aAAO,KAAKC,QAAL,CAAcC,6BAAd,CAA4C,KAAKC,EAAjD,CAAP;AACD;;;WAUD,cAAKC,aAAL,EAA6D;AAC3D,aAAO,KAAKH,QAAL,CAAcI,mBAAd,CAAkC,KAAKF,EAAvC,EAA2CC,aAA3C,CAAP;AACD;;;WAWD,2BAAkBE,WAAlB,EAAuCF,aAAvC,EAA+F;AAC7F,aAAO,KAAKH,QAAL,CAAcM,gCAAd,CAA+C,KAAKJ,EAApD,EAAwDG,WAAxD,EAAqEF,aAArE,CAAP;AACD;;;WAWD,8BAAqBE,WAArB,EAA0CF,aAA1C,EAAkG;AAChG,aAAO,KAAKH,QAAL,CAAcO,mCAAd,CAAkD,KAAKL,EAAvD,EAA2DG,WAA3D,EAAwEF,aAAxE,CAAP;AACD;;;WAWD,iBACEK,QADF,EAEEL,aAFF,EAGgB;AACd,aAAO,KAAKH,QAAL,CAAcS,sBAAd,CAAqC,KAAKP,EAA1C,EAA8CM,QAA9C,EAAwDL,aAAxD,CAAP;AACD;;;WAWD,wBAAqBO,cAArB,EAA2CP,aAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,+CACS,KAAKH,QAAL,CAAcW,gCAAd,CAA+C,KAAKT,EAApD,EAAwDQ,cAAxD,EAAwEP,aAAxE,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAYA,yBAAsBO,cAAtB,EAA4CL,WAA5C,EAAiEF,aAAjE;AAAA;AAAA;AAAA;AAAA;AAAA,gDACS,KAAKH,QAAL,CAAcY,iCAAd,CAAgD,KAAKV,EAArD,EAAyDQ,cAAzD,EAAyEL,WAAzE,EAAsFF,aAAtF,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// @flow\n'use strict'\n\nimport type { BleManager } from './BleManager'\nimport type { BleError } from './BleError'\nimport { Descriptor } from './Descriptor'\nimport type { NativeCharacteristic } from './BleModule'\nimport type { DeviceId, Identifier, UUID, TransactionId, Base64, Subscription } from './TypeDefinition'\n\n/**\n * Characteristic object.\n */\nexport class Characteristic implements NativeCharacteristic {\n  /**\n   * Internal BLE Manager handle\n   * @private\n   */\n  _manager: BleManager\n  /**\n   * Characteristic unique identifier\n   */\n  id: Identifier\n  /**\n   * Characteristic UUID\n   */\n  uuid: UUID\n  /**\n   * Service's ID to which characteristic belongs\n   */\n  serviceID: Identifier\n  /**\n   * Service's UUID to which characteristic belongs\n   */\n  serviceUUID: UUID\n  /**\n   * Device's ID to which characteristic belongs\n   */\n  deviceID: DeviceId\n  /**\n   * True if characteristic can be read\n   */\n  isReadable: boolean\n  /**\n   * True if characteristic can be written with response\n   */\n  isWritableWithResponse: boolean\n  /**\n   * True if characteristic can be written without response\n   */\n  isWritableWithoutResponse: boolean\n  /**\n   * True if characteristic can monitor value changes.\n   */\n  isNotifiable: boolean\n  /**\n   * True if characteristic is monitoring value changes without ACK.\n   */\n  isNotifying: boolean\n  /**\n   * True if characteristic is monitoring value changes with ACK.\n   */\n  isIndicatable: boolean\n  /**\n   * Characteristic value if present\n   */\n  value: ?Base64\n\n  /**\n   * Private constructor used to create instance of {@link Characteristic}.\n   * @param {NativeCharacteristic} nativeCharacteristic NativeCharacteristic\n   * @param {BleManager} manager BleManager\n   * @private\n   */\n  constructor(nativeCharacteristic: NativeCharacteristic, manager: BleManager) {\n    Object.assign(this, nativeCharacteristic, { _manager: manager })\n  }\n\n  /**\n   * {@link #blemanagerdescriptorsfordevice|bleManager.descriptorsForDevice()} with partially filled arguments.\n   *\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for this {@link Characteristic}.\n   */\n  descriptors(): Promise<Array<Descriptor>> {\n    return this._manager._descriptorsForCharacteristic(this.id)\n  }\n\n  /**\n   * {@link #blemanagerreadcharacteristicfordevice|bleManager.readCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits this {@link Characteristic}. Latest value will be stored\n   * inside returned object.\n   */\n  read(transactionId: ?TransactionId): Promise<Characteristic> {\n    return this._manager._readCharacteristic(this.id, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithresponsefordevice|bleManager.writeCharacteristicWithResponseForDevice()} with partially filled arguments.\n   *\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits this {@link Characteristic}. Latest value may\n   * not be stored inside returned object.\n   */\n  writeWithResponse(valueBase64: Base64, transactionId: ?TransactionId): Promise<Characteristic> {\n    return this._manager._writeCharacteristicWithResponse(this.id, valueBase64, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithoutresponsefordevice|bleManager.writeCharacteristicWithoutResponseForDevice()} with partially filled arguments.\n   *\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits this {@link Characteristic}. Latest value may\n   * not be stored inside returned object.\n   */\n  writeWithoutResponse(valueBase64: Base64, transactionId: ?TransactionId): Promise<Characteristic> {\n    return this._manager._writeCharacteristicWithoutResponse(this.id, valueBase64, transactionId)\n  }\n\n  /**\n   * {@link #blemanagermonitorcharacteristicfordevice|bleManager.monitorCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener callback which emits\n   * this {@link Characteristic} with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  monitor(\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId\n  ): Subscription {\n    return this._manager._monitorCharacteristic(this.id, listener, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerreaddescriptorfordevice|bleManager.readDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   */\n  async readDescriptor(descriptorUUID: UUID, transactionId: ?TransactionId): Promise<Descriptor> {\n    return this._manager._readDescriptorForCharacteristic(this.id, descriptorUUID, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritedescriptorfordevice|bleManager.writeDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value.\n   */\n  async writeDescriptor(descriptorUUID: UUID, valueBase64: Base64, transactionId: ?TransactionId): Promise<Descriptor> {\n    return this._manager._writeDescriptorForCharacteristic(this.id, descriptorUUID, valueBase64, transactionId)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}