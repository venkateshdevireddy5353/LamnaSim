{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createAnimatedComponent;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _ReanimatedEventEmitter = _interopRequireDefault(require(\"./ReanimatedEventEmitter\"));\n\nvar _AnimatedEvent = _interopRequireDefault(require(\"./reanimated1/core/AnimatedEvent\"));\n\nvar _AnimatedNode = _interopRequireDefault(require(\"./reanimated1/core/AnimatedNode\"));\n\nvar _AnimatedValue = _interopRequireDefault(require(\"./reanimated1/core/AnimatedValue\"));\n\nvar _AnimatedProps = require(\"./reanimated1/core/AnimatedProps\");\n\nvar _WorkletEventHandler = _interopRequireDefault(require(\"./reanimated2/WorkletEventHandler\"));\n\nvar _setAndForwardRef = _interopRequireDefault(require(\"./setAndForwardRef\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _ConfigHelper = require(\"./ConfigHelper\");\n\nvar _RNRenderer = require(\"./reanimated2/platform-specific/RNRenderer\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\venkatesh.devireddy\\\\Projects\\\\IoT_Central_CPM\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\createAnimatedComponent.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  var component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nfunction dummyListener() {}\n\nfunction hasAnimatedNodes(value) {\n  if (value instanceof _AnimatedNode.default) {\n    return true;\n  }\n\n  if (Array.isArray(value)) {\n    return value.some(function (item) {\n      return hasAnimatedNodes(item);\n    });\n  }\n\n  if (value && typeof value === 'object') {\n    return Object.keys(value).some(function (key) {\n      return hasAnimatedNodes(value[key]);\n    });\n  }\n\n  return false;\n}\n\nfunction flattenArray(array) {\n  if (!Array.isArray(array)) {\n    return array;\n  }\n\n  var resultArr = [];\n\n  var _flattenArray = function _flattenArray(arr) {\n    arr.forEach(function (item) {\n      if (Array.isArray(item)) {\n        _flattenArray(item);\n      } else {\n        resultArr.push(item);\n      }\n    });\n  };\n\n  _flattenArray(array);\n\n  return resultArr;\n}\n\nfunction createAnimatedComponent(Component) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _invariant.default)(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');\n\n  var AnimatedComponent = function (_React$Component) {\n    (0, _inherits2.default)(AnimatedComponent, _React$Component);\n\n    var _super = _createSuper(AnimatedComponent);\n\n    function AnimatedComponent(props) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, AnimatedComponent);\n      _this = _super.call(this, props);\n      _this._invokeAnimatedPropsCallbackOnMount = false;\n\n      _this._animatedPropsCallback = function () {\n        if (_this._component == null) {\n          _this._invokeAnimatedPropsCallbackOnMount = true;\n        } else if (typeof _this._component.setNativeProps !== 'function') {\n          _this.forceUpdate();\n        } else {\n          _this._component.setNativeProps(_this._propsAnimated.__getValue());\n        }\n      };\n\n      _this._setComponentRef = (0, _setAndForwardRef.default)({\n        getForwardedRef: function getForwardedRef() {\n          return _this.props.forwardedRef;\n        },\n        setLocalRef: function setLocalRef(ref) {\n          if (ref !== _this._component) {\n            _this._component = ref;\n          }\n\n          if (ref != null && ref.getNode == null) {\n            ref.getNode = function () {\n              var _ref$constructor$name;\n\n              console.warn('%s: Calling %s on the ref of an Animated component ' + 'is no longer necessary. You can now directly use the ref ' + 'instead. This method will be removed in a future release.', (_ref$constructor$name = ref.constructor.name) != null ? _ref$constructor$name : '<<anonymous>>', 'getNode()');\n              return ref;\n            };\n          }\n        }\n      });\n\n      _this._attachProps(_this.props);\n\n      if (process.env.JEST_WORKER_ID) {\n        _this.animatedStyle = {\n          value: {}\n        };\n      }\n\n      return _this;\n    }\n\n    (0, _createClass2.default)(AnimatedComponent, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._detachPropUpdater();\n\n        this._propsAnimated && this._propsAnimated.__detach();\n\n        this._detachNativeEvents();\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (this._invokeAnimatedPropsCallbackOnMount) {\n          this._invokeAnimatedPropsCallbackOnMount = false;\n\n          this._animatedPropsCallback();\n        }\n\n        this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n\n        this._attachNativeEvents();\n\n        this._attachPropUpdater();\n\n        this._attachAnimatedStyles();\n      }\n    }, {\n      key: \"_getEventViewRef\",\n      value: function _getEventViewRef() {\n        return this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;\n      }\n    }, {\n      key: \"_attachNativeEvents\",\n      value: function _attachNativeEvents() {\n        var node = this._getEventViewRef();\n\n        var viewTag = (0, _reactNative.findNodeHandle)(options.setNativeProps ? this : node);\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof _AnimatedEvent.default) {\n            prop.attachEvent(node, key);\n          } else if (prop != null && prop.current && prop.current instanceof _WorkletEventHandler.default) {\n            prop.current.registerForEvents(viewTag, key);\n          }\n        }\n      }\n    }, {\n      key: \"_detachNativeEvents\",\n      value: function _detachNativeEvents() {\n        var node = this._getEventViewRef();\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof _AnimatedEvent.default) {\n            prop.detachEvent(node, key);\n          } else if (prop != null && prop.current && prop.current instanceof _WorkletEventHandler.default) {\n            prop.current.unregisterFromEvents();\n          }\n        }\n      }\n    }, {\n      key: \"_reattachNativeEvents\",\n      value: function _reattachNativeEvents(prevProps) {\n        var node = this._getEventViewRef();\n\n        var attached = new Set();\n        var nextEvts = new Set();\n        var viewTag;\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof _AnimatedEvent.default) {\n            nextEvts.add(prop.__nodeID);\n          } else if (prop != null && prop.current && prop.current instanceof _WorkletEventHandler.default) {\n            if (viewTag === undefined) {\n              viewTag = prop.current.viewTag;\n            }\n          }\n        }\n\n        for (var _key in prevProps) {\n          var _prop = this.props[_key];\n\n          if (_prop instanceof _AnimatedEvent.default) {\n            if (!nextEvts.has(_prop.__nodeID)) {\n              _prop.detachEvent(node, _key);\n            } else {\n              attached.add(_prop.__nodeID);\n            }\n          } else if (_prop != null && _prop.current && _prop.current instanceof _WorkletEventHandler.default && _prop.current.reattachNeeded) {\n            _prop.current.unregisterFromEvents();\n          }\n        }\n\n        for (var _key2 in this.props) {\n          var _prop2 = this.props[_key2];\n\n          if (_prop2 instanceof _AnimatedEvent.default && !attached.has(_prop2.__nodeID)) {\n            _prop2.attachEvent(node, _key2);\n          } else if (_prop2 != null && _prop2.current && _prop2.current instanceof _WorkletEventHandler.default && _prop2.current.reattachNeeded) {\n            _prop2.current.registerForEvents(viewTag, _key2);\n\n            _prop2.current.reattachNeeded = false;\n          }\n        }\n      }\n    }, {\n      key: \"_attachProps\",\n      value: function _attachProps(nextProps) {\n        var oldPropsAnimated = this._propsAnimated;\n        this._propsAnimated = (0, _AnimatedProps.createOrReusePropsNode)(nextProps, this._animatedPropsCallback, oldPropsAnimated);\n\n        if (oldPropsAnimated !== this._propsAnimated) {\n          oldPropsAnimated && oldPropsAnimated.__detach();\n        }\n      }\n    }, {\n      key: \"_updateFromNative\",\n      value: function _updateFromNative(props) {\n        if (options.setNativeProps) {\n          options.setNativeProps(this._component, props);\n        } else {\n          var _this$_component$setN, _this$_component;\n\n          (_this$_component$setN = (_this$_component = this._component).setNativeProps) == null ? void 0 : _this$_component$setN.call(_this$_component, props);\n        }\n      }\n    }, {\n      key: \"_attachPropUpdater\",\n      value: function _attachPropUpdater() {\n        var viewTag = (0, _reactNative.findNodeHandle)(this);\n        NODE_MAPPING.set(viewTag, this);\n\n        if (NODE_MAPPING.size === 1) {\n          _ReanimatedEventEmitter.default.addListener('onReanimatedPropsChange', listener);\n        }\n      }\n    }, {\n      key: \"_attachAnimatedStyles\",\n      value: function _attachAnimatedStyles() {\n        var _this2 = this,\n            _this$props$animatedP;\n\n        var styles = Array.isArray(this.props.style) ? this.props.style : [this.props.style];\n        styles = flattenArray(styles);\n        var viewTag, viewName;\n\n        if (_reactNative.Platform.OS === 'web') {\n          viewTag = (0, _reactNative.findNodeHandle)(this);\n          viewName = null;\n        } else {\n          var _hostInstance$viewCon;\n\n          var hostInstance = _RNRenderer.RNRenderer.findHostInstance_DEPRECATED(this);\n\n          if (!hostInstance) {\n            throw new Error('Cannot find host instance for this component. Maybe it renders nothing?');\n          }\n\n          viewTag = hostInstance == null ? void 0 : hostInstance._nativeTag;\n          viewName = hostInstance == null ? void 0 : (_hostInstance$viewCon = hostInstance.viewConfig) == null ? void 0 : _hostInstance$viewCon.uiViewClassName;\n\n          if (hostInstance && this._hasReanimated2Props(styles) && hostInstance.viewConfig) {\n            (0, _ConfigHelper.adaptViewConfig)(hostInstance.viewConfig);\n          }\n        }\n\n        styles.forEach(function (style) {\n          if (style != null && style.viewDescriptor) {\n            style.viewDescriptor.value = {\n              tag: viewTag,\n              name: viewName\n            };\n\n            if (process.env.JEST_WORKER_ID) {\n              _this2.animatedStyle.value = _objectSpread(_objectSpread({}, _this2.animatedStyle.value), style.initial);\n              style.animatedStyle.current = _this2.animatedStyle;\n            }\n          }\n        });\n\n        if ((_this$props$animatedP = this.props.animatedProps) != null && _this$props$animatedP.viewDescriptor) {\n          this.props.animatedProps.viewDescriptor.value = {\n            tag: viewTag,\n            name: viewName\n          };\n        }\n      }\n    }, {\n      key: \"_hasReanimated2Props\",\n      value: function _hasReanimated2Props(flattenStyles) {\n        var _this$props$animatedP2;\n\n        if ((_this$props$animatedP2 = this.props.animatedProps) != null && _this$props$animatedP2.viewDescriptor) {\n          return true;\n        }\n\n        if (this.props.style) {\n          for (var _iterator = _createForOfIteratorHelperLoose(flattenStyles), _step; !(_step = _iterator()).done;) {\n            var style = _step.value;\n\n            if (style != null && style.hasOwnProperty('viewDescriptor')) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"_detachPropUpdater\",\n      value: function _detachPropUpdater() {\n        var viewTag = (0, _reactNative.findNodeHandle)(this);\n        NODE_MAPPING.delete(viewTag);\n\n        if (NODE_MAPPING.size === 0) {\n          _ReanimatedEventEmitter.default.removeAllListeners('onReanimatedPropsChange');\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        this._attachProps(this.props);\n\n        this._reattachNativeEvents(prevProps);\n\n        this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n      }\n    }, {\n      key: \"_filterNonAnimatedStyle\",\n      value: function _filterNonAnimatedStyle(inputStyle) {\n        var style = {};\n\n        for (var key in inputStyle) {\n          var value = inputStyle[key];\n\n          if (!hasAnimatedNodes(value)) {\n            style[key] = value;\n          } else if (value instanceof _AnimatedValue.default) {\n            style[key] = value._startingValue;\n          }\n        }\n\n        return style;\n      }\n    }, {\n      key: \"_filterNonAnimatedProps\",\n      value: function _filterNonAnimatedProps(inputProps) {\n        var _this3 = this;\n\n        var props = {};\n\n        var _loop = function _loop(key) {\n          var value = inputProps[key];\n\n          if (key === 'style') {\n            var styles = Array.isArray(value) ? value : [value];\n            var processedStyle = styles.map(function (style) {\n              if (style && style.viewDescriptor) {\n                if (style.viewRef.current === null) {\n                  style.viewRef.current = _this3;\n                }\n\n                return style.initial;\n              } else {\n                return style;\n              }\n            });\n            props[key] = _this3._filterNonAnimatedStyle(_reactNative.StyleSheet.flatten(processedStyle));\n          } else if (key === 'animatedProps') {\n            Object.keys(value.initial).forEach(function (key) {\n              props[key] = value.initial[key];\n\n              if (value.viewRef.current === null) {\n                value.viewRef.current = _this3;\n              }\n            });\n          } else if (value instanceof _AnimatedEvent.default) {\n            props[key] = dummyListener;\n          } else if (value != null && value.current && value.current instanceof _WorkletEventHandler.default) {\n            if (value.current.eventNames.length > 0) {\n              value.current.eventNames.forEach(function (eventName) {\n                props[eventName] = value.current.listeners ? value.current.listeners[eventName] : dummyListener;\n              });\n            } else {\n              props[key] = dummyListener;\n            }\n          } else if (!(value instanceof _AnimatedNode.default)) {\n            props[key] = value;\n          } else if (value instanceof _AnimatedValue.default) {\n            props[key] = value._startingValue;\n          }\n        };\n\n        for (var key in inputProps) {\n          _loop(key);\n        }\n\n        return props;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this._filterNonAnimatedProps(this.props);\n\n        if (process.env.JEST_WORKER_ID) {\n          props.animatedStyle = this.animatedStyle;\n        }\n\n        var platformProps = _reactNative.Platform.select({\n          web: {},\n          default: {\n            collapsable: false\n          }\n        });\n\n        return _react.default.createElement(Component, (0, _extends2.default)({}, props, {\n          ref: this._setComponentRef\n        }, platformProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n    return AnimatedComponent;\n  }(_react.default.Component);\n\n  AnimatedComponent.displayName = \"AnimatedComponent(\" + (Component.displayName || Component.name || 'Component') + \")\";\n  return _react.default.forwardRef(function AnimatedComponentWrapper(props, ref) {\n    return _react.default.createElement(AnimatedComponent, (0, _extends2.default)({}, props, ref == null ? null : {\n      forwardedRef: ref\n    }, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 7\n      }\n    }));\n  });\n}","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-reanimated/lib/createAnimatedComponent.js"],"names":["NODE_MAPPING","Map","listener","data","component","get","viewTag","_updateFromNative","props","dummyListener","hasAnimatedNodes","value","AnimatedNode","Array","isArray","some","item","Object","keys","key","flattenArray","array","resultArr","_flattenArray","arr","forEach","push","createAnimatedComponent","Component","options","prototype","isReactComponent","AnimatedComponent","_invokeAnimatedPropsCallbackOnMount","_animatedPropsCallback","_component","setNativeProps","forceUpdate","_propsAnimated","__getValue","_setComponentRef","getForwardedRef","forwardedRef","setLocalRef","ref","getNode","console","warn","constructor","name","_attachProps","process","env","JEST_WORKER_ID","animatedStyle","_detachPropUpdater","__detach","_detachNativeEvents","setNativeView","_attachNativeEvents","_attachPropUpdater","_attachAnimatedStyles","getScrollableNode","node","_getEventViewRef","prop","AnimatedEvent","attachEvent","current","WorkletEventHandler","registerForEvents","detachEvent","unregisterFromEvents","prevProps","attached","Set","nextEvts","add","__nodeID","undefined","has","reattachNeeded","nextProps","oldPropsAnimated","set","size","ReanimatedEventEmitter","addListener","styles","style","viewName","Platform","OS","hostInstance","RNRenderer","findHostInstance_DEPRECATED","Error","_nativeTag","viewConfig","uiViewClassName","_hasReanimated2Props","viewDescriptor","tag","initial","animatedProps","flattenStyles","hasOwnProperty","delete","removeAllListeners","_reattachNativeEvents","inputStyle","AnimatedValue","_startingValue","inputProps","processedStyle","map","viewRef","_filterNonAnimatedStyle","StyleSheet","flatten","eventNames","length","eventName","listeners","_filterNonAnimatedProps","platformProps","select","web","default","collapsable","React","displayName","forwardRef","AnimatedComponentWrapper"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { findNodeHandle, Platform, StyleSheet } from 'react-native';\nimport ReanimatedEventEmitter from './ReanimatedEventEmitter';\n\nimport AnimatedEvent from './reanimated1/core/AnimatedEvent';\nimport AnimatedNode from './reanimated1/core/AnimatedNode';\nimport AnimatedValue from './reanimated1/core/AnimatedValue';\nimport { createOrReusePropsNode } from './reanimated1/core/AnimatedProps';\nimport WorkletEventHandler from './reanimated2/WorkletEventHandler';\nimport setAndForwardRef from './setAndForwardRef';\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adaptViewConfig } from './ConfigHelper';\nimport { RNRenderer } from './reanimated2/platform-specific/RNRenderer';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nfunction dummyListener() {\n  // empty listener we use to assign to listener properties for which animated\n  // event is used.\n}\n\nfunction hasAnimatedNodes(value) {\n  if (value instanceof AnimatedNode) {\n    return true;\n  }\n  if (Array.isArray(value)) {\n    return value.some((item) => hasAnimatedNodes(item));\n  }\n  if (value && typeof value === 'object') {\n    return Object.keys(value).some((key) => hasAnimatedNodes(value[key]));\n  }\n  return false;\n}\n\nfunction flattenArray(array) {\n  if (!Array.isArray(array)) {\n    return array;\n  }\n  const resultArr = [];\n\n  const _flattenArray = (arr) => {\n    arr.forEach((item) => {\n      if (Array.isArray(item)) {\n        _flattenArray(item);\n      } else {\n        resultArr.push(item);\n      }\n    });\n  };\n  _flattenArray(array);\n  return resultArr;\n}\n\nexport default function createAnimatedComponent(Component, options = {}) {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    '`createAnimatedComponent` does not support stateless functional components; ' +\n      'use a class component instead.'\n  );\n\n  class AnimatedComponent extends React.Component {\n    _invokeAnimatedPropsCallbackOnMount = false;\n\n    constructor(props) {\n      super(props);\n      this._attachProps(this.props);\n      if (process.env.JEST_WORKER_ID) {\n        this.animatedStyle = { value: {} };\n      }\n    }\n\n    componentWillUnmount() {\n      this._detachPropUpdater();\n      this._propsAnimated && this._propsAnimated.__detach();\n      this._detachNativeEvents();\n    }\n\n    componentDidMount() {\n      if (this._invokeAnimatedPropsCallbackOnMount) {\n        this._invokeAnimatedPropsCallbackOnMount = false;\n        this._animatedPropsCallback();\n      }\n\n      this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n      this._attachNativeEvents();\n      this._attachPropUpdater();\n      this._attachAnimatedStyles();\n    }\n\n    _getEventViewRef() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      return this._component.getScrollableNode\n        ? this._component.getScrollableNode()\n        : this._component;\n    }\n\n    _attachNativeEvents() {\n      const node = this._getEventViewRef();\n      const viewTag = findNodeHandle(options.setNativeProps ? this : node);\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.attachEvent(node, key);\n        } else if (\n          prop?.current &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          prop.current.registerForEvents(viewTag, key);\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      const node = this._getEventViewRef();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.detachEvent(node, key);\n        } else if (\n          prop?.current &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          prop.current.unregisterFromEvents();\n        }\n      }\n    }\n\n    _reattachNativeEvents(prevProps) {\n      const node = this._getEventViewRef();\n      const attached = new Set();\n      const nextEvts = new Set();\n      let viewTag;\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          nextEvts.add(prop.__nodeID);\n        } else if (\n          prop?.current &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          if (viewTag === undefined) {\n            viewTag = prop.current.viewTag;\n          }\n        }\n      }\n      for (const key in prevProps) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          if (!nextEvts.has(prop.__nodeID)) {\n            // event was in prev props but not in current props, we detach\n            prop.detachEvent(node, key);\n          } else {\n            // event was in prev and is still in current props\n            attached.add(prop.__nodeID);\n          }\n        } else if (\n          prop?.current &&\n          prop.current instanceof WorkletEventHandler &&\n          prop.current.reattachNeeded\n        ) {\n          prop.current.unregisterFromEvents();\n        }\n      }\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent && !attached.has(prop.__nodeID)) {\n          // not yet attached\n          prop.attachEvent(node, key);\n        } else if (\n          prop?.current &&\n          prop.current instanceof WorkletEventHandler &&\n          prop.current.reattachNeeded\n        ) {\n          prop.current.registerForEvents(viewTag, key);\n          prop.current.reattachNeeded = false;\n        }\n      }\n    }\n\n    // The system is best designed when setNativeProps is implemented. It is\n    // able to avoid re-rendering and directly set the attributes that changed.\n    // However, setNativeProps can only be implemented on native components\n    // If you want to animate a composite component, you need to re-render it.\n    // In this case, we have a fallback that uses forceUpdate.\n    _animatedPropsCallback = () => {\n      if (this._component == null) {\n        // AnimatedProps is created in will-mount because it's used in render.\n        // But this callback may be invoked before mount in async mode,\n        // In which case we should defer the setNativeProps() call.\n        // React may throw away uncommitted work in async mode,\n        // So a deferred call won't always be invoked.\n        this._invokeAnimatedPropsCallbackOnMount = true;\n      } else if (typeof this._component.setNativeProps !== 'function') {\n        this.forceUpdate();\n      } else {\n        this._component.setNativeProps(this._propsAnimated.__getValue());\n      }\n    };\n\n    _attachProps(nextProps) {\n      const oldPropsAnimated = this._propsAnimated;\n\n      this._propsAnimated = createOrReusePropsNode(\n        nextProps,\n        this._animatedPropsCallback,\n        oldPropsAnimated\n      );\n      // If prop node has been reused we don't need to call into \"__detach\"\n      if (oldPropsAnimated !== this._propsAnimated) {\n        // When you call detach, it removes the element from the parent list\n        // of children. If it goes to 0, then the parent also detaches itself\n        // and so on.\n        // An optimization is to attach the new elements and THEN detach the old\n        // ones instead of detaching and THEN attaching.\n        // This way the intermediate state isn't to go to 0 and trigger\n        // this expensive recursive detaching to then re-attach everything on\n        // the very next operation.\n        oldPropsAnimated && oldPropsAnimated.__detach();\n      }\n    }\n\n    _updateFromNative(props) {\n      if (options.setNativeProps) {\n        options.setNativeProps(this._component, props);\n      } else {\n        // eslint-disable-next-line no-unused-expressions\n        this._component.setNativeProps?.(props);\n      }\n    }\n\n    _attachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.set(viewTag, this);\n      if (NODE_MAPPING.size === 1) {\n        ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\n      }\n    }\n\n    _attachAnimatedStyles() {\n      let styles = Array.isArray(this.props.style)\n        ? this.props.style\n        : [this.props.style];\n      styles = flattenArray(styles);\n      let viewTag, viewName;\n      if (Platform.OS === 'web') {\n        viewTag = findNodeHandle(this);\n        viewName = null;\n      } else {\n        // hostInstance can be null for a component that doesn't render anything (render function returns null). Example: svg Stop: https://github.com/react-native-svg/react-native-svg/blob/develop/src/elements/Stop.tsx\n        const hostInstance = RNRenderer.findHostInstance_DEPRECATED(this);\n        if (!hostInstance) {\n          throw new Error(\n            'Cannot find host instance for this component. Maybe it renders nothing?'\n          );\n        }\n        // we can access view tag in the same way it's accessed here https://github.com/facebook/react/blob/e3f4eb7272d4ca0ee49f27577156b57eeb07cf73/packages/react-native-renderer/src/ReactFabric.js#L146\n        viewTag = hostInstance?._nativeTag;\n        /**\n         * RN uses viewConfig for components for storing different properties of the component(example: https://github.com/facebook/react-native/blob/master/Libraries/Components/ScrollView/ScrollViewViewConfig.js#L16).\n         * The name we're looking for is in the field named uiViewClassName.\n         */\n        viewName = hostInstance?.viewConfig?.uiViewClassName;\n        // update UI props whitelist for this view\n        if (\n          hostInstance &&\n          this._hasReanimated2Props(styles) &&\n          hostInstance.viewConfig\n        ) {\n          adaptViewConfig(hostInstance.viewConfig);\n        }\n      }\n\n      styles.forEach((style) => {\n        if (style?.viewDescriptor) {\n          style.viewDescriptor.value = { tag: viewTag, name: viewName };\n          if (process.env.JEST_WORKER_ID) {\n            /**\n             * We need to connect Jest's TestObject instance whose contains just props object\n             * with the updateProps() function where we update the properties of the component.\n             * We can't update props object directly because TestObject contains a copy of props - look at render function:\n             * const props = this._filterNonAnimatedProps(this.props);\n             */\n            this.animatedStyle.value = {\n              ...this.animatedStyle.value,\n              ...style.initial,\n            };\n            style.animatedStyle.current = this.animatedStyle;\n          }\n        }\n      });\n      // attach animatedProps property\n      if (this.props.animatedProps?.viewDescriptor) {\n        this.props.animatedProps.viewDescriptor.value = {\n          tag: viewTag,\n          name: viewName,\n        };\n      }\n    }\n\n    _hasReanimated2Props(flattenStyles) {\n      if (this.props.animatedProps?.viewDescriptor) {\n        return true;\n      }\n      if (this.props.style) {\n        for (const style of flattenStyles) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (style?.hasOwnProperty('viewDescriptor')) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    _detachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.delete(viewTag);\n      if (NODE_MAPPING.size === 0) {\n        ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\n      }\n    }\n\n    componentDidUpdate(prevProps) {\n      this._attachProps(this.props);\n      this._reattachNativeEvents(prevProps);\n\n      this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n    }\n\n    _setComponentRef = setAndForwardRef({\n      getForwardedRef: () => this.props.forwardedRef,\n      setLocalRef: (ref) => {\n        if (ref !== this._component) {\n          this._component = ref;\n        }\n\n        // TODO: Delete this after React Native also deletes this deprecation helper.\n        if (ref != null && ref.getNode == null) {\n          ref.getNode = () => {\n            console.warn(\n              '%s: Calling %s on the ref of an Animated component ' +\n                'is no longer necessary. You can now directly use the ref ' +\n                'instead. This method will be removed in a future release.',\n              ref.constructor.name ?? '<<anonymous>>',\n              'getNode()'\n            );\n            return ref;\n          };\n        }\n      },\n    });\n\n    _filterNonAnimatedStyle(inputStyle) {\n      const style = {};\n      for (const key in inputStyle) {\n        const value = inputStyle[key];\n        if (!hasAnimatedNodes(value)) {\n          style[key] = value;\n        } else if (value instanceof AnimatedValue) {\n          // if any style in animated component is set directly to the `Value` we set those styles to the first value of `Value` node in order\n          // to avoid flash of default styles when `Value` is being asynchrounously sent via bridge and initialized in the native side.\n          style[key] = value._startingValue;\n        }\n      }\n      return style;\n    }\n\n    _filterNonAnimatedProps(inputProps) {\n      const props = {};\n      for (const key in inputProps) {\n        const value = inputProps[key];\n        if (key === 'style') {\n          const styles = Array.isArray(value) ? value : [value];\n          const processedStyle = styles.map((style) => {\n            if (style && style.viewDescriptor) {\n              // this is how we recognize styles returned by useAnimatedStyle\n              if (style.viewRef.current === null) {\n                style.viewRef.current = this;\n              }\n              return style.initial;\n            } else {\n              return style;\n            }\n          });\n          props[key] = this._filterNonAnimatedStyle(\n            StyleSheet.flatten(processedStyle)\n          );\n        } else if (key === 'animatedProps') {\n          Object.keys(value.initial).forEach((key) => {\n            props[key] = value.initial[key];\n            if (value.viewRef.current === null) {\n              value.viewRef.current = this;\n            }\n          });\n        } else if (value instanceof AnimatedEvent) {\n          // we cannot filter out event listeners completely as some components\n          // rely on having a callback registered in order to generate events\n          // alltogether. Therefore we provide a dummy callback here to allow\n          // native event dispatcher to hijack events.\n          props[key] = dummyListener;\n        } else if (\n          value?.current &&\n          value.current instanceof WorkletEventHandler\n        ) {\n          if (value.current.eventNames.length > 0) {\n            value.current.eventNames.forEach((eventName) => {\n              props[eventName] = value.current.listeners\n                ? value.current.listeners[eventName]\n                : dummyListener;\n            });\n          } else {\n            props[key] = dummyListener;\n          }\n        } else if (!(value instanceof AnimatedNode)) {\n          props[key] = value;\n        } else if (value instanceof AnimatedValue) {\n          // if any prop in animated component is set directly to the `Value` we set those props to the first value of `Value` node in order\n          // to avoid default values for a short moment when `Value` is being asynchrounously sent via bridge and initialized in the native side.\n          props[key] = value._startingValue;\n        }\n      }\n      return props;\n    }\n\n    render() {\n      const props = this._filterNonAnimatedProps(this.props);\n      if (process.env.JEST_WORKER_ID) {\n        props.animatedStyle = this.animatedStyle;\n      }\n\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n      return (\n        <Component {...props} ref={this._setComponentRef} {...platformProps} />\n      );\n    }\n  }\n\n  AnimatedComponent.displayName = `AnimatedComponent(${\n    Component.displayName || Component.name || 'Component'\n  })`;\n\n  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {\n    return (\n      <AnimatedComponent\n        {...props}\n        {...(ref == null ? null : { forwardedRef: ref })}\n      />\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"script"}