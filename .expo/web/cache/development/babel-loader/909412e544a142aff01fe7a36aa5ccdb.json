{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fireAfterInterval = fireAfterInterval;\nexports.TEST_MAX_IF_NOT_NAN = exports.VEC_LEN_SQ = exports.TEST_MIN_IF_NOT_NAN = exports.isValidNumber = exports.isnan = void 0;\n\nvar isnan = function isnan(v) {\n  return Number.isNaN(v);\n};\n\nexports.isnan = isnan;\n\nvar isValidNumber = function isValidNumber(v) {\n  return typeof v === 'number' && !Number.isNaN(v);\n};\n\nexports.isValidNumber = isValidNumber;\n\nvar TEST_MIN_IF_NOT_NAN = function TEST_MIN_IF_NOT_NAN(value, limit) {\n  return !isnan(limit) && (limit < 0 && value <= limit || limit >= 0 && value >= limit);\n};\n\nexports.TEST_MIN_IF_NOT_NAN = TEST_MIN_IF_NOT_NAN;\n\nvar VEC_LEN_SQ = function VEC_LEN_SQ() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 0 : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 0 : _ref$y;\n\n  return x * x + y * y;\n};\n\nexports.VEC_LEN_SQ = VEC_LEN_SQ;\n\nvar TEST_MAX_IF_NOT_NAN = function TEST_MAX_IF_NOT_NAN(value, max) {\n  return !isnan(max) && (max < 0 && value < max || max >= 0 && value > max);\n};\n\nexports.TEST_MAX_IF_NOT_NAN = TEST_MAX_IF_NOT_NAN;\n\nfunction fireAfterInterval(method, interval) {\n  if (!interval) {\n    method();\n    return null;\n  }\n\n  return setTimeout(function () {\n    return method();\n  }, interval);\n}","map":{"version":3,"sources":["utils.ts"],"names":["isnan","v","Number","isValidNumber","TEST_MIN_IF_NOT_NAN","limit","value","VEC_LEN_SQ","x","y","TEST_MAX_IF_NOT_NAN","max","method","setTimeout"],"mappings":";;;;;;AACO,IAAMA,KAAK,GAAIC,SAATD,KAASC,CAAAA,CAAD;AAAA,SAAgBC,MAAM,CAANA,KAAAA,CAA9B,CAA8BA,CAAhB;AAAA,CAAd;;;;AAGA,IAAMC,aAAa,GAAIF,SAAjBE,aAAiBF,CAAAA,CAAD;AAAA,SAC3B,OAAA,CAAA,KAAA,QAAA,IAAyB,CAACC,MAAM,CAANA,KAAAA,CADrB,CACqBA,CADC;AAAA,CAAtB;;;;AAGA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,KAAA,EAAA,KAAA;AAAA,SACjC,CAACJ,KAAK,CAAN,KAAM,CAAN,KACEK,KAAK,GAALA,CAAAA,IAAaC,KAAK,IAAnB,KAACD,IAAiCA,KAAK,IAALA,CAAAA,IAAcC,KAAK,IAFjD,KACL,CADiC;AAAA,CAA5B;;;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,iFAAA,EAAA;AAAA,oBAAGC,CAAH;AAAA,MAAGA,CAAH,uBAAC,CAAD;AAAA,oBAAUC,CAAV;AAAA,MAAUA,CAAV,uBAAc,CAAd;;AAAA,SAA2BD,CAAC,GAADA,CAAAA,GAAQC,CAAC,GAAvD,CAAmB;AAAA,CAAnB;;;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,KAAA,EAAA,GAAA;AAAA,SACjC,CAACV,KAAK,CAAN,GAAM,CAAN,KAAiBW,GAAG,GAAHA,CAAAA,IAAWL,KAAK,GAAjB,GAACK,IAA4BA,GAAG,IAAHA,CAAAA,IAAYL,KAAK,GADzD,GACL,CADiC;AAAA,CAA5B;;;;AAGA,SAAA,iBAAA,CAAA,MAAA,EAAA,QAAA,EAGL;AACA,MAAI,CAAJ,QAAA,EAAe;AACbM,IAAAA,MAAM;AACN,WAAA,IAAA;AACD;;AACD,SAAOC,UAAU,CAAC;AAAA,WAAMD,MAAP,EAAC;AAAA,GAAD,EAAjB,QAAiB,CAAjB;AACD","sourcesContent":["// TODO(TS) remove if not necessary after rewrite\nexport const isnan = (v: unknown) => Number.isNaN(v);\n\n// TODO(TS) remove if not necessary after rewrite\nexport const isValidNumber = (v: unknown) =>\n  typeof v === 'number' && !Number.isNaN(v);\n\nexport const TEST_MIN_IF_NOT_NAN = (value: number, limit: number): boolean =>\n  !isnan(limit) &&\n  ((limit < 0 && value <= limit) || (limit >= 0 && value >= limit));\nexport const VEC_LEN_SQ = ({ x = 0, y = 0 } = {}) => x * x + y * y;\nexport const TEST_MAX_IF_NOT_NAN = (value: number, max: number) =>\n  !isnan(max) && ((max < 0 && value < max) || (max >= 0 && value > max));\n\nexport function fireAfterInterval(\n  method: () => void,\n  interval?: number | boolean\n) {\n  if (!interval) {\n    method();\n    return null;\n  }\n  return setTimeout(() => method(), interval);\n}\n"]},"metadata":{},"sourceType":"script"}