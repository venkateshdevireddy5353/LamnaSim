{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildDailySteps = buildDailySteps;\nexports.lbsAndOzToK = lbsAndOzToK;\nexports.isNil = isNil;\nexports.prepareInput = prepareInput;\nexports.prepareResponse = prepareResponse;\nexports.prepareDailyResponse = prepareDailyResponse;\nexports.prepareHydrationResponse = prepareHydrationResponse;\nexports.getWeekBoundary = getWeekBoundary;\nexports.prepareDeleteOptions = prepareDeleteOptions;\nexports.KgToLbs = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction buildDailySteps(steps) {\n  var results = {};\n\n  for (var _iterator = _createForOfIteratorHelperLoose(steps), _step; !(_step = _iterator()).done;) {\n    var step = _step.value;\n\n    if (step == undefined) {\n      continue;\n    }\n\n    var dateFormatted = getFormattedDate(new Date(step.endDate));\n\n    if (!(dateFormatted in results)) {\n      results[dateFormatted] = 0;\n    }\n\n    results[dateFormatted] += step.steps;\n  }\n\n  var dateMap = [];\n\n  for (var index in results) {\n    dateMap.push({\n      date: index,\n      value: results[index]\n    });\n  }\n\n  return dateMap;\n}\n\nfunction lbsAndOzToK(imperial) {\n  var pounds = imperial.pounds + imperial.ounces / 16;\n  return pounds * 0.45359237;\n}\n\nvar KgToLbs = function KgToLbs(metric) {\n  return metric * 2.2046;\n};\n\nexports.KgToLbs = KgToLbs;\n\nfunction isNil(value) {\n  return value == null;\n}\n\nfunction prepareInput(options) {\n  var startDate = !isNil(options.startDate) ? Date.parse(options.startDate) : new Date().setHours(0, 0, 0, 0);\n  var endDate = !isNil(options.endDate) ? Date.parse(options.endDate) : new Date().valueOf();\n  var bucketInterval = options.bucketInterval || 1;\n  var bucketUnit = options.bucketUnit || \"DAY\";\n  return {\n    startDate: startDate,\n    endDate: endDate,\n    bucketInterval: bucketInterval,\n    bucketUnit: bucketUnit\n  };\n}\n\nfunction prepareResponse(response) {\n  var byKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';\n  return response.map(function (el) {\n    if (!isNil(el[byKey])) {\n      el.startDate = (0, _moment.default)(el.startDate).toISOString();\n      el.endDate = (0, _moment.default)(el.endDate).toISOString();\n      return el;\n    }\n  }).filter(function (day) {\n    return !isNil(day);\n  });\n}\n\nfunction prepareDailyResponse(response) {\n  return response.map(function (el) {\n    el.date = getFormattedDate(new Date(el.date));\n    return el;\n  });\n}\n\nfunction prepareHydrationResponse(response) {\n  return response.map(function (el) {\n    el.date = new Date(el.date).toISOString();\n    el.waterConsumed = Number(el.waterConsumed).toFixed(3);\n    return el;\n  });\n}\n\nfunction getFormattedDate(date) {\n  var day = ('0' + date.getDate()).slice(-2);\n  var month = ('0' + (date.getMonth() + 1)).slice(-2);\n  var year = date.getFullYear();\n  return year + '-' + month + '-' + day;\n}\n\nfunction getWeekBoundary(date, adjustment) {\n  var startDate = (0, _moment.default)(date).startOf('week').add(adjustment, 'days');\n  var endDate = (0, _moment.default)(date).endOf('week').add(adjustment, 'days');\n  return [startDate, endDate];\n}\n\nfunction prepareDeleteOptions(options) {\n  return _objectSpread(_objectSpread({}, options), {}, {\n    startDate: typeof options.startDate !== 'number' ? Date.parse(options.startDate) : options.startDate,\n    endDate: typeof options.endDate !== 'number' ? Date.parse(options.endDate) : options.endDate\n  });\n}","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-google-fit/src/utils.js"],"names":["buildDailySteps","steps","results","step","undefined","dateFormatted","getFormattedDate","Date","endDate","dateMap","index","push","date","value","lbsAndOzToK","imperial","pounds","ounces","KgToLbs","metric","isNil","prepareInput","options","startDate","parse","setHours","valueOf","bucketInterval","bucketUnit","prepareResponse","response","byKey","map","el","toISOString","filter","day","prepareDailyResponse","prepareHydrationResponse","waterConsumed","Number","toFixed","getDate","slice","month","getMonth","year","getFullYear","getWeekBoundary","adjustment","startOf","add","endOf","prepareDeleteOptions"],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nexport function buildDailySteps(steps) {\n  const results = {}\n  for (const step of steps) {\n    if (step == undefined) {\n      continue\n    }\n\n    const dateFormatted = getFormattedDate(new Date(step.endDate))\n\n    if (!(dateFormatted in results)) {\n      results[dateFormatted] = 0\n    }\n\n    results[dateFormatted] += step.steps\n  }\n\n  const dateMap = []\n  for (const index in results) {\n    dateMap.push({ date: index, value: results[index] })\n  }\n  return dateMap\n}\n\nexport function lbsAndOzToK(imperial) {\n  const pounds = imperial.pounds + imperial.ounces / 16\n  return pounds * 0.45359237\n}\n\nexport const KgToLbs = metric => metric * 2.2046\n\nexport function isNil(value) {\n  return value == null\n}\n\n// parse the default config based on user input\nexport function prepareInput(options) {\n  const startDate = !isNil(options.startDate)\n  ? Date.parse(options.startDate)\n  : new Date().setHours(0, 0, 0, 0)\n  const endDate = !isNil(options.endDate)\n    ? Date.parse(options.endDate)\n    : new Date().valueOf();\n  const bucketInterval = options.bucketInterval || 1;\n  const bucketUnit = options.bucketUnit || \"DAY\";\n\n  return { startDate, endDate, bucketInterval, bucketUnit };\n}\n\nexport function prepareResponse(response, byKey = 'value') {\n  return response\n    .map(el => {\n      if (!isNil(el[byKey])) {\n        // Android is returning a date format from Fit that new Date() can't parse, e.g.: 2020-05-21T06:06:05.871-0400\n        // Note the time offset at the end rather is non-standard compared to ISO which new Date expects. This works in\n        // the Chrome V8 debugger, but not on device. Using momentJS here to get around this issue.\n        // el.startDate = new Date(el.startDate).toISOString()\n        // el.endDate = new Date(el.endDate).toISOString()\n        el.startDate = moment(el.startDate).toISOString()\n        el.endDate = moment(el.endDate).toISOString()\n        return el\n      }\n    })\n    .filter(day => !isNil(day))\n}\n\nexport function prepareDailyResponse(response) {\n  return response.map(el => {\n    el.date = getFormattedDate(new Date(el.date))\n    return el\n  })\n}\n\nexport function prepareHydrationResponse(response) {\n  return response.map(el => {\n    el.date = new Date(el.date).toISOString()\n    el.waterConsumed = Number(el.waterConsumed).toFixed(3)\n    return el\n  })\n}\n\nfunction getFormattedDate(date) {\n  const day = ('0' + date.getDate()).slice(-2)\n  const month = ('0' + (date.getMonth() + 1)).slice(-2)\n  const year = date.getFullYear()\n  return year + '-' + month + '-' + day\n}\n\n/***\n* avoid month boundary issue by using millisecond calculation\n* TimeZone Issue\n* moment.js can be used as better alternative\n*/\n\n// export function getWeekBoundary(date, adjustment) {\n//   const dayMilliseconds = 24 * 60 * 60 * 1000;\n//   const currentWeekDay = date.getDay() - adjustment % 7;\n//   const startDate = new Date(date.setHours(0,0,0,0) - dayMilliseconds * currentWeekDay);\n//   const endDate = new Date(startDate.getTime() + dayMilliseconds * 7 -1);\n//   return [startDate, endDate];\n// }\n\nexport function getWeekBoundary(date, adjustment) {\n  const startDate = moment(date).startOf('week').add(adjustment, 'days');\n  const endDate = moment(date).endOf('week').add(adjustment, 'days');\n  return [startDate, endDate];\n}\n\nexport function prepareDeleteOptions(options) {\n  return {\n    ...options,\n    startDate: typeof options.startDate !== 'number' ? Date.parse(options.startDate) : options.startDate,\n    endDate: typeof options.endDate !== 'number' ? Date.parse(options.endDate) : options.endDate,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}