{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BleManager = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _Device = require(\"./Device\");\n\nvar _Service = require(\"./Service\");\n\nvar _Characteristic = require(\"./Characteristic\");\n\nvar _Descriptor = require(\"./Descriptor\");\n\nvar _TypeDefinition = require(\"./TypeDefinition\");\n\nvar _BleModule = require(\"./BleModule\");\n\nvar _BleError = require(\"./BleError\");\n\nvar BleManager = function () {\n  function BleManager() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, _classCallCheck2.default)(this, BleManager);\n    this._eventEmitter = new _BleModule.EventEmitter(_BleModule.BleModule);\n    this._uniqueId = 0;\n    this._activePromises = {};\n    this._activeSubscriptions = {};\n    var restoreStateFunction = options.restoreStateFunction;\n\n    if (restoreStateFunction != null && options.restoreStateIdentifier != null) {\n      this._activeSubscriptions[this._nextUniqueID()] = this._eventEmitter.addListener(_BleModule.BleModule.RestoreStateEvent, function (nativeRestoredState) {\n        if (nativeRestoredState == null) {\n          restoreStateFunction(null);\n          return;\n        }\n\n        restoreStateFunction({\n          connectedPeripherals: nativeRestoredState.connectedPeripherals.map(function (nativeDevice) {\n            return new _Device.Device(nativeDevice, _this);\n          })\n        });\n      });\n    }\n\n    this._errorCodesToMessagesMapping = options.errorCodesToMessagesMapping ? options.errorCodesToMessagesMapping : _BleError.BleErrorCodeMessage;\n\n    _BleModule.BleModule.createClient(options.restoreStateIdentifier || null);\n  }\n\n  (0, _createClass2.default)(BleManager, [{\n    key: \"_destroyPromises\",\n    value: function _destroyPromises() {\n      var destroyedError = new _BleError.BleError({\n        errorCode: _BleError.BleErrorCode.BluetoothManagerDestroyed,\n        attErrorCode: null,\n        iosErrorCode: null,\n        androidErrorCode: null,\n        reason: null\n      }, this._errorCodesToMessagesMapping);\n\n      for (var _id in this._activePromises) {\n        this._activePromises[_id](destroyedError);\n      }\n    }\n  }, {\n    key: \"_destroySubscriptions\",\n    value: function _destroySubscriptions() {\n      for (var _id2 in this._activeSubscriptions) {\n        this._activeSubscriptions[_id2].remove();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _BleModule.BleModule.destroyClient();\n\n      if (this._scanEventSubscription != null) {\n        this._scanEventSubscription.remove();\n\n        this._scanEventSubscription = null;\n      }\n\n      this._destroySubscriptions();\n\n      this._destroyPromises();\n    }\n  }, {\n    key: \"_nextUniqueID\",\n    value: function _nextUniqueID() {\n      this._uniqueId += 1;\n      return this._uniqueId.toString();\n    }\n  }, {\n    key: \"_callPromise\",\n    value: function _callPromise(promise) {\n      var _this2 = this;\n\n      var id, destroyPromise, value;\n      return _regenerator.default.async(function _callPromise$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              id = this._nextUniqueID();\n              _context.prev = 1;\n              destroyPromise = new Promise(function (resolve, reject) {\n                _this2._activePromises[id] = reject;\n              });\n              _context.next = 5;\n              return _regenerator.default.awrap(Promise.race([destroyPromise, promise]));\n\n            case 5:\n              value = _context.sent;\n              delete this._activePromises[id];\n              return _context.abrupt(\"return\", value);\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              delete this._activePromises[id];\n              throw (0, _BleError.parseBleError)(_context.t0.message, this._errorCodesToMessagesMapping);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 10]], Promise);\n    }\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      _BleModule.BleModule.setLogLevel(logLevel);\n    }\n  }, {\n    key: \"logLevel\",\n    value: function logLevel() {\n      return this._callPromise(_BleModule.BleModule.logLevel());\n    }\n  }, {\n    key: \"cancelTransaction\",\n    value: function cancelTransaction(transactionId) {\n      _BleModule.BleModule.cancelTransaction(transactionId);\n    }\n  }, {\n    key: \"enable\",\n    value: function enable(transactionId) {\n      return _regenerator.default.async(function enable$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context2.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.enable(transactionId)));\n\n            case 3:\n              return _context2.abrupt(\"return\", this);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"disable\",\n    value: function disable(transactionId) {\n      return _regenerator.default.async(function disable$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context3.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.disable(transactionId)));\n\n            case 3:\n              return _context3.abrupt(\"return\", this);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"state\",\n    value: function state() {\n      return this._callPromise(_BleModule.BleModule.state());\n    }\n  }, {\n    key: \"onStateChange\",\n    value: function onStateChange(listener) {\n      var _this3 = this;\n\n      var emitCurrentState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var subscription = this._eventEmitter.addListener(_BleModule.BleModule.StateChangeEvent, listener);\n\n      var id = this._nextUniqueID();\n\n      var wrappedSubscription;\n\n      if (emitCurrentState) {\n        var cancelled = false;\n\n        this._callPromise(this.state()).then(function (currentState) {\n          if (!cancelled) {\n            listener(currentState);\n          }\n        });\n\n        wrappedSubscription = {\n          remove: function remove() {\n            if (_this3._activeSubscriptions[id] != null) {\n              cancelled = true;\n              delete _this3._activeSubscriptions[id];\n              subscription.remove();\n            }\n          }\n        };\n      } else {\n        wrappedSubscription = {\n          remove: function remove() {\n            if (_this3._activeSubscriptions[id] != null) {\n              delete _this3._activeSubscriptions[id];\n              subscription.remove();\n            }\n          }\n        };\n      }\n\n      this._activeSubscriptions[id] = wrappedSubscription;\n      return wrappedSubscription;\n    }\n  }, {\n    key: \"startDeviceScan\",\n    value: function startDeviceScan(UUIDs, options, listener) {\n      var _this4 = this;\n\n      this.stopDeviceScan();\n\n      var scanListener = function scanListener(_ref) {\n        var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n            error = _ref2[0],\n            nativeDevice = _ref2[1];\n\n        listener(error ? (0, _BleError.parseBleError)(error, _this4._errorCodesToMessagesMapping) : null, nativeDevice ? new _Device.Device(nativeDevice, _this4) : null);\n      };\n\n      this._scanEventSubscription = this._eventEmitter.addListener(_BleModule.BleModule.ScanEvent, scanListener);\n\n      _BleModule.BleModule.startDeviceScan(UUIDs, options);\n    }\n  }, {\n    key: \"stopDeviceScan\",\n    value: function stopDeviceScan() {\n      if (this._scanEventSubscription != null) {\n        this._scanEventSubscription.remove();\n\n        this._scanEventSubscription = null;\n      }\n\n      _BleModule.BleModule.stopDeviceScan();\n    }\n  }, {\n    key: \"requestConnectionPriorityForDevice\",\n    value: function requestConnectionPriorityForDevice(deviceIdentifier, connectionPriority, transactionId) {\n      var nativeDevice;\n      return _regenerator.default.async(function requestConnectionPriorityForDevice$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context4.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.requestConnectionPriorityForDevice(deviceIdentifier, connectionPriority, transactionId)));\n\n            case 3:\n              nativeDevice = _context4.sent;\n              return _context4.abrupt(\"return\", new _Device.Device(nativeDevice, this));\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"readRSSIForDevice\",\n    value: function readRSSIForDevice(deviceIdentifier, transactionId) {\n      var nativeDevice;\n      return _regenerator.default.async(function readRSSIForDevice$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context5.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.readRSSIForDevice(deviceIdentifier, transactionId)));\n\n            case 3:\n              nativeDevice = _context5.sent;\n              return _context5.abrupt(\"return\", new _Device.Device(nativeDevice, this));\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"requestMTUForDevice\",\n    value: function requestMTUForDevice(deviceIdentifier, mtu, transactionId) {\n      var nativeDevice;\n      return _regenerator.default.async(function requestMTUForDevice$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context6.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.requestMTUForDevice(deviceIdentifier, mtu, transactionId)));\n\n            case 3:\n              nativeDevice = _context6.sent;\n              return _context6.abrupt(\"return\", new _Device.Device(nativeDevice, this));\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"devices\",\n    value: function devices(deviceIdentifiers) {\n      var _this5 = this;\n\n      var nativeDevices;\n      return _regenerator.default.async(function devices$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.devices(deviceIdentifiers)));\n\n            case 2:\n              nativeDevices = _context7.sent;\n              return _context7.abrupt(\"return\", nativeDevices.map(function (nativeDevice) {\n                return new _Device.Device(nativeDevice, _this5);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"connectedDevices\",\n    value: function connectedDevices(serviceUUIDs) {\n      var _this6 = this;\n\n      var nativeDevices;\n      return _regenerator.default.async(function connectedDevices$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.connectedDevices(serviceUUIDs)));\n\n            case 2:\n              nativeDevices = _context8.sent;\n              return _context8.abrupt(\"return\", nativeDevices.map(function (nativeDevice) {\n                return new _Device.Device(nativeDevice, _this6);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"connectToDevice\",\n    value: function connectToDevice(deviceIdentifier, options) {\n      var nativeDevice;\n      return _regenerator.default.async(function connectToDevice$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.connectToDevice(deviceIdentifier, options)));\n\n            case 2:\n              nativeDevice = _context9.sent;\n              return _context9.abrupt(\"return\", new _Device.Device(nativeDevice, this));\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"cancelDeviceConnection\",\n    value: function cancelDeviceConnection(deviceIdentifier) {\n      var nativeDevice;\n      return _regenerator.default.async(function cancelDeviceConnection$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.cancelDeviceConnection(deviceIdentifier)));\n\n            case 2:\n              nativeDevice = _context10.sent;\n              return _context10.abrupt(\"return\", new _Device.Device(nativeDevice, this));\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onDeviceDisconnected\",\n    value: function onDeviceDisconnected(deviceIdentifier, listener) {\n      var _this7 = this;\n\n      var disconnectionListener = function disconnectionListener(_ref3) {\n        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n            error = _ref4[0],\n            nativeDevice = _ref4[1];\n\n        if (deviceIdentifier !== nativeDevice.id) return;\n        listener(error ? (0, _BleError.parseBleError)(error, _this7._errorCodesToMessagesMapping) : null, new _Device.Device(nativeDevice, _this7));\n      };\n\n      var subscription = this._eventEmitter.addListener(_BleModule.BleModule.DisconnectionEvent, disconnectionListener);\n\n      var id = this._nextUniqueID();\n\n      var wrappedSubscription = {\n        remove: function remove() {\n          if (_this7._activeSubscriptions[id] != null) {\n            delete _this7._activeSubscriptions[id];\n            subscription.remove();\n          }\n        }\n      };\n      this._activeSubscriptions[id] = wrappedSubscription;\n      return wrappedSubscription;\n    }\n  }, {\n    key: \"isDeviceConnected\",\n    value: function isDeviceConnected(deviceIdentifier) {\n      return this._callPromise(_BleModule.BleModule.isDeviceConnected(deviceIdentifier));\n    }\n  }, {\n    key: \"discoverAllServicesAndCharacteristicsForDevice\",\n    value: function discoverAllServicesAndCharacteristicsForDevice(deviceIdentifier, transactionId) {\n      var nativeDevice;\n      return _regenerator.default.async(function discoverAllServicesAndCharacteristicsForDevice$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context11.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.discoverAllServicesAndCharacteristicsForDevice(deviceIdentifier, transactionId)));\n\n            case 3:\n              nativeDevice = _context11.sent;\n              return _context11.abrupt(\"return\", new _Device.Device(nativeDevice, this));\n\n            case 5:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"servicesForDevice\",\n    value: function servicesForDevice(deviceIdentifier) {\n      var _this8 = this;\n\n      var services;\n      return _regenerator.default.async(function servicesForDevice$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.servicesForDevice(deviceIdentifier)));\n\n            case 2:\n              services = _context12.sent;\n              return _context12.abrupt(\"return\", services.map(function (nativeService) {\n                return new _Service.Service(nativeService, _this8);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"characteristicsForDevice\",\n    value: function characteristicsForDevice(deviceIdentifier, serviceUUID) {\n      return this._handleCharacteristics(_BleModule.BleModule.characteristicsForDevice(deviceIdentifier, serviceUUID));\n    }\n  }, {\n    key: \"_characteristicsForService\",\n    value: function _characteristicsForService(serviceIdentifier) {\n      return this._handleCharacteristics(_BleModule.BleModule.characteristicsForService(serviceIdentifier));\n    }\n  }, {\n    key: \"_handleCharacteristics\",\n    value: function _handleCharacteristics(characteristicsPromise) {\n      var _this9 = this;\n\n      var characteristics;\n      return _regenerator.default.async(function _handleCharacteristics$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return _regenerator.default.awrap(this._callPromise(characteristicsPromise));\n\n            case 2:\n              characteristics = _context13.sent;\n              return _context13.abrupt(\"return\", characteristics.map(function (nativeCharacteristic) {\n                return new _Characteristic.Characteristic(nativeCharacteristic, _this9);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"descriptorsForDevice\",\n    value: function descriptorsForDevice(deviceIdentifier, serviceUUID, characteristicUUID) {\n      return this._handleDescriptors(_BleModule.BleModule.descriptorsForDevice(deviceIdentifier, serviceUUID, characteristicUUID));\n    }\n  }, {\n    key: \"_descriptorsForService\",\n    value: function _descriptorsForService(serviceIdentifier, characteristicUUID) {\n      return this._handleDescriptors(_BleModule.BleModule.descriptorsForService(serviceIdentifier, characteristicUUID));\n    }\n  }, {\n    key: \"_descriptorsForCharacteristic\",\n    value: function _descriptorsForCharacteristic(characteristicIdentifier) {\n      return this._handleDescriptors(_BleModule.BleModule.descriptorsForCharacteristic(characteristicIdentifier));\n    }\n  }, {\n    key: \"_handleDescriptors\",\n    value: function _handleDescriptors(descriptorsPromise) {\n      var _this10 = this;\n\n      var descriptors;\n      return _regenerator.default.async(function _handleDescriptors$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return _regenerator.default.awrap(this._callPromise(descriptorsPromise));\n\n            case 2:\n              descriptors = _context14.sent;\n              return _context14.abrupt(\"return\", descriptors.map(function (nativeDescriptor) {\n                return new _Descriptor.Descriptor(nativeDescriptor, _this10);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"readCharacteristicForDevice\",\n    value: function readCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, transactionId) {\n      var nativeCharacteristic;\n      return _regenerator.default.async(function readCharacteristicForDevice$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context15.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.readCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context15.sent;\n              return _context15.abrupt(\"return\", new _Characteristic.Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_readCharacteristicForService\",\n    value: function _readCharacteristicForService(serviceIdentifier, characteristicUUID, transactionId) {\n      var nativeCharacteristic;\n      return _regenerator.default.async(function _readCharacteristicForService$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context16.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.readCharacteristicForService(serviceIdentifier, characteristicUUID, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context16.sent;\n              return _context16.abrupt(\"return\", new _Characteristic.Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_readCharacteristic\",\n    value: function _readCharacteristic(characteristicIdentifier, transactionId) {\n      var nativeCharacteristic;\n      return _regenerator.default.async(function _readCharacteristic$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context17.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.readCharacteristic(characteristicIdentifier, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context17.sent;\n              return _context17.abrupt(\"return\", new _Characteristic.Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"writeCharacteristicWithResponseForDevice\",\n    value: function writeCharacteristicWithResponseForDevice(deviceIdentifier, serviceUUID, characteristicUUID, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regenerator.default.async(function writeCharacteristicWithResponseForDevice$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context18.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.writeCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, base64Value, true, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context18.sent;\n              return _context18.abrupt(\"return\", new _Characteristic.Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeCharacteristicWithResponseForService\",\n    value: function _writeCharacteristicWithResponseForService(serviceIdentifier, characteristicUUID, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regenerator.default.async(function _writeCharacteristicWithResponseForService$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context19.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, true, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context19.sent;\n              return _context19.abrupt(\"return\", new _Characteristic.Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeCharacteristicWithResponse\",\n    value: function _writeCharacteristicWithResponse(characteristicIdentifier, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regenerator.default.async(function _writeCharacteristicWithResponse$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context20.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.writeCharacteristic(characteristicIdentifier, base64Value, true, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context20.sent;\n              return _context20.abrupt(\"return\", new _Characteristic.Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"writeCharacteristicWithoutResponseForDevice\",\n    value: function writeCharacteristicWithoutResponseForDevice(deviceIdentifier, serviceUUID, characteristicUUID, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regenerator.default.async(function writeCharacteristicWithoutResponseForDevice$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context21.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.writeCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, base64Value, false, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context21.sent;\n              return _context21.abrupt(\"return\", new _Characteristic.Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeCharacteristicWithoutResponseForService\",\n    value: function _writeCharacteristicWithoutResponseForService(serviceIdentifier, characteristicUUID, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regenerator.default.async(function _writeCharacteristicWithoutResponseForService$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context22.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, false, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context22.sent;\n              return _context22.abrupt(\"return\", new _Characteristic.Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeCharacteristicWithoutResponse\",\n    value: function _writeCharacteristicWithoutResponse(characteristicIdentifier, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regenerator.default.async(function _writeCharacteristicWithoutResponse$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context23.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.writeCharacteristic(characteristicIdentifier, base64Value, false, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context23.sent;\n              return _context23.abrupt(\"return\", new _Characteristic.Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"monitorCharacteristicForDevice\",\n    value: function monitorCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, listener, transactionId) {\n      var filledTransactionId = transactionId || this._nextUniqueID();\n\n      return this._handleMonitorCharacteristic(_BleModule.BleModule.monitorCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, filledTransactionId), filledTransactionId, listener);\n    }\n  }, {\n    key: \"_monitorCharacteristicForService\",\n    value: function _monitorCharacteristicForService(serviceIdentifier, characteristicUUID, listener, transactionId) {\n      var filledTransactionId = transactionId || this._nextUniqueID();\n\n      return this._handleMonitorCharacteristic(_BleModule.BleModule.monitorCharacteristicForService(serviceIdentifier, characteristicUUID, filledTransactionId), filledTransactionId, listener);\n    }\n  }, {\n    key: \"_monitorCharacteristic\",\n    value: function _monitorCharacteristic(characteristicIdentifier, listener, transactionId) {\n      var filledTransactionId = transactionId || this._nextUniqueID();\n\n      return this._handleMonitorCharacteristic(_BleModule.BleModule.monitorCharacteristic(characteristicIdentifier, filledTransactionId), filledTransactionId, listener);\n    }\n  }, {\n    key: \"_handleMonitorCharacteristic\",\n    value: function _handleMonitorCharacteristic(monitorPromise, transactionId, listener) {\n      var _this11 = this;\n\n      var monitorListener = function monitorListener(_ref5) {\n        var _ref6 = (0, _slicedToArray2.default)(_ref5, 3),\n            error = _ref6[0],\n            characteristic = _ref6[1],\n            msgTransactionId = _ref6[2];\n\n        if (transactionId !== msgTransactionId) return;\n\n        if (error) {\n          listener((0, _BleError.parseBleError)(error, _this11._errorCodesToMessagesMapping), null);\n          return;\n        }\n\n        listener(null, new _Characteristic.Characteristic(characteristic, _this11));\n      };\n\n      var subscription = this._eventEmitter.addListener(_BleModule.BleModule.ReadEvent, monitorListener);\n\n      var id = this._nextUniqueID();\n\n      var wrappedSubscription = {\n        remove: function remove() {\n          if (_this11._activeSubscriptions[id] != null) {\n            delete _this11._activeSubscriptions[id];\n            subscription.remove();\n          }\n        }\n      };\n      this._activeSubscriptions[id] = wrappedSubscription;\n\n      this._callPromise(monitorPromise).then(function () {\n        wrappedSubscription.remove();\n      }, function (error) {\n        listener(error, null);\n        wrappedSubscription.remove();\n      });\n\n      return {\n        remove: function remove() {\n          _BleModule.BleModule.cancelTransaction(transactionId);\n        }\n      };\n    }\n  }, {\n    key: \"readDescriptorForDevice\",\n    value: function readDescriptorForDevice(deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, transactionId) {\n      var nativeDescriptor;\n      return _regenerator.default.async(function readDescriptorForDevice$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context24.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.readDescriptorForDevice(deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context24.sent;\n              return _context24.abrupt(\"return\", new _Descriptor.Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_readDescriptorForService\",\n    value: function _readDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, transactionId) {\n      var nativeDescriptor;\n      return _regenerator.default.async(function _readDescriptorForService$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context25.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.readDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context25.sent;\n              return _context25.abrupt(\"return\", new _Descriptor.Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_readDescriptorForCharacteristic\",\n    value: function _readDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, transactionId) {\n      var nativeDescriptor;\n      return _regenerator.default.async(function _readDescriptorForCharacteristic$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context26.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.readDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context26.sent;\n              return _context26.abrupt(\"return\", new _Descriptor.Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_readDescriptor\",\n    value: function _readDescriptor(descriptorIdentifier, transactionId) {\n      var nativeDescriptor;\n      return _regenerator.default.async(function _readDescriptor$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context27.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.readDescriptor(descriptorIdentifier, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context27.sent;\n              return _context27.abrupt(\"return\", new _Descriptor.Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"writeDescriptorForDevice\",\n    value: function writeDescriptorForDevice(deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, valueBase64, transactionId) {\n      var nativeDescriptor;\n      return _regenerator.default.async(function writeDescriptorForDevice$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context28.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.writeDescriptorForDevice(deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, valueBase64, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context28.sent;\n              return _context28.abrupt(\"return\", new _Descriptor.Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeDescriptorForService\",\n    value: function _writeDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, valueBase64, transactionId) {\n      var nativeDescriptor;\n      return _regenerator.default.async(function _writeDescriptorForService$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context29.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.writeDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, valueBase64, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context29.sent;\n              return _context29.abrupt(\"return\", new _Descriptor.Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeDescriptorForCharacteristic\",\n    value: function _writeDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, valueBase64, transactionId) {\n      var nativeDescriptor;\n      return _regenerator.default.async(function _writeDescriptorForCharacteristic$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context30.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.writeDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, valueBase64, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context30.sent;\n              return _context30.abrupt(\"return\", new _Descriptor.Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeDescriptor\",\n    value: function _writeDescriptor(descriptorIdentifier, valueBase64, transactionId) {\n      var nativeDescriptor;\n      return _regenerator.default.async(function _writeDescriptor$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context31.next = 3;\n              return _regenerator.default.awrap(this._callPromise(_BleModule.BleModule.writeDescriptor(descriptorIdentifier, valueBase64, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context31.sent;\n              return _context31.abrupt(\"return\", new _Descriptor.Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return BleManager;\n}();\n\nexports.BleManager = BleManager;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-ble-plx/src/BleManager.js"],"names":["BleManager","options","_eventEmitter","EventEmitter","BleModule","_uniqueId","_activePromises","_activeSubscriptions","restoreStateFunction","restoreStateIdentifier","_nextUniqueID","addListener","RestoreStateEvent","nativeRestoredState","connectedPeripherals","map","nativeDevice","Device","_errorCodesToMessagesMapping","errorCodesToMessagesMapping","BleErrorCodeMessage","createClient","destroyedError","BleError","errorCode","BleErrorCode","BluetoothManagerDestroyed","attErrorCode","iosErrorCode","androidErrorCode","reason","id","remove","destroyClient","_scanEventSubscription","_destroySubscriptions","_destroyPromises","toString","promise","destroyPromise","Promise","resolve","reject","race","value","message","logLevel","setLogLevel","_callPromise","transactionId","cancelTransaction","enable","disable","state","listener","emitCurrentState","subscription","StateChangeEvent","wrappedSubscription","cancelled","then","currentState","UUIDs","stopDeviceScan","scanListener","error","ScanEvent","startDeviceScan","deviceIdentifier","connectionPriority","requestConnectionPriorityForDevice","readRSSIForDevice","mtu","requestMTUForDevice","deviceIdentifiers","devices","nativeDevices","serviceUUIDs","connectedDevices","connectToDevice","cancelDeviceConnection","disconnectionListener","DisconnectionEvent","isDeviceConnected","discoverAllServicesAndCharacteristicsForDevice","servicesForDevice","services","nativeService","Service","serviceUUID","_handleCharacteristics","characteristicsForDevice","serviceIdentifier","characteristicsForService","characteristicsPromise","characteristics","nativeCharacteristic","Characteristic","characteristicUUID","_handleDescriptors","descriptorsForDevice","descriptorsForService","characteristicIdentifier","descriptorsForCharacteristic","descriptorsPromise","descriptors","nativeDescriptor","Descriptor","readCharacteristicForDevice","readCharacteristicForService","readCharacteristic","base64Value","writeCharacteristicForDevice","writeCharacteristicForService","writeCharacteristic","filledTransactionId","_handleMonitorCharacteristic","monitorCharacteristicForDevice","monitorCharacteristicForService","monitorCharacteristic","monitorPromise","monitorListener","characteristic","msgTransactionId","ReadEvent","descriptorUUID","readDescriptorForDevice","readDescriptorForService","readDescriptorForCharacteristic","descriptorIdentifier","readDescriptor","valueBase64","writeDescriptorForDevice","writeDescriptorForService","writeDescriptorForCharacteristic","writeDescriptor"],"mappings":"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","sourcesContent":["// @flow\n'use strict'\n\nimport { Device } from './Device'\nimport { Service } from './Service'\nimport { Characteristic } from './Characteristic'\nimport { Descriptor } from './Descriptor'\nimport { State, LogLevel, type BleErrorCodeMessageMapping, ConnectionPriority } from './TypeDefinition'\nimport { BleModule, EventEmitter } from './BleModule'\nimport {\n  parseBleError,\n  BleError,\n  BleErrorCode,\n  BleErrorCodeMessage,\n  BleATTErrorCode,\n  BleAndroidErrorCode,\n  BleIOSErrorCode\n} from './BleError'\nimport type { NativeDevice, NativeCharacteristic, NativeDescriptor, NativeBleRestoredState } from './BleModule'\nimport type {\n  Subscription,\n  DeviceId,\n  Identifier,\n  UUID,\n  TransactionId,\n  Base64,\n  ScanOptions,\n  ConnectionOptions,\n  BleManagerOptions\n} from './TypeDefinition'\n\n/**\n *\n * BleManager is an entry point for react-native-ble-plx library. It provides all means to discover and work with\n * {@link Device} instances. It should be initialized only once with `new` keyword and method\n * {@link #blemanagerdestroy|destroy()} should be called on its instance when user wants to deallocate all resources.\n *\n * In case you want to properly support Background Mode, you should provide `restoreStateIdentifier` and\n * `restoreStateFunction` in {@link BleManagerOptions}.\n *\n * @example\n * const manager = new BleManager();\n * // ... work with BLE manager ...\n * manager.destroy();\n */\nexport class BleManager {\n  // Scan subscriptions\n  _scanEventSubscription: ?EventEmitter\n  // Listening to BleModule events\n  _eventEmitter: EventEmitter\n  // Unique identifier used to create internal transactionIds\n  _uniqueId: number\n  // Map of active promises with functions to forcibly cancel them\n  _activePromises: { [id: string]: (error: BleError) => void }\n  // Map of active subscriptions\n  _activeSubscriptions: { [id: string]: Subscription }\n\n  // Map of error codes to error messages\n  _errorCodesToMessagesMapping: BleErrorCodeMessageMapping\n\n  /**\n   * Creates an instance of {@link BleManager}.\n   */\n  constructor(options: BleManagerOptions = {}) {\n    this._eventEmitter = new EventEmitter(BleModule)\n    this._uniqueId = 0\n    this._activePromises = {}\n    this._activeSubscriptions = {}\n\n    const restoreStateFunction = options.restoreStateFunction\n    if (restoreStateFunction != null && options.restoreStateIdentifier != null) {\n      this._activeSubscriptions[this._nextUniqueID()] = this._eventEmitter.addListener(\n        BleModule.RestoreStateEvent,\n        (nativeRestoredState: NativeBleRestoredState) => {\n          if (nativeRestoredState == null) {\n            restoreStateFunction(null)\n            return\n          }\n          restoreStateFunction({\n            connectedPeripherals: nativeRestoredState.connectedPeripherals.map(\n              nativeDevice => new Device(nativeDevice, this)\n            )\n          })\n        }\n      )\n    }\n\n    this._errorCodesToMessagesMapping = options.errorCodesToMessagesMapping\n      ? options.errorCodesToMessagesMapping\n      : BleErrorCodeMessage\n\n    BleModule.createClient(options.restoreStateIdentifier || null)\n  }\n\n  /**\n   * Destroys all promises which are in progress.\n   * @private\n   */\n  _destroyPromises() {\n    const destroyedError = new BleError(\n      {\n        errorCode: BleErrorCode.BluetoothManagerDestroyed,\n        attErrorCode: (null: ?$Values<typeof BleATTErrorCode>),\n        iosErrorCode: (null: ?$Values<typeof BleIOSErrorCode>),\n        androidErrorCode: (null: ?$Values<typeof BleAndroidErrorCode>),\n        reason: (null: ?string)\n      },\n      this._errorCodesToMessagesMapping\n    )\n    for (const id in this._activePromises) {\n      this._activePromises[id](destroyedError)\n    }\n  }\n\n  /**\n   * Destroys all subscriptions.\n   * @private\n   */\n  _destroySubscriptions() {\n    for (const id in this._activeSubscriptions) {\n      this._activeSubscriptions[id].remove()\n    }\n  }\n\n  /**\n   * Destroys {@link BleManager} instance. A new instance needs to be created to continue working with\n   * this library. All operations which were in progress completes with\n   * {@link #bleerrorcodebluetoothmanagerdestroyed|BluetoothManagerDestroyed} error code.\n   */\n  destroy() {\n    // Destroy native module object\n    BleModule.destroyClient()\n\n    // Unsubscribe from any subscriptions\n    if (this._scanEventSubscription != null) {\n      this._scanEventSubscription.remove()\n      this._scanEventSubscription = null\n    }\n    this._destroySubscriptions()\n\n    // Destroy all promises\n    this._destroyPromises()\n  }\n\n  /**\n   * Generates new unique identifier to be used internally.\n   *\n   * @returns {string} New identifier.\n   * @private\n   */\n  _nextUniqueID(): string {\n    this._uniqueId += 1\n    return this._uniqueId.toString()\n  }\n\n  /**\n   * Calls promise and checks if it completed successfully\n   *\n   * @param {Promise<T>} promise Promise to be called\n   * @returns {Promise<T>} Value of called promise.\n   * @private\n   */\n  async _callPromise<T>(promise: Promise<T>): Promise<T> {\n    const id = this._nextUniqueID()\n    try {\n      const destroyPromise = new Promise((resolve, reject) => {\n        this._activePromises[id] = reject\n      })\n      const value = await Promise.race([destroyPromise, promise])\n      delete this._activePromises[id]\n      return value\n    } catch (error) {\n      delete this._activePromises[id]\n      throw parseBleError(error.message, this._errorCodesToMessagesMapping)\n    }\n  }\n\n  // Mark: Common ------------------------------------------------------------------------------------------------------\n\n  /**\n   * Sets new log level for native module's logging mechanism.\n   * @param {LogLevel} logLevel New log level to be set.\n   */\n  setLogLevel(logLevel: $Keys<typeof LogLevel>) {\n    BleModule.setLogLevel(logLevel)\n  }\n\n  /**\n   * Get current log level for native module's logging mechanism.\n   * @returns {Promise<LogLevel>} Current log level.\n   */\n  logLevel(): Promise<$Keys<typeof LogLevel>> {\n    return this._callPromise(BleModule.logLevel())\n  }\n\n  /**\n   * Cancels pending transaction.\n   *\n   * Few operations such as monitoring characteristic's value changes can be cancelled by a user. Basically every API\n   * entry which accepts `transactionId` allows to call `cancelTransaction` function. When cancelled operation is a\n   * promise or a callback which registers errors, {@link #bleerror|BleError} with error code\n   * {@link #bleerrorcodeoperationcancelled|OperationCancelled} will be emitted in that case. Cancelling transaction\n   * which doesn't exist is ignored.\n   *\n   * @example\n   * const transactionId = 'monitor_battery';\n   *\n   * // Monitor battery notifications\n   * manager.monitorCharacteristicForDevice(\n   *   device.id, '180F', '2A19',\n   *   (error, characteristic) => {\n   *   // Handle battery level changes...\n   * }, transactionId);\n   *\n   * // Cancel after specified amount of time\n   * setTimeout(() => manager.cancelTransaction(transactionId), 2000);\n   *\n   * @param {TransactionId} transactionId Id of pending transactions.\n   */\n  cancelTransaction(transactionId: TransactionId) {\n    BleModule.cancelTransaction(transactionId)\n  }\n\n  // Mark: Monitoring state --------------------------------------------------------------------------------------------\n\n  /**\n   * Enable Bluetooth. This function blocks until BLE is in PoweredOn state. [Android only]\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<BleManager>} Promise completes when state transition was successful.\n   */\n  async enable(transactionId: ?TransactionId): Promise<BleManager> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    await this._callPromise(BleModule.enable(transactionId))\n    return this\n  }\n\n  /**\n   * Disable Bluetooth. This function blocks until BLE is in PoweredOff state. [Android only]\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<BleManager>} Promise completes when state transition was successful.\n   */\n  async disable(transactionId: ?TransactionId): Promise<BleManager> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    await this._callPromise(BleModule.disable(transactionId))\n    return this\n  }\n\n  /**\n   * Current, global {@link State} of a {@link BleManager}. All APIs are working only when active state\n   * is \"PoweredOn\".\n   *\n   * @returns {Promise<State>} Promise which emits current state of BleManager.\n   */\n  state(): Promise<$Keys<typeof State>> {\n    return this._callPromise(BleModule.state())\n  }\n\n  /**\n   * Notifies about {@link State} changes of a {@link BleManager}.\n   *\n   * @example\n   * const subscription = this.manager.onStateChange((state) => {\n   *      if (state === 'PoweredOn') {\n   *          this.scanAndConnect();\n   *          subscription.remove();\n   *      }\n   *  }, true);\n   *\n   * @param {function(newState: State)} listener Callback which emits state changes of BLE Manager.\n   * Look at {@link State} for possible values.\n   * @param {boolean} [emitCurrentState=false] If true, current state will be emitted as well. Defaults to false.\n   *\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  onStateChange(listener: (newState: $Keys<typeof State>) => void, emitCurrentState: boolean = false): Subscription {\n    const subscription: Subscription = this._eventEmitter.addListener(BleModule.StateChangeEvent, listener)\n    const id = this._nextUniqueID()\n    var wrappedSubscription: Subscription\n\n    if (emitCurrentState) {\n      var cancelled = false\n      this._callPromise(this.state()).then(currentState => {\n        if (!cancelled) {\n          listener(currentState)\n        }\n      })\n\n      wrappedSubscription = {\n        remove: () => {\n          if (this._activeSubscriptions[id] != null) {\n            cancelled = true\n            delete this._activeSubscriptions[id]\n            subscription.remove()\n          }\n        }\n      }\n    } else {\n      wrappedSubscription = {\n        remove: () => {\n          if (this._activeSubscriptions[id] != null) {\n            delete this._activeSubscriptions[id]\n            subscription.remove()\n          }\n        }\n      }\n    }\n\n    this._activeSubscriptions[id] = wrappedSubscription\n    return wrappedSubscription\n  }\n\n  // Mark: Scanning ----------------------------------------------------------------------------------------------------\n\n  /**\n   * Starts device scanning. When previous scan is in progress it will be stopped before executing this command.\n   *\n   * @param {?Array<UUID>} UUIDs Array of strings containing {@link UUID}s of {@link Service}s which are registered in\n   * scanned {@link Device}. If `null` is passed, all available {@link Device}s will be scanned.\n   * @param {?ScanOptions} options Optional configuration for scanning operation.\n   * @param {function(error: ?BleError, scannedDevice: ?Device)} listener Function which will be called for every scanned\n   * {@link Device} (devices may be scanned multiple times). It's first argument is potential {@link Error} which is set\n   * to non `null` value when scanning failed. You have to start scanning process again if that happens. Second argument\n   * is a scanned {@link Device}.\n   */\n  startDeviceScan(\n    UUIDs: ?Array<UUID>,\n    options: ?ScanOptions,\n    listener: (error: ?BleError, scannedDevice: ?Device) => void\n  ) {\n    this.stopDeviceScan()\n    const scanListener = ([error, nativeDevice]: [?string, ?NativeDevice]) => {\n      listener(\n        error ? parseBleError(error, this._errorCodesToMessagesMapping) : null,\n        nativeDevice ? new Device(nativeDevice, this) : null\n      )\n    }\n    // $FlowFixMe: Flow cannot deduce EmitterSubscription type.\n    this._scanEventSubscription = this._eventEmitter.addListener(BleModule.ScanEvent, scanListener)\n    BleModule.startDeviceScan(UUIDs, options)\n  }\n\n  /**\n   * Stops {@link Device} scan if in progress.\n   */\n  stopDeviceScan() {\n    if (this._scanEventSubscription != null) {\n      this._scanEventSubscription.remove()\n      this._scanEventSubscription = null\n    }\n    BleModule.stopDeviceScan()\n  }\n\n  /**\n   * Request a connection parameter update. This functions may update connection parameters on Android API level 21 or\n   * above.\n   *\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {ConnectionPriority} connectionPriority: Connection priority.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation.\n   * @returns {Promise<Device>} Connected device.\n   */\n  async requestConnectionPriorityForDevice(\n    deviceIdentifier: DeviceId,\n    connectionPriority: $Values<typeof ConnectionPriority>,\n    transactionId: ?TransactionId\n  ): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(\n      BleModule.requestConnectionPriorityForDevice(deviceIdentifier, connectionPriority, transactionId)\n    )\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Reads RSSI for connected device.\n   *\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Device>} Connected device with updated RSSI value.\n   */\n  async readRSSIForDevice(deviceIdentifier: DeviceId, transactionId: ?TransactionId): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(BleModule.readRSSIForDevice(deviceIdentifier, transactionId))\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Request new MTU value for this device. This function currently is not doing anything\n   * on iOS platform as MTU exchange is done automatically.\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {number} mtu New MTU to negotiate.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Device>} Device with updated MTU size. Default value is 23.\n   */\n  async requestMTUForDevice(deviceIdentifier: DeviceId, mtu: number, transactionId: ?TransactionId): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(BleModule.requestMTUForDevice(deviceIdentifier, mtu, transactionId))\n    return new Device(nativeDevice, this)\n  }\n\n  // Mark: Connection management ---------------------------------------------------------------------------------------\n\n  /**\n   * Returns a list of known devices by their identifiers.\n   * @param {Array<DeviceId>} deviceIdentifiers List of device identifiers.\n   * @returns {Promise<Array<Device>>} List of known devices by their identifiers.\n   */\n  async devices(deviceIdentifiers: Array<DeviceId>): Promise<Array<Device>> {\n    const nativeDevices = await this._callPromise(BleModule.devices(deviceIdentifiers))\n    return nativeDevices.map((nativeDevice: NativeDevice) => {\n      return new Device(nativeDevice, this)\n    })\n  }\n\n  /**\n   * Returns a list of the peripherals (containing any of the specified services) currently connected to the system\n   * which have discovered services. Returned devices **may not be connected** to your application. Make sure to check\n   * if that's the case with function {@link #blemanagerisdeviceconnected|isDeviceConnected}.\n   * @param {Array<UUID>} serviceUUIDs List of service UUIDs. Device must contain at least one of them to be listed.\n   * @returns {Promise<Array<Device>>} List of known devices with discovered services as stated in the parameter.\n   */\n  async connectedDevices(serviceUUIDs: Array<UUID>): Promise<Array<Device>> {\n    const nativeDevices = await this._callPromise(BleModule.connectedDevices(serviceUUIDs))\n    return nativeDevices.map((nativeDevice: NativeDevice) => {\n      return new Device(nativeDevice, this)\n    })\n  }\n\n  // Mark: Connection management ---------------------------------------------------------------------------------------\n\n  /**\n   * Connects to {@link Device} with provided ID.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {?ConnectionOptions} options Platform specific options for connection establishment.\n   * @returns {Promise<Device>} Connected {@link Device} object if successful.\n   */\n  async connectToDevice(deviceIdentifier: DeviceId, options: ?ConnectionOptions): Promise<Device> {\n    const nativeDevice = await this._callPromise(BleModule.connectToDevice(deviceIdentifier, options))\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Disconnects from {@link Device} if it's connected or cancels pending connection.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier to be closed.\n   * @returns {Promise<Device>} Returns closed {@link Device} when operation is successful.\n   */\n  async cancelDeviceConnection(deviceIdentifier: DeviceId): Promise<Device> {\n    const nativeDevice = await this._callPromise(BleModule.cancelDeviceConnection(deviceIdentifier))\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Monitors if {@link Device} was disconnected due to any errors or connection problems.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier to be monitored.\n   * @param {function(error: ?BleError, device: Device)} listener - callback returning error as a reason of disconnection\n   * if available and {@link Device} object. If an error is null, that means the connection was terminated by\n   * {@link #blemanagercanceldeviceconnection|bleManager.cancelDeviceConnection()} call.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  onDeviceDisconnected(deviceIdentifier: DeviceId, listener: (error: ?BleError, device: Device) => void): Subscription {\n    const disconnectionListener = ([error, nativeDevice]: [?string, NativeDevice]) => {\n      if (deviceIdentifier !== nativeDevice.id) return\n      listener(error ? parseBleError(error, this._errorCodesToMessagesMapping) : null, new Device(nativeDevice, this))\n    }\n\n    const subscription: Subscription = this._eventEmitter.addListener(\n      BleModule.DisconnectionEvent,\n      disconnectionListener\n    )\n\n    const id = this._nextUniqueID()\n    const wrappedSubscription = {\n      remove: () => {\n        if (this._activeSubscriptions[id] != null) {\n          delete this._activeSubscriptions[id]\n          subscription.remove()\n        }\n      }\n    }\n    this._activeSubscriptions[id] = wrappedSubscription\n    return wrappedSubscription\n  }\n\n  /**\n   * Check connection state of a {@link Device}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @returns {Promise<boolean>} Promise which emits `true` if device is connected, and `false` otherwise.\n   */\n  isDeviceConnected(deviceIdentifier: DeviceId): Promise<boolean> {\n    return this._callPromise(BleModule.isDeviceConnected(deviceIdentifier))\n  }\n\n  // Mark: Discovery ---------------------------------------------------------------------------------------------------\n\n  /**\n   * Discovers all {@link Service}s,  {@link Characteristic}s and {@link Descriptor}s for {@link Device}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Device>} Promise which emits {@link Device} object if all available services and\n   * characteristics have been discovered.\n   */\n  async discoverAllServicesAndCharacteristicsForDevice(\n    deviceIdentifier: DeviceId,\n    transactionId: ?TransactionId\n  ): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(\n      BleModule.discoverAllServicesAndCharacteristicsForDevice(deviceIdentifier, transactionId)\n    )\n    return new Device(nativeDevice, this)\n  }\n\n  // Mark: Service and characteristic getters --------------------------------------------------------------------------\n\n  /**\n   * List of discovered {@link Service}s for {@link Device}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @returns {Promise<Array<Service>>} Promise which emits array of {@link Service} objects which are discovered for a\n   * {@link Device}.\n   */\n  async servicesForDevice(deviceIdentifier: DeviceId): Promise<Array<Service>> {\n    const services = await this._callPromise(BleModule.servicesForDevice(deviceIdentifier))\n    return services.map(nativeService => {\n      return new Service(nativeService, this)\n    })\n  }\n\n  /**\n   * List of discovered {@link Characteristic}s for given {@link Device} and {@link Service}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @returns {Promise<Array<Characteristic>>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered for a {@link Device} in specified {@link Service}.\n   */\n  characteristicsForDevice(deviceIdentifier: DeviceId, serviceUUID: UUID): Promise<Array<Characteristic>> {\n    return this._handleCharacteristics(BleModule.characteristicsForDevice(deviceIdentifier, serviceUUID))\n  }\n\n  /**\n   * List of discovered {@link Characteristic}s for unique {@link Service}.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @returns {Promise<Array<Characteristic>>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered in unique {@link Service}.\n   * @private\n   */\n  _characteristicsForService(serviceIdentifier: Identifier): Promise<Array<Characteristic>> {\n    return this._handleCharacteristics(BleModule.characteristicsForService(serviceIdentifier))\n  }\n\n  /**\n   * Common code for handling NativeCharacteristic fetches.\n   *\n   * @param {Promise<Array<NativeCharacteristic>>} characteristicsPromise Native characteristics.\n   * @returns {Promise<Array<Characteristic>>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered in unique {@link Service}.\n   * @private\n   */\n  async _handleCharacteristics(\n    characteristicsPromise: Promise<Array<NativeCharacteristic>>\n  ): Promise<Array<Characteristic>> {\n    const characteristics = await this._callPromise(characteristicsPromise)\n    return characteristics.map(nativeCharacteristic => {\n      return new Characteristic(nativeCharacteristic, this)\n    })\n  }\n\n  /**\n   * List of discovered {@link Descriptor}s for given {@link Device}, {@link Service} and {@link Characteristic}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for a {@link Device}, {@link Service} in specified {@link Characteristic}.\n   */\n  descriptorsForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID\n  ): Promise<Array<Descriptor>> {\n    return this._handleDescriptors(BleModule.descriptorsForDevice(deviceIdentifier, serviceUUID, characteristicUUID))\n  }\n\n  /**\n   * List of discovered {@link Descriptor}s for given {@link Service} and {@link Characteristic}.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} identifier.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for a {@link Service} in specified {@link Characteristic}.\n   * @private\n   */\n  _descriptorsForService(serviceIdentifier: Identifier, characteristicUUID: UUID): Promise<Array<Descriptor>> {\n    return this._handleDescriptors(BleModule.descriptorsForService(serviceIdentifier, characteristicUUID))\n  }\n\n  /**\n   * List of discovered {@link Descriptor}s for given {@link Characteristic}.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} identifier.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered in specified {@link Characteristic}.\n   * @private\n   */\n  _descriptorsForCharacteristic(characteristicIdentifier: Identifier): Promise<Array<Descriptor>> {\n    return this._handleDescriptors(BleModule.descriptorsForCharacteristic(characteristicIdentifier))\n  }\n\n  /**\n   *  Common code for handling NativeDescriptor fetches.\n   * @param {Promise<Array<NativeDescriptor>>} descriptorsPromise Native descriptors.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered in unique {@link Characteristic}.\n   * @private\n   */\n  async _handleDescriptors(descriptorsPromise: Promise<Array<NativeDescriptor>>): Promise<Array<Descriptor>> {\n    const descriptors = await this._callPromise(descriptorsPromise)\n    return descriptors.map(nativeDescriptor => {\n      return new Descriptor(nativeDescriptor, this)\n    })\n  }\n\n  // Mark: Characteristics operations ----------------------------------------------------------------------------------\n\n  /**\n   * Read {@link Characteristic} value.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of {@link Characteristic} will be stored inside returned object.\n   */\n  async readCharacteristicForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.readCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Read {@link Characteristic} value.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of {@link Characteristic} will be stored inside returned object.\n   * @private\n   */\n  async _readCharacteristicForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.readCharacteristicForService(serviceIdentifier, characteristicUUID, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Read {@link Characteristic} value.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} ID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified ID.\n   * Latest value of {@link Characteristic} will be stored inside returned object.\n   * @private\n   */\n  async _readCharacteristic(\n    characteristicIdentifier: Identifier,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.readCharacteristic(characteristicIdentifier, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value with response.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   */\n  async writeCharacteristicWithResponseForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        base64Value,\n        true,\n        transactionId\n      )\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value with response.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithResponseForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, true, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value with response.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} ID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified ID.\n   * Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithResponse(\n    characteristicIdentifier: Identifier,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ) {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristic(characteristicIdentifier, base64Value, true, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value without response.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   */\n  async writeCharacteristicWithoutResponseForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        base64Value,\n        false,\n        transactionId\n      )\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value without response.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithoutResponseForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, false, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value without response.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified ID.\n   * Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithoutResponse(\n    characteristicIdentifier: Identifier,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristic(characteristicIdentifier, base64Value, false, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Monitor value changes of a {@link Characteristic}. If notifications are enabled they will be used\n   * in favour of indications.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  monitorCharacteristicForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId\n  ): Subscription {\n    const filledTransactionId = transactionId || this._nextUniqueID()\n    return this._handleMonitorCharacteristic(\n      BleModule.monitorCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, filledTransactionId),\n      filledTransactionId,\n      listener\n    )\n  }\n\n  /**\n   * Monitor value changes of a {@link Characteristic}. If notifications are enabled they will be used\n   * in favour of indications.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   * @private\n   */\n  _monitorCharacteristicForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId\n  ): Subscription {\n    const filledTransactionId = transactionId || this._nextUniqueID()\n    return this._handleMonitorCharacteristic(\n      BleModule.monitorCharacteristicForService(serviceIdentifier, characteristicUUID, filledTransactionId),\n      filledTransactionId,\n      listener\n    )\n  }\n\n  /**\n   * Monitor value changes of a {@link Characteristic}. If notifications are enabled they will be used\n   * in favour of indications.\n   *\n   * @param {Identifier} characteristicIdentifier - {@link Characteristic} ID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   * @private\n   */\n  _monitorCharacteristic(\n    characteristicIdentifier: Identifier,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId\n  ): Subscription {\n    const filledTransactionId = transactionId || this._nextUniqueID()\n    return this._handleMonitorCharacteristic(\n      BleModule.monitorCharacteristic(characteristicIdentifier, filledTransactionId),\n      filledTransactionId,\n      listener\n    )\n  }\n\n  /**\n   * Common code to handle characteristic monitoring.\n   *\n   * @param {Promise<void>} monitorPromise Characteristic monitoring promise\n   * @param {TransactionId} transactionId TransactionId of passed promise\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   * @private\n   */\n  _handleMonitorCharacteristic(\n    monitorPromise: Promise<void>,\n    transactionId: TransactionId,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void\n  ): Subscription {\n    const monitorListener = ([error, characteristic, msgTransactionId]: [\n      ?string,\n      NativeCharacteristic,\n      TransactionId\n    ]) => {\n      if (transactionId !== msgTransactionId) return\n      if (error) {\n        listener(parseBleError(error, this._errorCodesToMessagesMapping), null)\n        return\n      }\n      listener(null, new Characteristic(characteristic, this))\n    }\n\n    const subscription: Subscription = this._eventEmitter.addListener(BleModule.ReadEvent, monitorListener)\n\n    const id = this._nextUniqueID()\n    const wrappedSubscription: Subscription = {\n      remove: () => {\n        if (this._activeSubscriptions[id] != null) {\n          delete this._activeSubscriptions[id]\n          subscription.remove()\n        }\n      }\n    }\n    this._activeSubscriptions[id] = wrappedSubscription\n\n    this._callPromise(monitorPromise).then(\n      () => {\n        wrappedSubscription.remove()\n      },\n      (error: BleError) => {\n        listener(error, null)\n        wrappedSubscription.remove()\n      }\n    )\n\n    return {\n      remove: () => {\n        BleModule.cancelTransaction(transactionId)\n      }\n    }\n  }\n\n  // Mark: Descriptors operations ----------------------------------------------------------------------------------\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   */\n  async readDescriptorForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.readDescriptorForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        descriptorUUID,\n        transactionId\n      )\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} identifier.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   * @private\n   */\n  async _readDescriptorForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.readDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} identifier.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   * @private\n   */\n  async _readDescriptorForCharacteristic(\n    characteristicIdentifier: Identifier,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.readDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {Identifier} descriptorIdentifier {@link Descriptor} identifier.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   * @private\n   */\n  async _readDescriptor(descriptorIdentifier: Identifier, transactionId: ?TransactionId): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(BleModule.readDescriptor(descriptorIdentifier, transactionId))\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier\n   * @param {UUID} serviceUUID Service UUID\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   */\n  async writeDescriptorForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptorForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        descriptorUUID,\n        valueBase64,\n        transactionId\n      )\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {Identifier} serviceIdentifier Service identifier\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   * @private\n   */\n  async _writeDescriptorForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptorForService(\n        serviceIdentifier,\n        characteristicUUID,\n        descriptorUUID,\n        valueBase64,\n        transactionId\n      )\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {Identifier} characteristicIdentifier Characteristic identifier\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   * @private\n   */\n  async _writeDescriptorForCharacteristic(\n    characteristicIdentifier: Identifier,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, valueBase64, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {Identifier} descriptorIdentifier Descriptor identifier\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   * @private\n   */\n  async _writeDescriptor(\n    descriptorIdentifier: Identifier,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptor(descriptorIdentifier, valueBase64, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}