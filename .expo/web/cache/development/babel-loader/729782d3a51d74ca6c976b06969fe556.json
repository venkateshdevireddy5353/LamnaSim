{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCredentialsFromNumericCode = getCredentialsFromNumericCode;\nexports.sendTelemetryData = sendTelemetryData;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _utils = require(\"../utils\");\n\nfunction getCredentialsFromNumericCode(numeric) {\n  return _regenerator.default.async(function getCredentialsFromNumericCode$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regenerator.default.awrap(fetch(\"https://cpm-cred-server.azurewebsites.net/numeric?numeric=\" + numeric));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent.text());\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction sendTelemetryData(centralClient, normalize, itemData) {\n  var itemKey;\n  return _regenerator.default.async(function sendTelemetryData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          itemKey = normalize ? (0, _utils.bleToIoTCName)(itemData.itemId) : itemData.itemId;\n          _context2.next = 3;\n          return _regenerator.default.awrap(centralClient.sendTelemetry((0, _defineProperty2.default)({}, itemKey, itemData.value)));\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/api/central.ts"],"names":["getCredentialsFromNumericCode","numeric","fetch","text","sendTelemetryData","centralClient","normalize","itemData","itemKey","itemId","sendTelemetry","value"],"mappings":";;;;;;;;;;;;AACA;;AAEO,SAAeA,6BAAf,CAA6CC,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CACWC,KAAK,gEAA8DD,OAA9D,CADhB;;AAAA;AAAA,yDAC0FE,IAD1F;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAeC,iBAAf,CAAiCC,aAAjC,EAA6DC,SAA7D,EAAiFC,QAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,UAAAA,OADH,GACaF,SAAS,GAAG,0BAAcC,QAAQ,CAACE,MAAvB,CAAH,GAAoCF,QAAQ,CAACE,MADnE;AAAA;AAAA,4CAEGJ,aAAa,CAACK,aAAd,mCAA+BF,OAA/B,EAAyCD,QAAQ,CAACI,KAAlD,EAFH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { IIoTCClient } from \"react-native-azure-iotcentral-client\";\r\nimport { bleToIoTCName } from \"../utils\";\r\n\r\nexport async function getCredentialsFromNumericCode(numeric: string): Promise<string> {\r\n    return (await fetch(`https://cpm-cred-server.azurewebsites.net/numeric?numeric=${numeric}`)).text();\r\n}\r\n\r\nexport async function sendTelemetryData(centralClient: IIoTCClient, normalize: boolean, itemData: { itemId: string, value: any, itemName: string }): Promise<void> {\r\n    const itemKey = normalize ? bleToIoTCName(itemData.itemId) : itemData.itemId;\r\n    await centralClient.sendTelemetry({ [itemKey]: itemData.value });\r\n}"]},"metadata":{},"sourceType":"script"}