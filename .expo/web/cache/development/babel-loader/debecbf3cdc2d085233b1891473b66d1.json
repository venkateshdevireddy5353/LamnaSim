{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleFitDevice = exports.GoogleFitManager = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNativeGoogleFit = _interopRequireWildcard(require(\"react-native-google-fit\"));\n\nvar _utils = require(\"../utils\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _ble = require(\"./ble\");\n\nvar _events = require(\"events\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar SCOPES = [_reactNativeGoogleFit.Scopes.FITNESS_ACTIVITY_READ, _reactNativeGoogleFit.Scopes.FITNESS_BODY_READ, _reactNativeGoogleFit.Scopes.FITNESS_BODY_TEMPERATURE_READ, _reactNativeGoogleFit.Scopes.FITNESS_BLOOD_PRESSURE_READ];\nvar GOOGLE_ITEMS;\n\n(function (GOOGLE_ITEMS) {\n  GOOGLE_ITEMS[\"STEPS\"] = \"Steps\";\n})(GOOGLE_ITEMS || (GOOGLE_ITEMS = {}));\n\nvar GOOGLE_PREFIX = 'https://www.googleapis.com/auth/fitness.';\n\nvar GoogleFitManager = function () {\n  function GoogleFitManager() {\n    (0, _classCallCheck2.default)(this, GoogleFitManager);\n    this.device = null;\n  }\n\n  (0, _createClass2.default)(GoogleFitManager, [{\n    key: \"startScan\",\n    value: function startScan(onDeviceFound) {\n      var _this = this;\n\n      (function _callee() {\n        var granted, authResult;\n        return _regenerator.default.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regenerator.default.awrap(_reactNativeGoogleFit.default.checkIsAuthorized());\n\n              case 2:\n                _context.next = 4;\n                return _regenerator.default.awrap(_reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION, {\n                  title: 'Location Permission',\n                  message: \"Application would like to use location permissions for distance calculation\",\n                  buttonNeutral: 'Ask Me Later',\n                  buttonNegative: 'Cancel',\n                  buttonPositive: 'OK'\n                }));\n\n              case 4:\n                granted = _context.sent;\n\n                if (!(granted !== _reactNative.PermissionsAndroid.RESULTS.GRANTED)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error('Bluetooth permissions not granted');\n\n              case 7:\n                if (_reactNativeGoogleFit.default.isAuthorized) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 10;\n                return _regenerator.default.awrap(_reactNativeGoogleFit.default.authorize({\n                  scopes: SCOPES\n                }));\n\n              case 10:\n                authResult = _context.sent;\n\n                if (!authResult.success) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _reactNativeGoogleFit.default.startRecording(function (data) {\n                  if (data.recording) {\n                    _this.device = new GoogleFitDevice('googleFit', 'Google Fit');\n                    onDeviceFound(_this.device);\n                  }\n                }, ['step', 'distance', 'activity']);\n\n                _context.next = 16;\n                break;\n\n              case 15:\n                throw new Error(\"Google Fit Authorization denied: \" + authResult.message);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, {\n    key: \"stopScan\",\n    value: function stopScan() {\n      return;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(deviceId) {\n      return Promise.resolve(this.device);\n    }\n  }]);\n  return GoogleFitManager;\n}();\n\nexports.GoogleFitManager = GoogleFitManager;\n\nvar GoogleFitDevice = function () {\n  function GoogleFitDevice(id, name) {\n    var _this2 = this;\n\n    (0, _classCallCheck2.default)(this, GoogleFitDevice);\n    this.id = id;\n    this.name = name;\n    this.type = 'platform';\n    this.paired = true;\n    this.connected = false;\n    this.enabled = {};\n    this.eventEmitter = new _events.EventEmitter();\n\n    _reactNativeGoogleFit.default.observeSteps(function (data) {\n      if (_this2.enabled[GOOGLE_ITEMS.STEPS]) {\n        if (_this2.items) {\n          var step = _this2.items.find(function (i) {\n            return i.id === GOOGLE_ITEMS.STEPS;\n          });\n\n          if (step) {\n            step.value += data.steps;\n          }\n        }\n      }\n    });\n  }\n\n  (0, _createClass2.default)(GoogleFitDevice, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      this.eventEmitter.addListener(eventType, listener);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      this.eventEmitter.removeListener(eventType, listener);\n    }\n  }, {\n    key: \"enableItem\",\n    value: function enableItem(item, status) {\n      var _this3 = this;\n\n      return _regenerator.default.async(function enableItem$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!status) {\n                _context3.next = 8;\n                break;\n              }\n\n              if (!this.enabled[item.id]) {\n                _context3.next = 3;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", true);\n\n            case 3:\n              this.enabled[item.id] = setInterval(function _callee2() {\n                var startDate, results;\n                return _regenerator.default.async(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        if (!item.value) {\n                          _context2.next = 4;\n                          break;\n                        }\n\n                        _this3.eventEmitter.emit(_ble.DATA_AVAILABLE_EVENT, {\n                          itemId: item.id,\n                          value: item.value,\n                          itemName: item.name\n                        });\n\n                        _context2.next = 16;\n                        break;\n\n                      case 4:\n                        startDate = new Date();\n                        startDate.setDate(startDate.getDate() - 1);\n                        _context2.t0 = item.id;\n                        _context2.next = _context2.t0 === GOOGLE_ITEMS.STEPS ? 9 : 15;\n                        break;\n\n                      case 9:\n                        _context2.next = 11;\n                        return _regenerator.default.awrap(_reactNativeGoogleFit.default.getDailyStepCountSamples({\n                          startDate: startDate.toISOString(),\n                          endDate: new Date().toISOString()\n                        }));\n\n                      case 11:\n                        results = _context2.sent;\n                        results.forEach(function (result) {\n                          if (result.steps && result.steps.length > 0) {\n                            item.value = result.steps[result.steps.length - 1].value;\n                          } else {\n                            item.value = 0;\n                          }\n                        });\n\n                        _this3.eventEmitter.emit(_ble.DATA_AVAILABLE_EVENT, {\n                          itemId: item.id,\n                          value: item.value,\n                          itemName: item.name\n                        });\n\n                        return _context2.abrupt(\"break\", 16);\n\n                      case 15:\n                        return _context2.abrupt(\"break\", 16);\n\n                      case 16:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }, 5000);\n              item.enabled = true;\n              return _context3.abrupt(\"return\", true);\n\n            case 8:\n              if (this.enabled[item.id]) {\n                delete this.enabled[item.id];\n              }\n\n              item.enabled = false;\n              return _context3.abrupt(\"return\", false);\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch() {\n      var _this4 = this;\n\n      var fetchedItems;\n      return _regenerator.default.async(function fetch$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              fetchedItems = Object.keys(GOOGLE_ITEMS).map(function (perm) {\n                var name = GOOGLE_ITEMS[perm];\n                return {\n                  id: name,\n                  name: (0, _utils.snakeToName)((0, _utils.dottedToName)(name)),\n                  enabled: true,\n                  value: undefined\n                };\n              });\n              fetchedItems.map(function (i) {\n                i.enable = function (status) {\n                  return this.enableItem(i, status);\n                }.bind(_this4);\n              }, this);\n              this.items = fetchedItems;\n              this.items.forEach(function (item) {\n                if (item.enabled) {\n                  item.enable(true);\n                }\n              });\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _this5 = this;\n\n      return _regenerator.default.async(function disconnect$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!(this.enabled && this.items)) {\n                _context5.next = 3;\n                break;\n              }\n\n              Object.keys(this.enabled).forEach(function (enabledItem) {\n                clearInterval(_this5.enabled[enabledItem]);\n\n                var currentItem = _this5.items.find(function (i) {\n                  return i.id === enabledItem;\n                });\n\n                if (currentItem) {\n                  currentItem.enabled = false;\n                }\n\n                delete _this5.enabled[enabledItem];\n              }, this);\n              return _context5.abrupt(\"return\", Promise.resolve());\n\n            case 3:\n              this.eventEmitter.removeAllListeners(_ble.DATA_AVAILABLE_EVENT);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return GoogleFitDevice;\n}();\n\nexports.GoogleFitDevice = GoogleFitDevice;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/health/googleFit.ts"],"names":["SCOPES","Scopes","FITNESS_ACTIVITY_READ","FITNESS_BODY_READ","FITNESS_BODY_TEMPERATURE_READ","FITNESS_BLOOD_PRESSURE_READ","GOOGLE_ITEMS","GOOGLE_PREFIX","GoogleFitManager","device","onDeviceFound","GoogleFit","checkIsAuthorized","PermissionsAndroid","request","PERMISSIONS","ACCESS_FINE_LOCATION","title","message","buttonNeutral","buttonNegative","buttonPositive","granted","RESULTS","GRANTED","Error","isAuthorized","authorize","scopes","authResult","success","startRecording","data","recording","GoogleFitDevice","deviceId","Promise","resolve","id","name","type","paired","connected","enabled","eventEmitter","EventEmitter","observeSteps","STEPS","items","step","find","i","value","steps","eventType","listener","context","addListener","removeListener","item","status","setInterval","emit","DATA_AVAILABLE_EVENT","itemId","itemName","startDate","Date","setDate","getDate","getDailyStepCountSamples","toISOString","endDate","results","forEach","result","length","fetchedItems","Object","keys","map","perm","undefined","enable","enableItem","bind","enabledItem","clearInterval","currentItem","removeAllListeners"],"mappings":"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","sourcesContent":["import {\r\n  IHealthManager,\r\n  IHealthDevice,\r\n  IHealthItem,\r\n  DataAvailableCallback,\r\n  DeviceType,\r\n} from '../models';\r\nimport GoogleFit, {Scopes} from 'react-native-google-fit';\r\nimport {camelToName, dottedToName, snakeToName} from '../utils';\r\nimport {PermissionsAndroid} from 'react-native';\r\nimport {GoogleFitStepResult} from '../types';\r\nimport {DATA_AVAILABLE_EVENT} from './ble';\r\nimport {EventEmitter} from 'events';\r\n\r\nconst SCOPES = [\r\n  Scopes.FITNESS_ACTIVITY_READ,\r\n  Scopes.FITNESS_BODY_READ,\r\n  Scopes.FITNESS_BODY_TEMPERATURE_READ,\r\n  Scopes.FITNESS_BLOOD_PRESSURE_READ,\r\n];\r\nenum GOOGLE_ITEMS {\r\n  STEPS = 'Steps',\r\n}\r\nconst GOOGLE_PREFIX = 'https://www.googleapis.com/auth/fitness.';\r\n\r\nexport class GoogleFitManager implements IHealthManager {\r\n  private device: IHealthDevice | null;\r\n  constructor() {\r\n    this.device = null;\r\n  }\r\n\r\n  startScan(onDeviceFound: (device: IHealthDevice) => void): void {\r\n    (async () => {\r\n      await GoogleFit.checkIsAuthorized();\r\n      const granted = await PermissionsAndroid.request(\r\n        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\r\n        {\r\n          title: 'Location Permission',\r\n          message: `Application would like to use location permissions for distance calculation`,\r\n          buttonNeutral: 'Ask Me Later',\r\n          buttonNegative: 'Cancel',\r\n          buttonPositive: 'OK',\r\n        },\r\n      );\r\n      if (granted !== PermissionsAndroid.RESULTS.GRANTED) {\r\n        throw new Error('Bluetooth permissions not granted');\r\n      }\r\n      if (!GoogleFit.isAuthorized) {\r\n        const authResult = await GoogleFit.authorize({scopes: SCOPES});\r\n        if (authResult.success) {\r\n          GoogleFit.startRecording(\r\n            data => {\r\n              if (data.recording) {\r\n                this.device = new GoogleFitDevice('googleFit', 'Google Fit');\r\n                onDeviceFound(this.device);\r\n              }\r\n            },\r\n            ['step', 'distance', 'activity'],\r\n          );\r\n        } else {\r\n          throw new Error(\r\n            `Google Fit Authorization denied: ${authResult.message}`,\r\n          );\r\n        }\r\n      }\r\n    })();\r\n  }\r\n  stopScan(): void {\r\n    return;\r\n  }\r\n  connect(deviceId: string): Promise<IHealthDevice> {\r\n    return Promise.resolve(this.device as IHealthDevice);\r\n  }\r\n}\r\n\r\nexport class GoogleFitDevice implements IHealthDevice {\r\n  public items: IHealthItem[] | undefined;\r\n  public paired: boolean;\r\n  public connected: boolean;\r\n  private eventEmitter: EventEmitter;\r\n  public type: DeviceType = 'platform';\r\n\r\n  /**\r\n   * keeps track of the subscribtions\r\n   * The value of each item represents a listener for the event emitter.\r\n   */\r\n  private enabled: {\r\n    [itemId: string]: number;\r\n  };\r\n\r\n  constructor(public id: string, public name: string) {\r\n    this.paired = true;\r\n    this.connected = false;\r\n    this.enabled = {};\r\n    this.eventEmitter = new EventEmitter();\r\n    GoogleFit.observeSteps(data => {\r\n      if (this.enabled[GOOGLE_ITEMS.STEPS]) {\r\n        if (this.items) {\r\n          const step = this.items.find(i => i.id === GOOGLE_ITEMS.STEPS);\r\n          if (step) {\r\n            step.value += (data as any).steps;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  addListener(\r\n    eventType: string,\r\n    listener: (...args: any[]) => any,\r\n    context?: any,\r\n  ) {\r\n    this.eventEmitter.addListener(eventType, listener);\r\n  }\r\n  removeListener(eventType: string, listener: (...args: any[]) => any) {\r\n    this.eventEmitter.removeListener(eventType, listener);\r\n  }\r\n\r\n  private async enableItem(\r\n    item: IHealthItem,\r\n    status: boolean,\r\n  ): Promise<boolean> {\r\n    if (status) {\r\n      if (this.enabled[item.id]) {\r\n        return true;\r\n      }\r\n\r\n      // @ts-ignore\r\n      // sometimes setInterval gets typings from node instead of react-native\r\n      this.enabled[item.id] = setInterval(async () => {\r\n        if (item.value) {\r\n          this.eventEmitter.emit(DATA_AVAILABLE_EVENT, {\r\n            itemId: item.id,\r\n            value: item.value,\r\n            itemName: item.name,\r\n          });\r\n        } else {\r\n          // get current value for the item\r\n\r\n          let startDate = new Date();\r\n          startDate.setDate(startDate.getDate() - 1);\r\n          switch (item.id) {\r\n            case GOOGLE_ITEMS.STEPS:\r\n              const results = (await GoogleFit.getDailyStepCountSamples({\r\n                startDate: startDate.toISOString(),\r\n                endDate: new Date().toISOString(),\r\n              })) as GoogleFitStepResult[];\r\n              results.forEach(result => {\r\n                if (result.steps && result.steps.length > 0) {\r\n                  item.value = result.steps[result.steps.length - 1].value;\r\n                } else { // if no steps are provided just emit 0\r\n                  item.value = 0;\r\n                }\r\n              });\r\n              this.eventEmitter.emit(DATA_AVAILABLE_EVENT, {\r\n                itemId: item.id,\r\n                value: item.value,\r\n                itemName: item.name,\r\n              });\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n      }, 5000);\r\n      item.enabled = true;\r\n      return true;\r\n    } else {\r\n      if (this.enabled[item.id]) {\r\n        delete this.enabled[item.id];\r\n      }\r\n      item.enabled = false;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public async fetch() {\r\n    let fetchedItems: any[] = Object.keys(GOOGLE_ITEMS).map(perm => {\r\n      // const name = perm.replace(GOOGLE_PREFIX, '').replace('read', '');\r\n      const name = (<any>GOOGLE_ITEMS)[perm];\r\n      return {\r\n        id: name,\r\n        name: snakeToName(dottedToName(name)),\r\n        enabled: true,\r\n        value: undefined,\r\n      };\r\n    });\r\n    fetchedItems.map(i => {\r\n      i.enable = function(this: GoogleFitDevice, status: boolean) {\r\n        return this.enableItem(i, status);\r\n      }.bind(this);\r\n    }, this);\r\n    this.items = fetchedItems;\r\n    this.items.forEach(item => {\r\n      if (item.enabled) {\r\n        item.enable(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  public async disconnect() {\r\n    // loop through listeners\r\n    if (this.enabled && this.items) {\r\n      Object.keys(this.enabled).forEach(enabledItem => {\r\n        clearInterval(this.enabled[enabledItem]);\r\n        const currentItem = (this.items as IHealthItem[]).find(\r\n          i => i.id === enabledItem,\r\n        );\r\n        if (currentItem) {\r\n          currentItem.enabled = false;\r\n        }\r\n        delete this.enabled[enabledItem];\r\n      }, this);\r\n      return Promise.resolve();\r\n    }\r\n    // remove all data listeners\r\n    this.eventEmitter.removeAllListeners(DATA_AVAILABLE_EVENT);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}