{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Devices;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _footer = require(\"../components/footer\");\n\nvar _styles = _interopRequireDefault(require(\"../styles\"));\n\nvar _typography = require(\"../components/typography\");\n\nvar _types = require(\"../types\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _config = require(\"../contexts/config\");\n\nvar _utils = require(\"../components/utils\");\n\nvar _ble = require(\"../health/ble\");\n\nvar _simulated = require(\"../health/simulated\");\n\nvar _common = require(\"../hooks/common\");\n\nvar _buttons = require(\"../components/buttons\");\n\nvar _bluetoothHooks = require(\"../hooks/bluetoothHooks\");\n\nvar _central = require(\"../api/central\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\venkatesh.devireddy\\\\Projects\\\\IoT_Central_CPM\\\\src\\\\screens\\\\devices.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar SEARCH = 'SEARCH FOR DEVICES';\nvar NOT_FOUND_TITLE = 'Device could not be located';\nvar NOT_FOUND_TEXT = 'Make sure your bluetooth is enabled and available for pairing or use a simulated device.';\nvar SIMULATED = 'Simulated';\nvar REAL = '';\nvar MY_DEVICE = 'My devices';\nvar MAX_NAME_LENGTH = 30;\n\nfunction startScanProcess(manager, onDeviceFound, onStop) {\n  var timeout = 10000;\n  manager.startScan(onDeviceFound);\n\n  if (manager instanceof _simulated.SimulatedHealthManager) {\n    timeout = 3000;\n  }\n\n  setTimeout(function () {\n    manager.stopScan();\n    onStop();\n  }, timeout);\n}\n\nfunction Devices() {\n  var navigation = (0, _native.useNavigation)();\n\n  var _useContext = (0, _react.useContext)(_config.ConfigContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      scanning = _useState2[0],\n      setScanning = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(null),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      devices = _useState4[0],\n      setDevices = _useState4[1];\n\n  var simulated = (0, _bluetoothHooks.isSimulated)();\n  (0, _common.useHeaderTitle)('Devices');\n  var scanInProgress = (0, _react.useRef)(true);\n\n  var refresh = function refresh() {\n    setDevices([]);\n    setScanning(true);\n    startScanProcess(state.healthManager, function (device) {\n      if (scanInProgress.current) {\n        setDevices(function (current) {\n          if (!current) {\n            return [];\n          }\n\n          if (current.find(function (d) {\n            return d.id === device.id;\n          })) {\n            return current;\n          }\n\n          return [].concat((0, _toConsumableArray2.default)(current), [device]);\n        });\n      }\n    }, function () {\n      if (scanInProgress.current) {\n        setScanning(false);\n      }\n    });\n  };\n\n  var connect = function connect(deviceId) {\n    var dev;\n    return _regenerator.default.async(function connect$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (state.healthManager) {\n              _context.next = 3;\n              break;\n            }\n\n            console.log(\"No Health manager available\");\n            return _context.abrupt(\"return\");\n\n          case 3:\n            _context.next = 5;\n            return _regenerator.default.awrap(state.healthManager.connect(deviceId));\n\n          case 5:\n            dev = _context.sent;\n            _context.next = 8;\n            return _regenerator.default.awrap(dev.fetch());\n\n          case 8:\n            if (state.centralClient) {\n              dev.addListener(_ble.DATA_AVAILABLE_EVENT, _central.sendTelemetryData.bind(null, state.centralClient, dev.type === 'real'));\n            }\n\n            dispatch({\n              type: 'HEALTH_CONNECT',\n              payload: dev\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  (0, _react.useEffect)(function () {\n    var initManager = function initManager() {\n      var payload, _payload;\n\n      return _regenerator.default.async(function initManager$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!state.healthManager) {\n                _context2.next = 4;\n                break;\n              }\n\n              refresh();\n              _context2.next = 16;\n              break;\n\n            case 4:\n              _context2.prev = 4;\n              _context2.next = 7;\n              return _regenerator.default.awrap(_ble.BleManager.GetManager());\n\n            case 7:\n              payload = _context2.sent;\n              dispatch({\n                type: 'ACTIVATE',\n                payload: payload\n              });\n              _context2.next = 16;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](4);\n              console.log('Falling back to Simulated');\n              _payload = new _simulated.SimulatedHealthManager();\n              dispatch({\n                type: 'ACTIVATE',\n                payload: _payload\n              });\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[4, 11]], Promise);\n    };\n\n    initManager();\n  }, [state.healthManager]);\n  (0, _react.useEffect)(function () {\n    if (state.device) {\n      navigation.navigate(_types.CONSTANTS.Screens.INSIGHT_SCREEN);\n    }\n  }, [state.device]);\n  (0, _react.useEffect)(function () {\n    var resetManager = function resetManager() {\n      scanInProgress.current = false;\n      dispatch({\n        type: 'UNACTIVATE',\n        payload: null\n      });\n    };\n\n    return resetManager;\n  }, [dispatch]);\n\n  if (!state.healthManager || !devices) {\n    return _react.default.createElement(_utils.Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return _react.default.createElement(_reactNative.View, {\n    style: style.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, scanning ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.View, {\n    style: {\n      marginTop: 20,\n      marginHorizontal: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_utils.GetConnectedHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  })), _react.default.createElement(_reactNative.View, {\n    style: style.scan,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNativePaper.ActivityIndicator, {\n    size: \"large\",\n    style: {\n      marginVertical: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }), _react.default.createElement(_typography.Headline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }, simulated ? 'Getting simulated devices...' : 'Searching for devices...'), _react.default.createElement(SimulatedButton, {\n    refresh: refresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }))) : _react.default.createElement(_react.default.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 27\n    }\n  }, _react.default.createElement(DeviceList, {\n    devices: devices,\n    refresh: refresh,\n    connect: connect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  })), _react.default.createElement(_footer.Footer, {\n    text: \"During this step, the phone is scanning for BLE devices set to pairing mode.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }));\n}\n\nfunction Device(props) {\n  var connect = props.connect,\n      device = props.device;\n  return _react.default.createElement(_reactNative.View, {\n    style: _objectSpread(_objectSpread({\n      flexDirection: 'row',\n      alignItems: 'center',\n      height: 65,\n      marginHorizontal: 16,\n      marginVertical: 5,\n      padding: 20\n    }, _styles.default.elevated), {}, {\n      backgroundColor: 'white'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {\n    style: {\n      flexDirection: 'column',\n      justifyContent: 'center'\n    },\n    onPress: function onPress() {\n      return connect(device.id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_typography.Name, {\n    style: _styles.default.itemName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, device.name.length > MAX_NAME_LENGTH ? device.name.substring(0, MAX_NAME_LENGTH - 3) + '...' : device.name), _react.default.createElement(_typography.Detail, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }, device.type === 'simulated' ? SIMULATED : REAL)), _react.default.createElement(_reactNative.View, {\n    style: {\n      flex: 1,\n      alignItems: 'flex-end'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, device.paired ? null : _react.default.createElement(_typography.Action, {\n    style: {\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 41\n    }\n  }, \"PAIR\")));\n}\n\nfunction DeviceList(props) {\n  var _this = this;\n\n  var _useState5 = (0, _react.useState)(false),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      refreshing = _useState6[0],\n      setRefreshing = _useState6[1];\n\n  var devices = props.devices,\n      refresh = props.refresh,\n      connect = props.connect;\n\n  if (devices.length == 0) {\n    return _react.default.createElement(NotFound, {\n      retry: refresh,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }\n    });\n  }\n\n  return _react.default.createElement(_reactNative.View, {\n    style: {\n      flex: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(Counter, {\n    value: devices.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(_reactNative.ScrollView, {\n    style: {\n      flex: 1\n    },\n    refreshControl: _react.default.createElement(_reactNative.RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: function onRefresh() {\n        setRefreshing(true);\n        refresh();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, devices.map(function (device) {\n    return _react.default.createElement(Device, {\n      key: device.id,\n      device: device,\n      connect: connect,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 28\n      }\n    });\n  })));\n}\n\nfunction Counter(props) {\n  return _react.default.createElement(_reactNative.View, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNativePaper.IconButton, {\n    icon: \"bluetooth\",\n    size: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: {\n      flexDirection: 'column'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_typography.Headline, {\n    style: _styles.default.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }, MY_DEVICE), _react.default.createElement(_typography.Detail, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }, (props.value && props.value > 0 ? props.value : 'No') + \" devices found\")));\n}\n\nfunction NotFound(props) {\n  return _react.default.createElement(_reactNative.View, {\n    style: {\n      flex: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: _styles.default.centerFragment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNativePaper.IconButton, {\n    icon: \"alert\",\n    size: 60,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  })), _react.default.createElement(_reactNative.View, {\n    style: _objectSpread(_objectSpread({}, _styles.default.centerFragment), {\n      justifyContent: 'space-evenly',\n      marginHorizontal: 20\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_typography.CPMText, {\n    style: _styles.default.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, NOT_FOUND_TITLE), _react.default.createElement(_typography.CPMText, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }, NOT_FOUND_TEXT)), _react.default.createElement(_reactNative.View, {\n    style: _styles.default.centerFragment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNativePaper.Button, {\n    mode: \"contained\",\n    style: _objectSpread(_objectSpread({}, _styles.default.centeredButton), _styles.default.elevated),\n    onPress: props.retry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_typography.CPMText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 131\n    }\n  }, \"TRY AGAIN\")), _react.default.createElement(SimulatedButton, {\n    refresh: props.retry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }\n  })));\n}\n\nfunction SimulatedButton(props) {\n  var _useContext2 = (0, _react.useContext)(_config.ConfigContext),\n      state = _useContext2.state,\n      dispatch = _useContext2.dispatch;\n\n  var simulated = (0, _bluetoothHooks.isSimulated)();\n  (0, _react.useEffect)(function () {\n    if (state.healthManager instanceof _simulated.SimulatedHealthManager) {\n      props.refresh();\n    }\n  }, [state.healthManager]);\n  return _react.default.createElement(_buttons.CPMButton, {\n    mode: \"contained\",\n    style: _objectSpread(_objectSpread(_objectSpread({}, _styles.default.centeredButton), _styles.default.elevated), {}, {\n      display: simulated ? 'none' : 'flex'\n    }),\n    onPress: function onPress() {\n      var currentManager = state.healthManager;\n      currentManager == null ? void 0 : currentManager.stopScan();\n      var simManager = new _simulated.SimulatedHealthManager();\n      dispatch({\n        type: 'ACTIVATE',\n        payload: simManager\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, \"USE SIMULATED DEVICES\");\n}\n\nvar style = _reactNative.StyleSheet.create({\n  container: {\n    flex: 4\n  },\n  scan: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/screens/devices.tsx"],"names":["SEARCH","NOT_FOUND_TITLE","NOT_FOUND_TEXT","SIMULATED","REAL","MY_DEVICE","MAX_NAME_LENGTH","startScanProcess","manager","onDeviceFound","onStop","timeout","startScan","SimulatedHealthManager","setTimeout","stopScan","Devices","navigation","ConfigContext","state","dispatch","scanning","setScanning","devices","setDevices","simulated","scanInProgress","refresh","healthManager","device","current","find","d","id","connect","deviceId","console","log","dev","fetch","centralClient","addListener","DATA_AVAILABLE_EVENT","sendTelemetryData","bind","type","payload","initManager","BleManager","GetManager","navigate","CONSTANTS","Screens","INSIGHT_SCREEN","resetManager","style","container","marginTop","marginHorizontal","scan","marginVertical","Device","props","flexDirection","alignItems","height","padding","DefaultStyles","elevated","backgroundColor","justifyContent","itemName","name","length","substring","flex","paired","fontWeight","DeviceList","refreshing","setRefreshing","map","Counter","header","value","NotFound","centerFragment","textAlign","centeredButton","retry","SimulatedButton","display","currentManager","simManager","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react';\r\nimport { View, ScrollView, StyleSheet, RefreshControl } from \"react-native\";\r\nimport { Button, Text, IconButton, ActivityIndicator } from 'react-native-paper';\r\nimport { Footer } from '../components/footer';\r\nimport DefaultStyles from '../styles';\r\nimport { Detail, Headline, Action, Name, CPMText } from '../components/typography';\r\nimport { NavigationProperty, CONSTANTS } from '../types';\r\nimport { TouchableOpacity } from 'react-native-gesture-handler';\r\nimport { useNavigation, useIsFocused } from '@react-navigation/native';\r\nimport { ConfigContext } from '../contexts/config';\r\nimport { IHealthDevice, IHealthManager } from '../models';\r\nimport { Loading, GetConnectedHeader } from '../components/utils';\r\nimport { BleManager, DATA_AVAILABLE_EVENT } from '../health/ble';\r\nimport { SimulatedHealthManager } from '../health/simulated';\r\nimport { useHeaderTitle } from '../hooks/common';\r\nimport { CPMButton } from '../components/buttons';\r\nimport { isSimulated } from '../hooks/bluetoothHooks';\r\nimport { sendTelemetryData } from '../api/central';\r\n\r\nconst SEARCH = 'SEARCH FOR DEVICES';\r\nconst NOT_FOUND_TITLE = 'Device could not be located';\r\nconst NOT_FOUND_TEXT = 'Make sure your bluetooth is enabled and available for pairing or use a simulated device.';\r\nconst SIMULATED = 'Simulated';\r\nconst REAL = '';\r\nconst MY_DEVICE = 'My devices';\r\n\r\n// on iOS some devices have no name so the uuid is shown. \r\n// this can be quite long and text may overlap other fields.\r\n// put ellipsis for the text\r\nconst MAX_NAME_LENGTH = 30;\r\n\r\ntype ConnectFunction = (deviceId: string) => void\r\n\r\nfunction startScanProcess(manager: IHealthManager, onDeviceFound: (device: IHealthDevice) => void, onStop: () => void) {\r\n    let timeout = 10000;\r\n    manager.startScan(onDeviceFound);\r\n    if (manager instanceof SimulatedHealthManager) {\r\n        timeout = 3000;\r\n    }\r\n    setTimeout(() => {\r\n        manager.stopScan();\r\n        onStop();\r\n    }, timeout);\r\n}\r\n\r\n\r\n\r\nexport default function Devices() {\r\n    const navigation = useNavigation<NavigationProperty>();\r\n    const { state, dispatch } = useContext(ConfigContext);\r\n    const [scanning, setScanning] = useState(false);\r\n    const [devices, setDevices] = useState<IHealthDevice[] | null>(null);\r\n    const simulated = isSimulated();\r\n\r\n    useHeaderTitle('Devices');\r\n\r\n    // If true, scan is in progress and focused, component is mounted and devices can be added.\r\n    // If false, scanning asynchronous task will not add devices to the component as is unmounted\r\n    const scanInProgress = useRef(true);\r\n\r\n    const refresh = function () {\r\n        setDevices([]);\r\n        setScanning(true);\r\n        startScanProcess(state.healthManager as IHealthManager, (device: IHealthDevice) => {\r\n            if (scanInProgress.current) {\r\n                setDevices(current => {\r\n                    if (!current) {\r\n                        return [];\r\n                    }\r\n                    if (current.find(d => d.id === device.id)) {\r\n                        return current;\r\n                    }\r\n                    return [...current, device]\r\n                });\r\n            }\r\n        }, () => {\r\n            if (scanInProgress.current) {\r\n                setScanning(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    const connect = async function (deviceId: string) {\r\n        if (!state.healthManager) {\r\n            console.log(`No Health manager available`);\r\n            return;\r\n        }\r\n        const dev = await state.healthManager.connect(deviceId);\r\n        await dev.fetch();\r\n        if (state.centralClient) {\r\n            dev.addListener(DATA_AVAILABLE_EVENT, sendTelemetryData.bind(null, state.centralClient, dev.type === 'real'));\r\n        }\r\n        dispatch({\r\n            type: 'HEALTH_CONNECT',\r\n            payload: dev\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Run when screen mounts. Initializes the HealthManager\r\n     *\r\n     */\r\n    useEffect(() => {\r\n        const initManager = async () => {\r\n            if (state.healthManager) {\r\n                refresh();\r\n            }\r\n            else {\r\n                try {\r\n                    const payload = await BleManager.GetManager();\r\n                    dispatch({\r\n                        type: 'ACTIVATE',\r\n                        payload\r\n                    });\r\n                } catch (ex) {\r\n                    // Running on simulator or device without a bluetooth adapter\r\n                    console.log('Falling back to Simulated');\r\n                    const payload = new SimulatedHealthManager();\r\n                    dispatch({\r\n                        type: 'ACTIVATE',\r\n                        payload\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        initManager();\r\n    }, [state.healthManager]);\r\n\r\n    useEffect(() => {\r\n        if (state.device) {\r\n            // device has been selected. navigate to insight\r\n            navigation.navigate(CONSTANTS.Screens.INSIGHT_SCREEN);\r\n        }\r\n    }, [state.device])\r\n\r\n    /**\r\n     * cleanup function. run when going back to previous screen\r\n     */\r\n    useEffect(() => {\r\n        const resetManager = () => {\r\n            scanInProgress.current = false;\r\n            dispatch({\r\n                type: 'UNACTIVATE',\r\n                payload: null\r\n            });\r\n        };\r\n        return resetManager;\r\n    }, [dispatch]);\r\n\r\n    if (!state.healthManager || !devices) {\r\n        return <Loading />\r\n    }\r\n\r\n    return (<View style={style.container}>\r\n        {scanning ? <>\r\n            <View style={{\r\n                marginTop: 20,\r\n                marginHorizontal: 10\r\n            }}>\r\n                <GetConnectedHeader />\r\n            </View>\r\n            <View style={style.scan}>\r\n                <ActivityIndicator size='large' style={{ marginVertical: 30 }} />\r\n                <Headline>{simulated ? 'Getting simulated devices...' : 'Searching for devices...'}</Headline>\r\n                <SimulatedButton refresh={refresh} />\r\n            </View></> : (<React.Fragment>\r\n                <DeviceList devices={devices} refresh={refresh} connect={connect} />\r\n            </React.Fragment>\r\n            )}\r\n        <Footer text='During this step, the phone is scanning for BLE devices set to pairing mode.' />\r\n    </View>);\r\n}\r\n\r\nfunction Device(props: { device: IHealthDevice, connect: (deviceId: string) => Promise<void> }) {\r\n    const { connect, device } = props;\r\n    return (\r\n        <View style={{ flexDirection: 'row', alignItems: 'center', height: 65, marginHorizontal: 16, marginVertical: 5, padding: 20, ...DefaultStyles.elevated, backgroundColor: 'white' }}>\r\n            <TouchableOpacity style={{ flexDirection: 'column', justifyContent: 'center' }}\r\n                onPress={() => connect(device.id)}>\r\n                <Name style={DefaultStyles.itemName}>{((device.name).length > MAX_NAME_LENGTH) ?\r\n                    (((device.name).substring(0, MAX_NAME_LENGTH - 3)) + '...') :\r\n                    device.name}</Name>\r\n                <Detail>{device.type === 'simulated' ? SIMULATED : REAL}</Detail>\r\n            </TouchableOpacity>\r\n            <View style={{\r\n                flex: 1,\r\n                alignItems: 'flex-end'\r\n            }}>\r\n                {device.paired ? null : <Action style={{ fontWeight: 'bold' }}>PAIR</Action>}\r\n            </View>\r\n        </View>)\r\n}\r\n\r\nfunction DeviceList(props: { devices: IHealthDevice[], connect: (deviceId: string) => Promise<void>, refresh: () => void }) {\r\n    const [refreshing, setRefreshing] = useState(false);\r\n    const { devices, refresh, connect } = props;\r\n    if (devices.length == 0) {\r\n        return (<NotFound retry={refresh} />);\r\n    }\r\n    return (\r\n        <View style={{ flex: 4 }}>\r\n            <Counter value={devices.length} />\r\n            <ScrollView style={{ flex: 1 }}\r\n                refreshControl={\r\n                    <RefreshControl refreshing={refreshing} onRefresh={() => {\r\n                        setRefreshing(true);\r\n                        refresh();\r\n                        // Hack! No need to restore refreshing state to false since\r\n                        // component will be unmounted by the end of the scan process\r\n                    }} />\r\n                }\r\n            >\r\n                {devices.map(device => {\r\n                    return <Device key={device.id} device={device} connect={connect} />\r\n                })}\r\n            </ScrollView>\r\n        </View>)\r\n}\r\n\r\nfunction Counter(props: { value: number }) {\r\n    return (<View style={{ flexDirection: 'row', alignItems: 'center', padding: 10 }}>\r\n        <IconButton icon='bluetooth' size={30} />\r\n        <View style={{ flexDirection: 'column' }}>\r\n            <Headline style={DefaultStyles.header}>{MY_DEVICE}</Headline>\r\n            <Detail>{`${props.value && props.value > 0 ? props.value : 'No'} devices found`}</Detail>\r\n        </View>\r\n    </View>)\r\n}\r\n\r\nfunction NotFound(props: { retry: () => void }) {\r\n    return (<View style={{ flex: 4 }}>\r\n        <View style={DefaultStyles.centerFragment}>\r\n            <IconButton icon='alert' size={60} />\r\n        </View>\r\n        <View style={{ ...DefaultStyles.centerFragment, ...{ justifyContent: 'space-evenly', marginHorizontal: 20 } }}>\r\n            <CPMText style={DefaultStyles.header}>{NOT_FOUND_TITLE}</CPMText>\r\n            <CPMText style={{ textAlign: 'center' }}>{NOT_FOUND_TEXT}</CPMText>\r\n        </View>\r\n        <View style={DefaultStyles.centerFragment}>\r\n            <Button mode='contained' style={{ ...DefaultStyles.centeredButton, ...DefaultStyles.elevated }} onPress={props.retry}><CPMText>TRY AGAIN</CPMText></Button>\r\n            <SimulatedButton refresh={props.retry} />\r\n        </View>\r\n    </View>)\r\n}\r\n\r\nfunction SimulatedButton(props: { refresh: () => void }) {\r\n    const { state, dispatch } = useContext(ConfigContext);\r\n    const simulated = isSimulated();\r\n\r\n    useEffect(() => {\r\n        if (state.healthManager instanceof SimulatedHealthManager) {\r\n            props.refresh(); // cleans up device list and start populating\r\n        }\r\n    }, [state.healthManager]);\r\n\r\n    return (<CPMButton mode='contained' style={{ ...DefaultStyles.centeredButton, ...DefaultStyles.elevated, display: (simulated ? 'none' : 'flex') }} onPress={() => {\r\n        const currentManager = state.healthManager;\r\n        currentManager?.stopScan();\r\n        const simManager = new SimulatedHealthManager();\r\n        dispatch({\r\n            type: 'ACTIVATE',\r\n            payload: simManager\r\n        });\r\n    }}>USE SIMULATED DEVICES</CPMButton>)\r\n}\r\n\r\n\r\nconst style = StyleSheet.create({\r\n    container: {\r\n        flex: 4\r\n    },\r\n    scan: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n})"]},"metadata":{},"sourceType":"script"}