{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPriority = exports.LogLevel = exports.State = exports.ScanCallbackType = exports.ScanMode = void 0;\n\nvar _BleError = require(\"./BleError\");\n\nvar ScanMode = {\n  Opportunistic: -1,\n  LowPower: 0,\n  Balanced: 1,\n  LowLatency: 2\n};\nexports.ScanMode = ScanMode;\nvar ScanCallbackType = {\n  AllMatches: 1,\n  FirstMatch: 2,\n  MatchLost: 4\n};\nexports.ScanCallbackType = ScanCallbackType;\nvar State = {\n  Unknown: 'Unknown',\n  Resetting: 'Resetting',\n  Unsupported: 'Unsupported',\n  Unauthorized: 'Unauthorized',\n  PoweredOff: 'PoweredOff',\n  PoweredOn: 'PoweredOn'\n};\nexports.State = State;\nvar LogLevel = {\n  None: 'None',\n  Verbose: 'Verbose',\n  Debug: 'Debug',\n  Info: 'Info',\n  Warning: 'Warning',\n  Error: 'Error'\n};\nexports.LogLevel = LogLevel;\nvar ConnectionPriority = {\n  Balanced: 0,\n  High: 1,\n  LowPower: 2\n};\nexports.ConnectionPriority = ConnectionPriority;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-ble-plx/src/TypeDefinition.js"],"names":["ScanMode","Opportunistic","LowPower","Balanced","LowLatency","ScanCallbackType","AllMatches","FirstMatch","MatchLost","State","Unknown","Resetting","Unsupported","Unauthorized","PoweredOff","PoweredOn","LogLevel","None","Verbose","Debug","Info","Warning","Error","ConnectionPriority","High"],"mappings":"AACA;;;;;;;AAGA;;AAqGO,IAAMA,QAAQ,GAAG;AAKtBC,EAAAA,aAAa,EAAE,CAAC,CALM;AAWtBC,EAAAA,QAAQ,EAAE,CAXY;AAiBtBC,EAAAA,QAAQ,EAAE,CAjBY;AAuBtBC,EAAAA,UAAU,EAAE;AAvBU,CAAjB;;AA8BA,IAAMC,gBAAgB,GAAG;AAK9BC,EAAAA,UAAU,EAAE,CALkB;AAW9BC,EAAAA,UAAU,EAAE,CAXkB;AAiB9BC,EAAAA,SAAS,EAAE;AAjBmB,CAAzB;;AA2FA,IAAMC,KAAK,GAAG;AAInBC,EAAAA,OAAO,EAAE,SAJU;AAQnBC,EAAAA,SAAS,EAAE,WARQ;AAYnBC,EAAAA,WAAW,EAAE,aAZM;AAgBnBC,EAAAA,YAAY,EAAE,cAhBK;AAoBnBC,EAAAA,UAAU,EAAE,YApBO;AAwBnBC,EAAAA,SAAS,EAAE;AAxBQ,CAAd;;AA+BA,IAAMC,QAAQ,GAAG;AAItBC,EAAAA,IAAI,EAAE,MAJgB;AAQtBC,EAAAA,OAAO,EAAE,SARa;AAYtBC,EAAAA,KAAK,EAAE,OAZe;AAgBtBC,EAAAA,IAAI,EAAE,MAhBgB;AAoBtBC,EAAAA,OAAO,EAAE,SApBa;AAwBtBC,EAAAA,KAAK,EAAE;AAxBe,CAAjB;;AA+BA,IAAMC,kBAAkB,GAAG;AAIhCpB,EAAAA,QAAQ,EAAE,CAJsB;AAQhCqB,EAAAA,IAAI,EAAE,CAR0B;AAYhCtB,EAAAA,QAAQ,EAAE;AAZsB,CAA3B","sourcesContent":["// @flow\n'use strict'\n\nimport type { Device } from './Device'\nimport { BleErrorCode } from './BleError'\n\n/**\n * Bluetooth device id.\n */\nexport type DeviceId = string\n\n/**\n * Unique identifier for BLE objects.\n */\nexport type Identifier = number\n\n/**\n * Bluetooth UUID\n */\nexport type UUID = string\n\n/**\n * Base64 value\n */\nexport type Base64 = string\n\n/**\n * Transaction identifier. All transaction identifiers in numeric form are reserved for internal use.\n */\nexport type TransactionId = string\n\n/**\n * [Android only] ConnectionOptions parameter to describe when to call BluetoothGatt.refresh()\n */\nexport type RefreshGattMoment = 'OnConnected'\n\n/**\n * Subscription\n * @interface\n */\nexport interface Subscription {\n  /**\n   * Removes subscription\n   * @memberof Subscription\n   * @ignore\n   */\n  remove(): void;\n}\n\n/**\n * Type of error code mapping table\n */\nexport type BleErrorCodeMessageMapping = { [$Values<typeof BleErrorCode>]: string }\n\n/**\n * Options which can be passed to when creating BLE Manager\n */\nexport interface BleManagerOptions {\n  /**\n   * BLE State restoration identifier used to restore state.\n   * @memberof BleManagerOptions\n   * @instance\n   */\n  restoreStateIdentifier?: string;\n\n  /**\n   * Optional function which is used to properly restore state of your BLE Manager. Callback\n   * is emitted in the beginning of BleManager creation and optional {@link BleRestoreState}\n   * is passed. When value is `null` application is launching for the first time, otherwise\n   * it contains saved state which may be used by developer to continue working with\n   * connected peripherals.\n   * @memberof BleManagerOptions\n   * @instance\n   */\n  restoreStateFunction?: (restoredState: ?BleRestoredState) => void;\n\n  /**\n   * Optional mapping of error codes to error messages. Uses {@link BleErrorCodeMessage}\n   * by default.\n   *\n   * To override logging UUIDs or MAC adresses in error messages copy the original object\n   * and overwrite values of interest to you.\n   *\n   * @memberof BleManagerOptions\n   * @instance\n   */\n  errorCodesToMessagesMapping?: BleErrorCodeMessageMapping;\n}\n\n/**\n * Object representing information about restored BLE state after application relaunch.\n */\nexport interface BleRestoredState {\n  /**\n   * List of connected devices after state restoration.\n   * @type {Array<Device>}\n   * @instance\n   * @memberof BleRestoredState\n   */\n  connectedPeripherals: Array<Device>;\n}\n\n/**\n * Scan mode for Bluetooth LE scan.\n */\nexport const ScanMode = {\n  /**\n   * A special Bluetooth LE scan mode. Applications using this scan mode will passively listen for\n   * other scan results without starting BLE scans themselves.\n   */\n  Opportunistic: -1,\n\n  /**\n   * Perform Bluetooth LE scan in low power mode. This is the default scan mode as it consumes the\n   * least power. [default value]\n   */\n  LowPower: 0,\n\n  /**\n   * Perform Bluetooth LE scan in balanced power mode. Scan results are returned at a rate that\n   * provides a good trade-off between scan frequency and power consumption.\n   */\n  Balanced: 1,\n\n  /**\n   * Scan using highest duty cycle. It's recommended to only use this mode when the application is\n   * running in the foreground.\n   */\n  LowLatency: 2\n}\n\n/**\n * Scan callback type for Bluetooth LE scan.\n * @name ScanCallbackType\n */\nexport const ScanCallbackType = {\n  /**\n   * Trigger a callback for every Bluetooth advertisement found that matches the filter criteria.\n   * If no filter is active, all advertisement packets are reported. [default value]\n   */\n  AllMatches: 1,\n\n  /**\n   * A result callback is only triggered for the first advertisement packet received that matches\n   * the filter criteria.\n   */\n  FirstMatch: 2,\n\n  /**\n   * Receive a callback when advertisements are no longer received from a device that has been\n   * previously reported by a first match callback.\n   */\n  MatchLost: 4\n}\n\n/**\n * Options which can be passed to scanning function\n * @name ScanOptions\n */\nexport interface ScanOptions {\n  /**\n   * By allowing duplicates scanning records are received more frequently [iOS only]\n   * @memberof ScanOptions\n   * @instance\n   */\n  allowDuplicates?: boolean;\n\n  /**\n   * Scan mode for Bluetooth LE scan [Android only]\n   * @memberof ScanOptions\n   * @instance\n   */\n  scanMode?: $Values<typeof ScanMode>;\n\n  /**\n   * Scan callback type for Bluetooth LE scan [Android only]\n   * @memberof ScanOptions\n   * @instance\n   */\n  callbackType?: $Values<typeof ScanCallbackType>;\n}\n\n/**\n * Connection specific options to be passed before connection happen. [Not used]\n */\nexport interface ConnectionOptions {\n  /**\n   * Whether to directly connect to the remote device (false) or to automatically connect as soon as the remote device\n   * becomes available (true). [Android only]\n   * @memberof ConnectionOptions\n   * @instance\n   */\n  autoConnect?: boolean;\n\n  /**\n   * Whether MTU size will be negotiated to this value. It is not guaranteed to get it after connection is successful.\n   *\n   * @memberof ConnectionOptions\n   * @instance\n   */\n  requestMTU?: number;\n\n  /**\n   * Whether action will be taken to reset services cache. This option may be useful when a peripheral's firmware was\n   * updated and it's services/characteristics were added/removed/altered. [Android only]\n   * {@link https://stackoverflow.com/questions/22596951/how-to-programmatically-force-bluetooth-low-energy-service-discovery-on-android}\n   * @memberof ConnectionOptions\n   * @instance\n   */\n  refreshGatt?: RefreshGattMoment;\n\n  /**\n   * Number of milliseconds after connection is automatically timed out. In case of race condition were connection is\n   * established right after timeout event, device will be disconnected immediately. Time out may happen earlier then\n   * specified due to OS specific behavior.\n   *\n   * @memberof ConnectionOptions\n   * @instance\n   */\n  timeout?: number;\n}\n\n/**\n * Device Bluetooth Low Energy state. It's keys are used to check {@link #blemanagerstate} values\n * received by {@link BleManager}\n */\nexport const State = {\n  /**\n   * The current state of the manager is unknown; an update is imminent.\n   */\n  Unknown: 'Unknown',\n  /**\n   * The connection with the system service was momentarily lost; an update is imminent.\n   */\n  Resetting: 'Resetting',\n  /**\n   * The platform does not support Bluetooth low energy.\n   */\n  Unsupported: 'Unsupported',\n  /**\n   * The app is not authorized to use Bluetooth low energy.\n   */\n  Unauthorized: 'Unauthorized',\n  /**\n   * Bluetooth is currently powered off.\n   */\n  PoweredOff: 'PoweredOff',\n  /**\n   * Bluetooth is currently powered on and available to use.\n   */\n  PoweredOn: 'PoweredOn'\n}\n\n/**\n * Native module logging log level. By default it is set to None.\n * @name LogLevel\n */\nexport const LogLevel = {\n  /**\n   * Logging in native module is disabled\n   */\n  None: 'None',\n  /**\n   * All logs in native module are shown\n   */\n  Verbose: 'Verbose',\n  /**\n   * Only debug logs and of higher importance are shown in native module.\n   */\n  Debug: 'Debug',\n  /**\n   * Only info logs and of higher importance are shown in native module.\n   */\n  Info: 'Info',\n  /**\n   * Only warning logs and of higher importance are shown in native module.\n   */\n  Warning: 'Warning',\n  /**\n   * Only error logs and of higher importance are shown in native module.\n   */\n  Error: 'Error'\n}\n\n/**\n * Connection priority of BLE link determining the balance between power consumption and data throughput.\n * @name ConnectionPriority\n */\nexport const ConnectionPriority = {\n  /**\n   * Default, recommended option balanced between power consumption and data throughput.\n   */\n  Balanced: 0,\n  /**\n   * High priority, low latency connection, which increases transfer speed at the expense of power consumption.\n   */\n  High: 1,\n  /**\n   * Low power, reduced data rate connection setup.\n   */\n  LowPower: 2\n}\n"]},"metadata":{},"sourceType":"script"}