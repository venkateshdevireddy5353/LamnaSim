{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalize = normalize;\nexports.camelToName = camelToName;\nexports.snakeToName = snakeToName;\nexports.dottedToName = dottedToName;\nexports.bleToIoTCName = bleToIoTCName;\n\nvar _reactNative = require(\"react-native\");\n\nvar _Dimensions$get = _reactNative.Dimensions.get('window'),\n    SCREEN_WIDTH = _Dimensions$get.width,\n    SCREEN_HEIGHT = _Dimensions$get.height;\n\nvar scale = SCREEN_WIDTH / 350;\n\nfunction normalize(size) {\n  var newSize = size * scale;\n\n  if (_reactNative.Platform.OS === 'ios') {\n    return Math.round(_reactNative.PixelRatio.roundToNearestPixel(newSize)) - 1;\n  } else {\n    return Math.round(_reactNative.PixelRatio.roundToNearestPixel(newSize)) - 2;\n  }\n}\n\nfunction camelToName(text) {\n  return text.replace(/([A-Z])/g, ' $1').replace(/^./, function (str) {\n    return str.toUpperCase();\n  });\n}\n\nfunction snakeToName(text) {\n  return text.toLowerCase().replace(/([_])/g, ' ').replace(/^./, function (str) {\n    return str.toUpperCase();\n  });\n}\n\nfunction dottedToName(text) {\n  return text.toLowerCase().replace(/([.])/g, ' ').replace(/^./, function (str) {\n    return str.toUpperCase();\n  });\n}\n\nfunction bleToIoTCName(text) {\n  return text.replace(/[-]/g, '').replace(/^./, function (str) {\n    return \"ble\" + str;\n  });\n}","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/utils.ts"],"names":["Dimensions","get","SCREEN_WIDTH","width","SCREEN_HEIGHT","height","scale","normalize","size","newSize","Platform","OS","Math","round","PixelRatio","roundToNearestPixel","camelToName","text","replace","str","toUpperCase","snakeToName","toLowerCase","dottedToName","bleToIoTCName"],"mappings":";;;;;;;;;AAAA;;AAEA,sBAGIA,wBAAWC,GAAX,CAAe,QAAf,CAHJ;AAAA,IACWC,YADX,mBACIC,KADJ;AAAA,IAEYC,aAFZ,mBAEIC,MAFJ;;AAMA,IAAMC,KAAK,GAAGJ,YAAY,GAAG,GAA7B;;AAEO,SAASK,SAAT,CAAmBC,IAAnB,EAAiC;AACpC,MAAMC,OAAO,GAAGD,IAAI,GAAGF,KAAvB;;AACA,MAAII,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACvB,WAAOC,IAAI,CAACC,KAAL,CAAWC,wBAAWC,mBAAX,CAA+BN,OAA/B,CAAX,IAAsD,CAA7D;AACH,GAFD,MAEO;AACH,WAAOG,IAAI,CAACC,KAAL,CAAWC,wBAAWC,mBAAX,CAA+BN,OAA/B,CAAX,IAAsD,CAA7D;AACH;AACJ;;AAEM,SAASO,WAAT,CAAqBC,IAArB,EAA2C;AAC9C,SAAOA,IAAI,CAENC,OAFE,CAEM,UAFN,EAEkB,KAFlB,EAIFA,OAJE,CAIM,IAJN,EAIY,UAAUC,GAAV,EAAe;AAAE,WAAOA,GAAG,CAACC,WAAJ,EAAP;AAA2B,GAJxD,CAAP;AAKH;;AAEM,SAASC,WAAT,CAAqBJ,IAArB,EAA2C;AAC9C,SAAOA,IAAI,CAACK,WAAL,GAEFJ,OAFE,CAEM,QAFN,EAEgB,GAFhB,EAIFA,OAJE,CAIM,IAJN,EAIY,UAAUC,GAAV,EAAe;AAAE,WAAOA,GAAG,CAACC,WAAJ,EAAP;AAA2B,GAJxD,CAAP;AAKH;;AAEM,SAASG,YAAT,CAAsBN,IAAtB,EAA4C;AAC/C,SAAOA,IAAI,CAACK,WAAL,GAEFJ,OAFE,CAEM,QAFN,EAEgB,GAFhB,EAIFA,OAJE,CAIM,IAJN,EAIY,UAAUC,GAAV,EAAe;AAAE,WAAOA,GAAG,CAACC,WAAJ,EAAP;AAA2B,GAJxD,CAAP;AAKH;;AAEM,SAASI,aAAT,CAAuBP,IAAvB,EAA6C;AAChD,SAAOA,IAAI,CAACC,OAAL,CAAa,MAAb,EAAqB,EAArB,EAAyBA,OAAzB,CAAiC,IAAjC,EAAuC,UAAUC,GAAV,EAAe;AAAE,mBAAaA,GAAb;AAAqB,GAA7E,CAAP;AACH","sourcesContent":["import { Dimensions, Platform, PixelRatio } from \"react-native\";\r\n\r\nconst {\r\n    width: SCREEN_WIDTH,\r\n    height: SCREEN_HEIGHT,\r\n} = Dimensions.get('window');\r\n\r\n// based on iphone 5s's scale\r\nconst scale = SCREEN_WIDTH / 350;\r\n\r\nexport function normalize(size: number) {\r\n    const newSize = size * scale\r\n    if (Platform.OS === 'ios') {\r\n        return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 1\r\n    } else {\r\n        return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\r\n    }\r\n}\r\n\r\nexport function camelToName(text: string): string {\r\n    return text\r\n        // insert a space before all caps\r\n        .replace(/([A-Z])/g, ' $1')\r\n        // uppercase the first character\r\n        .replace(/^./, function (str) { return str.toUpperCase(); })\r\n}\r\n\r\nexport function snakeToName(text: string): string {\r\n    return text.toLowerCase()\r\n        // insert a space for every underscore\r\n        .replace(/([_])/g, ' ')\r\n        // uppercase the first character\r\n        .replace(/^./, function (str) { return str.toUpperCase(); })\r\n}\r\n\r\nexport function dottedToName(text: string): string {\r\n    return text.toLowerCase()\r\n        // insert a space for every underscore\r\n        .replace(/([.])/g, ' ')\r\n        // uppercase the first character\r\n        .replace(/^./, function (str) { return str.toUpperCase(); })\r\n}\r\n\r\nexport function bleToIoTCName(text: string): string {\r\n    return text.replace(/[-]/g, '').replace(/^./, function (str) { return `ble${str}`; });\r\n}"]},"metadata":{},"sourceType":"script"}