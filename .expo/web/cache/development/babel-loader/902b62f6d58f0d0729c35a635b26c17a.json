{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ConfigContext = exports.configReducer = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\venkatesh.devireddy\\\\Projects\\\\IoT_Central_CPM\\\\src\\\\contexts\\\\config.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar configReducer = function configReducer(state, action) {\n  switch (action.type) {\n    case 'CONNECT':\n    case 'DISCONNECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        centralClient: action.payload\n      });\n\n    case 'HEALTH_CONNECT':\n    case 'HEALTH_DISCONNECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        device: action.payload\n      });\n\n    case 'ACTIVATE':\n    case 'UNACTIVATE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        healthManager: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexports.configReducer = configReducer;\nvar initialState = {\n  device: null,\n  centralClient: undefined,\n  healthManager: null,\n  insightUpdate: null\n};\n\nvar ConfigContext = _react.default.createContext({\n  state: initialState,\n  dispatch: function dispatch() {}\n});\n\nexports.ConfigContext = ConfigContext;\nvar Provider = ConfigContext.Provider;\n\nvar ConfigProvider = function ConfigProvider(_ref) {\n  var children = _ref.children;\n\n  var _useReducer = (0, _react.useReducer)(configReducer, initialState),\n      _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  return _react.default.createElement(Provider, {\n    value: {\n      state: state,\n      dispatch: dispatch\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, children);\n};\n\nvar _default = ConfigProvider;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/contexts/config.tsx"],"names":["configReducer","state","action","type","centralClient","payload","device","healthManager","initialState","undefined","insightUpdate","ConfigContext","React","createContext","dispatch","Provider","ConfigProvider","children"],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;AAmCO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAsBC,MAAtB,EAAgD;AACzE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,SAAL;AACA,SAAK,YAAL;AACI,6CAAYF,KAAZ;AAAmBG,QAAAA,aAAa,EAAEF,MAAM,CAACG;AAAzC;;AACJ,SAAK,gBAAL;AACA,SAAK,mBAAL;AACI,6CAAYJ,KAAZ;AAAmBK,QAAAA,MAAM,EAAEJ,MAAM,CAACG;AAAlC;;AACJ,SAAK,UAAL;AACA,SAAK,YAAL;AACI,6CAAYJ,KAAZ;AAAmBM,QAAAA,aAAa,EAAEL,MAAM,CAACG;AAAzC;;AACJ;AACI,aAAOJ,KAAP;AAXR;AAaH,CAdM;;;AAiBP,IAAMO,YAA0B,GAAG;AAC/BF,EAAAA,MAAM,EAAE,IADuB;AAE/BF,EAAAA,aAAa,EAAEK,SAFgB;AAG/BF,EAAAA,aAAa,EAAE,IAHgB;AAI/BG,EAAAA,aAAa,EAAE;AAJgB,CAAnC;;AASO,IAAMC,aAAa,GAAGC,eAAMC,aAAN,CAAoC;AAC7DZ,EAAAA,KAAK,EAAEO,YADsD;AAE7DM,EAAAA,QAAQ,EAAE,oBAAM,CAAG;AAF0C,CAApC,CAAtB;;;AAIP,IAAQC,QAAR,GAAqBJ,aAArB,CAAQI,QAAR;;AAEA,IAAMC,cAAuD,GAAG,SAA1DA,cAA0D,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAC9E,oBAA0B,uBAAWjB,aAAX,EAA0BQ,YAA1B,CAA1B;AAAA;AAAA,MAAOP,KAAP;AAAA,MAAca,QAAd;;AACA,SACI,6BAAC,QAAD;AAAU,IAAA,KAAK,EAAE;AAAEb,MAAAA,KAAK,EAALA,KAAF;AAASa,MAAAA,QAAQ,EAARA;AAAT,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,QADL,CADJ;AAKH,CAPD;;eASeD,c","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport { IIoTCClient } from \"react-native-azure-iotcentral-client\";\r\nimport { IHealthManager, IHealthDevice } from \"../models\";\r\nimport { ChartUpdateCallback } from \"../types\";\r\n\r\n\r\nexport interface IConfigState {\r\n    device: IHealthDevice | null,\r\n    centralClient: IIoTCClient | null | undefined,\r\n    healthManager: IHealthManager | null,\r\n    insightUpdate: ChartUpdateCallback | null\r\n}\r\n\r\ntype IIoTCAction = {\r\n    type: 'CONNECT' | 'DISCONNECT',\r\n    payload: IIoTCClient | null\r\n}\r\ntype IHealthAction = {\r\n    type: 'ACTIVATE' | 'UNACTIVATE',\r\n    payload: IHealthManager | null\r\n}\r\n\r\ntype IDeviceAction = {\r\n    type: 'HEALTH_CONNECT' | 'HEALTH_DISCONNECT',\r\n    payload: IHealthDevice | null\r\n}\r\n\r\n\r\ntype IConfigAction = IDeviceAction | IHealthAction | IIoTCAction;\r\n\r\nexport type IConfigContext = {\r\n    state: IConfigState,\r\n    dispatch: React.Dispatch<IConfigAction>\r\n}\r\n\r\nexport const configReducer = (state: IConfigState, action: IConfigAction) => {\r\n    switch (action.type) {\r\n        case 'CONNECT':\r\n        case 'DISCONNECT':\r\n            return { ...state, centralClient: action.payload }\r\n        case 'HEALTH_CONNECT':\r\n        case 'HEALTH_DISCONNECT':\r\n            return { ...state, device: action.payload };\r\n        case 'ACTIVATE':\r\n        case 'UNACTIVATE':\r\n            return { ...state, healthManager: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialState: IConfigState = {\r\n    device: null,\r\n    centralClient: undefined,\r\n    healthManager: null,\r\n    insightUpdate: null\r\n}\r\n\r\n\r\n\r\nexport const ConfigContext = React.createContext<IConfigContext>({\r\n    state: initialState,\r\n    dispatch: () => { }\r\n});\r\nconst { Provider } = ConfigContext;\r\n\r\nconst ConfigProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    const [state, dispatch] = useReducer(configReducer, initialState);\r\n    return (\r\n        <Provider value={{ state, dispatch }}>\r\n            {children}\r\n        </Provider>\r\n    )\r\n};\r\n\r\nexport default ConfigProvider;"]},"metadata":{},"sourceType":"script"}