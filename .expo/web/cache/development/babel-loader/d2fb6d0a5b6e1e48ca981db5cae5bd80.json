{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseBleError = parseBleError;\nexports.BleAndroidErrorCode = exports.BleIOSErrorCode = exports.BleATTErrorCode = exports.BleErrorCodeMessage = exports.BleErrorCode = exports.BleError = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _wrapNativeSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));\n\nvar _Utils = require(\"./Utils\");\n\nvar _BleErrorCodeMessage;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar BleError = function (_Error) {\n  (0, _inherits2.default)(BleError, _Error);\n\n  var _super = _createSuper(BleError);\n\n  function BleError(nativeBleError, errorMessageMapping) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, BleError);\n    _this = _super.call(this);\n    _this.message = errorMessageMapping[BleErrorCode.UnknownError];\n\n    if (typeof nativeBleError === 'string') {\n      _this.errorCode = BleErrorCode.UnknownError;\n      _this.attErrorCode = null;\n      _this.iosErrorCode = null;\n      _this.androidErrorCode = null;\n      _this.reason = nativeBleError;\n    } else {\n      var message = errorMessageMapping[nativeBleError.errorCode];\n\n      if (message) {\n        _this.message = (0, _Utils.fillStringWithArguments)(message, nativeBleError);\n      }\n\n      _this.errorCode = nativeBleError.errorCode;\n      _this.attErrorCode = nativeBleError.attErrorCode;\n      _this.iosErrorCode = nativeBleError.iosErrorCode;\n      _this.androidErrorCode = nativeBleError.androidErrorCode;\n      _this.reason = nativeBleError.reason;\n    }\n\n    _this.name = 'BleError';\n    return _this;\n  }\n\n  return BleError;\n}((0, _wrapNativeSuper2.default)(Error));\n\nexports.BleError = BleError;\n\nfunction parseBleError(errorMessage, errorMessageMapping) {\n  var bleError;\n  var errorMapping = errorMessageMapping ? errorMessageMapping : BleErrorCodeMessage;\n\n  try {\n    var nativeBleError = JSON.parse(errorMessage);\n    bleError = new BleError(nativeBleError, errorMapping);\n  } catch (parseError) {\n    bleError = new BleError(errorMessage, errorMapping);\n  }\n\n  return bleError;\n}\n\nvar BleErrorCode = {\n  UnknownError: 0,\n  BluetoothManagerDestroyed: 1,\n  OperationCancelled: 2,\n  OperationTimedOut: 3,\n  OperationStartFailed: 4,\n  InvalidIdentifiers: 5,\n  BluetoothUnsupported: 100,\n  BluetoothUnauthorized: 101,\n  BluetoothPoweredOff: 102,\n  BluetoothInUnknownState: 103,\n  BluetoothResetting: 104,\n  BluetoothStateChangeFailed: 105,\n  DeviceConnectionFailed: 200,\n  DeviceDisconnected: 201,\n  DeviceRSSIReadFailed: 202,\n  DeviceAlreadyConnected: 203,\n  DeviceNotFound: 204,\n  DeviceNotConnected: 205,\n  DeviceMTUChangeFailed: 206,\n  ServicesDiscoveryFailed: 300,\n  IncludedServicesDiscoveryFailed: 301,\n  ServiceNotFound: 302,\n  ServicesNotDiscovered: 303,\n  CharacteristicsDiscoveryFailed: 400,\n  CharacteristicWriteFailed: 401,\n  CharacteristicReadFailed: 402,\n  CharacteristicNotifyChangeFailed: 403,\n  CharacteristicNotFound: 404,\n  CharacteristicsNotDiscovered: 405,\n  CharacteristicInvalidDataFormat: 406,\n  DescriptorsDiscoveryFailed: 500,\n  DescriptorWriteFailed: 501,\n  DescriptorReadFailed: 502,\n  DescriptorNotFound: 503,\n  DescriptorsNotDiscovered: 504,\n  DescriptorInvalidDataFormat: 505,\n  DescriptorWriteNotAllowed: 506,\n  ScanStartFailed: 600,\n  LocationServicesDisabled: 601\n};\nexports.BleErrorCode = BleErrorCode;\nvar BleErrorCodeMessage = (_BleErrorCodeMessage = {}, (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.UnknownError, 'Unknown error occurred. This is probably a bug! Check reason property.'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.BluetoothManagerDestroyed, 'BleManager was destroyed'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.OperationCancelled, 'Operation was cancelled'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.OperationTimedOut, 'Operation timed out'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.OperationStartFailed, 'Operation was rejected'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.InvalidIdentifiers, 'Invalid UUIDs or IDs were passed: {internalMessage}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.BluetoothUnsupported, 'BluetoothLE is unsupported on this device'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.BluetoothUnauthorized, 'Device is not authorized to use BluetoothLE'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.BluetoothPoweredOff, 'BluetoothLE is powered off'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.BluetoothInUnknownState, 'BluetoothLE is in unknown state'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.BluetoothResetting, 'BluetoothLE is resetting'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.BluetoothStateChangeFailed, 'Bluetooth state change failed'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DeviceConnectionFailed, 'Device {deviceID} connection failed'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DeviceDisconnected, 'Device {deviceID} was disconnected'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DeviceRSSIReadFailed, 'RSSI read failed for device {deviceID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DeviceAlreadyConnected, 'Device {deviceID} is already connected'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DeviceNotFound, 'Device {deviceID} not found'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DeviceNotConnected, 'Device {deviceID} is not connected'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DeviceMTUChangeFailed, 'Device {deviceID} could not change MTU size'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.ServicesDiscoveryFailed, 'Services discovery failed for device {deviceID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.IncludedServicesDiscoveryFailed, 'Included services discovery failed for device {deviceID} and service: {serviceUUID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.ServiceNotFound, 'Service {serviceUUID} for device {deviceID} not found'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.ServicesNotDiscovered, 'Services not discovered for device {deviceID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.CharacteristicsDiscoveryFailed, 'Characteristic discovery failed for device {deviceID} and service {serviceUUID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.CharacteristicWriteFailed, 'Characteristic {characteristicUUID} write failed for device {deviceID} and service {serviceUUID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.CharacteristicReadFailed, 'Characteristic {characteristicUUID} read failed for device {deviceID} and service {serviceUUID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.CharacteristicNotifyChangeFailed, 'Characteristic {characteristicUUID} notify change failed for device {deviceID} and service {serviceUUID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.CharacteristicNotFound, 'Characteristic {characteristicUUID} not found'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.CharacteristicsNotDiscovered, 'Characteristics not discovered for device {deviceID} and service {serviceUUID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.CharacteristicInvalidDataFormat, 'Cannot write to characteristic {characteristicUUID} with invalid data format: {internalMessage}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DescriptorsDiscoveryFailed, 'Descriptor {descriptorUUID} discovery failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DescriptorWriteFailed, 'Descriptor {descriptorUUID} write failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DescriptorReadFailed, 'Descriptor {descriptorUUID} read failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DescriptorNotFound, 'Descriptor {descriptorUUID} not found'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DescriptorsNotDiscovered, 'Descriptors not discovered for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DescriptorInvalidDataFormat, 'Cannot write to descriptor {descriptorUUID} with invalid data format: {internalMessage}'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.DescriptorWriteNotAllowed, \"Cannot write to descriptor {descriptorUUID}. It's not allowed by iOS and therefore forbidden on Android as well.\"), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.ScanStartFailed, 'Cannot start scanning operation'), (0, _defineProperty2.default)(_BleErrorCodeMessage, BleErrorCode.LocationServicesDisabled, 'Location services are disabled'), _BleErrorCodeMessage);\nexports.BleErrorCodeMessage = BleErrorCodeMessage;\nvar BleATTErrorCode = {\n  Success: 0,\n  InvalidHandle: 1,\n  ReadNotPermitted: 2,\n  WriteNotPermitted: 3,\n  InvalidPdu: 4,\n  InsufficientAuthentication: 5,\n  RequestNotSupported: 6,\n  InvalidOffset: 7,\n  InsufficientAuthorization: 8,\n  PrepareQueueFull: 9,\n  AttributeNotFound: 10,\n  AttributeNotLong: 11,\n  InsufficientEncryptionKeySize: 12,\n  InvalidAttributeValueLength: 13,\n  UnlikelyError: 14,\n  InsufficientEncryption: 15,\n  UnsupportedGroupType: 16,\n  InsufficientResources: 17\n};\nexports.BleATTErrorCode = BleATTErrorCode;\nvar BleIOSErrorCode = {\n  Unknown: 0,\n  InvalidParameters: 1,\n  InvalidHandle: 2,\n  NotConnected: 3,\n  OutOfSpace: 4,\n  OperationCancelled: 5,\n  ConnectionTimeout: 6,\n  PeripheralDisconnected: 7,\n  UuidNotAllowed: 8,\n  AlreadyAdvertising: 9,\n  ConnectionFailed: 10,\n  ConnectionLimitReached: 11,\n  UnknownDevice: 12\n};\nexports.BleIOSErrorCode = BleIOSErrorCode;\nvar BleAndroidErrorCode = {\n  NoResources: 0x80,\n  InternalError: 0x81,\n  WrongState: 0x82,\n  DbFull: 0x83,\n  Busy: 0x84,\n  Error: 0x85,\n  CmdStarted: 0x86,\n  IllegalParameter: 0x87,\n  Pending: 0x88,\n  AuthFail: 0x89,\n  More: 0x8a,\n  InvalidCfg: 0x8b,\n  ServiceStarted: 0x8c,\n  EncrypedNoMitm: 0x8d,\n  NotEncrypted: 0x8e,\n  Congested: 0x8f\n};\nexports.BleAndroidErrorCode = BleAndroidErrorCode;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-ble-plx/src/BleError.js"],"names":["BleError","nativeBleError","errorMessageMapping","message","BleErrorCode","UnknownError","errorCode","attErrorCode","iosErrorCode","androidErrorCode","reason","name","Error","parseBleError","errorMessage","bleError","errorMapping","BleErrorCodeMessage","JSON","parse","parseError","BluetoothManagerDestroyed","OperationCancelled","OperationTimedOut","OperationStartFailed","InvalidIdentifiers","BluetoothUnsupported","BluetoothUnauthorized","BluetoothPoweredOff","BluetoothInUnknownState","BluetoothResetting","BluetoothStateChangeFailed","DeviceConnectionFailed","DeviceDisconnected","DeviceRSSIReadFailed","DeviceAlreadyConnected","DeviceNotFound","DeviceNotConnected","DeviceMTUChangeFailed","ServicesDiscoveryFailed","IncludedServicesDiscoveryFailed","ServiceNotFound","ServicesNotDiscovered","CharacteristicsDiscoveryFailed","CharacteristicWriteFailed","CharacteristicReadFailed","CharacteristicNotifyChangeFailed","CharacteristicNotFound","CharacteristicsNotDiscovered","CharacteristicInvalidDataFormat","DescriptorsDiscoveryFailed","DescriptorWriteFailed","DescriptorReadFailed","DescriptorNotFound","DescriptorsNotDiscovered","DescriptorInvalidDataFormat","DescriptorWriteNotAllowed","ScanStartFailed","LocationServicesDisabled","BleATTErrorCode","Success","InvalidHandle","ReadNotPermitted","WriteNotPermitted","InvalidPdu","InsufficientAuthentication","RequestNotSupported","InvalidOffset","InsufficientAuthorization","PrepareQueueFull","AttributeNotFound","AttributeNotLong","InsufficientEncryptionKeySize","InvalidAttributeValueLength","UnlikelyError","InsufficientEncryption","UnsupportedGroupType","InsufficientResources","BleIOSErrorCode","Unknown","InvalidParameters","NotConnected","OutOfSpace","ConnectionTimeout","PeripheralDisconnected","UuidNotAllowed","AlreadyAdvertising","ConnectionFailed","ConnectionLimitReached","UnknownDevice","BleAndroidErrorCode","NoResources","InternalError","WrongState","DbFull","Busy","CmdStarted","IllegalParameter","Pending","AuthFail","More","InvalidCfg","ServiceStarted","EncrypedNoMitm","NotEncrypted","Congested"],"mappings":"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","sourcesContent":["// @flow\nimport { fillStringWithArguments } from './Utils'\nimport type { BleErrorCodeMessageMapping } from './TypeDefinition'\n\nexport interface NativeBleError {\n  errorCode: $Values<typeof BleErrorCode>;\n  attErrorCode: ?$Values<typeof BleATTErrorCode>;\n  iosErrorCode: ?$Values<typeof BleIOSErrorCode>;\n  androidErrorCode: ?$Values<typeof BleAndroidErrorCode>;\n  reason: ?string;\n\n  deviceID?: string;\n  serviceUUID?: string;\n  characteristicUUID?: string;\n  descriptorUUID?: string;\n  internalMessage?: string;\n}\n\n/**\n * BleError is an error class which is guaranteed to be thrown by all functions of this\n * library. It contains additional properties which help to identify problems in\n * platform independent way.\n */\nexport class BleError extends Error {\n  /**\n   * Platform independent error code. Possible values are defined in {@link BleErrorCode}.\n   */\n  errorCode: $Values<typeof BleErrorCode>\n  /**\n   * Platform independent error code related to ATT errors.\n   */\n  attErrorCode: ?$Values<typeof BleATTErrorCode>\n  /**\n   * iOS specific error code (if not an ATT error).\n   */\n  iosErrorCode: ?$Values<typeof BleIOSErrorCode>\n  /**\n   * Android specific error code (if not an ATT error).\n   */\n  androidErrorCode: ?$Values<typeof BleAndroidErrorCode>\n  /**\n   * Platform specific error message.\n   */\n  reason: ?string\n\n  constructor(nativeBleError: NativeBleError | string, errorMessageMapping: BleErrorCodeMessageMapping) {\n    super()\n    this.message = errorMessageMapping[BleErrorCode.UnknownError]\n    if (typeof nativeBleError === 'string') {\n      this.errorCode = BleErrorCode.UnknownError\n      this.attErrorCode = null\n      this.iosErrorCode = null\n      this.androidErrorCode = null\n      this.reason = nativeBleError\n    } else {\n      const message = errorMessageMapping[nativeBleError.errorCode]\n      if (message) {\n        this.message = fillStringWithArguments(message, nativeBleError)\n      }\n      this.errorCode = nativeBleError.errorCode\n      this.attErrorCode = nativeBleError.attErrorCode\n      this.iosErrorCode = nativeBleError.iosErrorCode\n      this.androidErrorCode = nativeBleError.androidErrorCode\n      this.reason = nativeBleError.reason\n    }\n    this.name = 'BleError'\n  }\n}\n\nexport function parseBleError(errorMessage: string, errorMessageMapping: BleErrorCodeMessageMapping): BleError {\n  let bleError: BleError\n  const errorMapping = errorMessageMapping ? errorMessageMapping : BleErrorCodeMessage\n  try {\n    const nativeBleError = JSON.parse(errorMessage)\n    bleError = new BleError(nativeBleError, errorMapping)\n  } catch (parseError) {\n    bleError = new BleError(errorMessage, errorMapping)\n  }\n  return bleError\n}\n\n/**\n * Platform independent error code map adjusted to this library's use cases.\n */\nexport const BleErrorCode = {\n  // Implementation specific errors ------------------------------------------------------------------------------------\n  /**\n   * This error can be thrown when unexpected error occurred and in most cases it is related to implementation bug.\n   * Original message is available in {@link #bleerrorreason|reason} property.\n   */\n  UnknownError: 0,\n  /**\n   * Current promise failed to finish due to BleManager shutdown. It means that user called\n   * {@link #blemanagerdestroy|manager.destroy()} function before all operations completed.\n   */\n  BluetoothManagerDestroyed: 1,\n  /**\n   * Promise was explicitly cancelled by a user with {@link #blemanagercanceltransaction|manager.cancelTransaction()}\n   * function call.\n   */\n  OperationCancelled: 2,\n  /**\n   * Operation timed out and was cancelled.\n   */\n  OperationTimedOut: 3,\n  /**\n   * Native module couldn't start operation due to internal state, which doesn't allow to do that.\n   */\n  OperationStartFailed: 4,\n  /**\n   * Invalid UUIDs or IDs were passed to API call.\n   */\n  InvalidIdentifiers: 5,\n\n  // Bluetooth global states -------------------------------------------------------------------------------------------\n  /**\n   * Bluetooth is not supported for this particular device. It may happen on iOS simulator for example.\n   */\n  BluetoothUnsupported: 100,\n  /**\n   * There are no granted permissions which allow to use BLE functionality. On Android it may require\n   * android.permission.ACCESS_COARSE_LOCATION permission or android.permission.ACCESS_FINE_LOCATION permission.\n   */\n  BluetoothUnauthorized: 101,\n  /**\n   * BLE is powered off on device. All previous operations and their state is invalidated.\n   */\n  BluetoothPoweredOff: 102,\n  /**\n   * BLE stack is in unspecified state.\n   */\n  BluetoothInUnknownState: 103,\n  /**\n   * BLE stack is resetting.\n   */\n  BluetoothResetting: 104,\n  /**\n   * BLE state change failed.\n   */\n  BluetoothStateChangeFailed: 105,\n\n  // Peripheral errors. ------------------------------------------------------------------------------------------------\n  /**\n   * Couldn't connect to specified device.\n   */\n  DeviceConnectionFailed: 200,\n  /**\n   * Device was disconnected.\n   */\n  DeviceDisconnected: 201,\n  /**\n   * Couldn't read RSSI from device.\n   */\n  DeviceRSSIReadFailed: 202,\n  /**\n   * Device is already connected. It is not allowed to connect twice to the same device.\n   */\n  DeviceAlreadyConnected: 203,\n  /**\n   * Couldn't find device with specified ID.\n   */\n  DeviceNotFound: 204,\n  /**\n   * Operation failed because device has to be connected to perform it.\n   */\n  DeviceNotConnected: 205,\n  /**\n   * Device could not change MTU value.\n   */\n  DeviceMTUChangeFailed: 206,\n\n  // Services ----------------------------------------------------------------------------------------------------------\n  /**\n   * Couldn't discover services for specified device.\n   */\n  ServicesDiscoveryFailed: 300,\n  /**\n   * Couldn't discover included services for specified service.\n   */\n  IncludedServicesDiscoveryFailed: 301,\n  /**\n   * Service with specified ID or UUID couldn't be found. User may need to call\n   * {@link #blemanagerdiscoverallservicesandcharacteristicsfordevice|manager.discoverAllServicesAndCharacteristicsForDevice}\n   * to cache them.\n   */\n  ServiceNotFound: 302,\n  /**\n   * Services were not discovered. User may need to call\n   * {@link #blemanagerdiscoverallservicesandcharacteristicsfordevice|manager.discoverAllServicesAndCharacteristicsForDevice}\n   * to cache them.\n   */\n  ServicesNotDiscovered: 303,\n\n  // Characteristics ---------------------------------------------------------------------------------------------------\n  /**\n   * Couldn't discover characteristics for specified service.\n   */\n  CharacteristicsDiscoveryFailed: 400,\n  /**\n   * Couldn't write to specified characteristic. Make sure that\n   * {@link #characteristiciswritablewithresponse|characteristic.isWritableWithResponse}\n   * or {@link #characteristiciswritablewithoutresponse|characteristic.isWritableWithoutResponse} is set to true.\n   */\n  CharacteristicWriteFailed: 401,\n  /**\n   * Couldn't read from specified characteristic. Make sure that\n   * {@link #characteristicisreadable|characteristic.isReadable} is set to true.\n   */\n  CharacteristicReadFailed: 402,\n  /**\n   * Couldn't set notification or indication for specified characteristic. Make sure that\n   * {@link #characteristicisnotifiable|characteristic.isNotifiable} or\n   * {@link #characteristicisindicatable|characteristic.isIndicatable} is set to true.\n   */\n  CharacteristicNotifyChangeFailed: 403,\n  /**\n   * Characteristic with specified ID or UUID couldn't be found. User may need to call\n   * {@link #blemanagerdiscoverallservicesandcharacteristicsfordevice|manager.discoverAllServicesAndCharacteristicsForDevice}\n   * to cache them.\n   */\n  CharacteristicNotFound: 404,\n  /**\n   * Characteristic were not discovered for specified service. User may need to call\n   * {@link #blemanagerdiscoverallservicesandcharacteristicsfordevice|manager.discoverAllServicesAndCharacteristicsForDevice}\n   * to cache them.\n   */\n  CharacteristicsNotDiscovered: 405,\n  /**\n   * Invalid Base64 format was passed to characteristic API function call.\n   */\n  CharacteristicInvalidDataFormat: 406,\n\n  // Characteristics ---------------------------------------------------------------------------------------------------\n  /**\n   * Couldn't discover descriptor for specified characteristic.\n   */\n  DescriptorsDiscoveryFailed: 500,\n  /**\n   * Couldn't write to specified descriptor.\n   */\n  DescriptorWriteFailed: 501,\n  /**\n   * Couldn't read from specified descriptor.\n   */\n  DescriptorReadFailed: 502,\n  /**\n   * Couldn't find specified descriptor.\n   */\n  DescriptorNotFound: 503,\n  /**\n   * Descriptors are not discovered for specified characteristic.\n   */\n  DescriptorsNotDiscovered: 504,\n  /**\n   * Invalid Base64 format was passed to descriptor API function call.\n   */\n  DescriptorInvalidDataFormat: 505,\n  /**\n   * Issued a write to a descriptor, which is handled by OS.\n   */\n  DescriptorWriteNotAllowed: 506,\n\n  // Scanning errors ---------------------------------------------------------------------------------------------------\n  /**\n   * Cannot start scanning operation.\n   */\n  ScanStartFailed: 600,\n  /**\n   * Location services are disabled.\n   */\n  LocationServicesDisabled: 601\n}\n\n/**\n * Mapping of error codes to error messages\n * @name BleErrorCodeMessage\n */\nexport const BleErrorCodeMessage: BleErrorCodeMessageMapping = {\n  // Implementation specific errors\n  [BleErrorCode.UnknownError]: 'Unknown error occurred. This is probably a bug! Check reason property.',\n  [BleErrorCode.BluetoothManagerDestroyed]: 'BleManager was destroyed',\n  [BleErrorCode.OperationCancelled]: 'Operation was cancelled',\n  [BleErrorCode.OperationTimedOut]: 'Operation timed out',\n  [BleErrorCode.OperationStartFailed]: 'Operation was rejected',\n  [BleErrorCode.InvalidIdentifiers]: 'Invalid UUIDs or IDs were passed: {internalMessage}',\n\n  // Bluetooth global states\n  [BleErrorCode.BluetoothUnsupported]: 'BluetoothLE is unsupported on this device',\n  [BleErrorCode.BluetoothUnauthorized]: 'Device is not authorized to use BluetoothLE',\n  [BleErrorCode.BluetoothPoweredOff]: 'BluetoothLE is powered off',\n  [BleErrorCode.BluetoothInUnknownState]: 'BluetoothLE is in unknown state',\n  [BleErrorCode.BluetoothResetting]: 'BluetoothLE is resetting',\n  [BleErrorCode.BluetoothStateChangeFailed]: 'Bluetooth state change failed',\n\n  // Peripheral errors.\n  [BleErrorCode.DeviceConnectionFailed]: 'Device {deviceID} connection failed',\n  [BleErrorCode.DeviceDisconnected]: 'Device {deviceID} was disconnected',\n  [BleErrorCode.DeviceRSSIReadFailed]: 'RSSI read failed for device {deviceID}',\n  [BleErrorCode.DeviceAlreadyConnected]: 'Device {deviceID} is already connected',\n  [BleErrorCode.DeviceNotFound]: 'Device {deviceID} not found',\n  [BleErrorCode.DeviceNotConnected]: 'Device {deviceID} is not connected',\n  [BleErrorCode.DeviceMTUChangeFailed]: 'Device {deviceID} could not change MTU size',\n\n  // Services\n  [BleErrorCode.ServicesDiscoveryFailed]: 'Services discovery failed for device {deviceID}',\n  [BleErrorCode.IncludedServicesDiscoveryFailed]:\n    'Included services discovery failed for device {deviceID} and service: {serviceUUID}',\n  [BleErrorCode.ServiceNotFound]: 'Service {serviceUUID} for device {deviceID} not found',\n  [BleErrorCode.ServicesNotDiscovered]: 'Services not discovered for device {deviceID}',\n\n  // Characteristics\n  [BleErrorCode.CharacteristicsDiscoveryFailed]:\n    'Characteristic discovery failed for device {deviceID} and service {serviceUUID}',\n  [BleErrorCode.CharacteristicWriteFailed]:\n    'Characteristic {characteristicUUID} write failed for device {deviceID} and service {serviceUUID}',\n  [BleErrorCode.CharacteristicReadFailed]:\n    'Characteristic {characteristicUUID} read failed for device {deviceID} and service {serviceUUID}',\n  [BleErrorCode.CharacteristicNotifyChangeFailed]:\n    'Characteristic {characteristicUUID} notify change failed for device {deviceID} and service {serviceUUID}',\n  [BleErrorCode.CharacteristicNotFound]: 'Characteristic {characteristicUUID} not found',\n  [BleErrorCode.CharacteristicsNotDiscovered]:\n    'Characteristics not discovered for device {deviceID} and service {serviceUUID}',\n  [BleErrorCode.CharacteristicInvalidDataFormat]:\n    'Cannot write to characteristic {characteristicUUID} with invalid data format: {internalMessage}',\n\n  // Descriptors\n  [BleErrorCode.DescriptorsDiscoveryFailed]:\n    'Descriptor {descriptorUUID} discovery failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}',\n  [BleErrorCode.DescriptorWriteFailed]:\n    'Descriptor {descriptorUUID} write failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}',\n  [BleErrorCode.DescriptorReadFailed]:\n    'Descriptor {descriptorUUID} read failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}',\n  [BleErrorCode.DescriptorNotFound]: 'Descriptor {descriptorUUID} not found',\n  [BleErrorCode.DescriptorsNotDiscovered]:\n    'Descriptors not discovered for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}',\n  [BleErrorCode.DescriptorInvalidDataFormat]:\n    'Cannot write to descriptor {descriptorUUID} with invalid data format: {internalMessage}',\n  [BleErrorCode.DescriptorWriteNotAllowed]:\n    \"Cannot write to descriptor {descriptorUUID}. It's not allowed by iOS and therefore forbidden on Android as well.\",\n\n  // Scanning\n  [BleErrorCode.ScanStartFailed]: 'Cannot start scanning operation',\n  [BleErrorCode.LocationServicesDisabled]: 'Location services are disabled'\n}\n\n/**\n * Error codes for ATT errors.\n * @name BleATTErrorCode\n */\nexport const BleATTErrorCode = {\n  /**\n   * The ATT command or request successfully completed.\n   */\n  Success: 0,\n  /**\n   * The attribute handle is invalid on this device.\n   */\n  InvalidHandle: 1,\n  /**\n   * The attribute’s value cannot be read.\n   */\n  ReadNotPermitted: 2,\n  /**\n   * The attribute’s value cannot be written.\n   */\n  WriteNotPermitted: 3,\n  /**\n   * The attribute Protocol Data Unit (PDU) or “message” is invalid.\n   */\n  InvalidPdu: 4,\n  /**\n   * The attribute requires authentication before its value can be read or written.\n   */\n  InsufficientAuthentication: 5,\n  /**\n   * The attribute server does not support the request received by the client.\n   */\n  RequestNotSupported: 6,\n  /**\n   * The specified offset value was past the end of the attribute’s value.\n   */\n  InvalidOffset: 7,\n  /**\n   * The attribute requires authorization before its value can be read or written.\n   */\n  InsufficientAuthorization: 8,\n  /**\n   * The prepare queue is full, because too many prepare write requests have been queued.\n   */\n  PrepareQueueFull: 9,\n  /**\n   * The attribute is not found within the specified attribute handle range.\n   */\n  AttributeNotFound: 10,\n  /**\n   * The attribute cannot be read or written using the ATT read blob request.\n   */\n  AttributeNotLong: 11,\n  /**\n   * The encryption key size used for encrypting this link is insufficient.\n   */\n  InsufficientEncryptionKeySize: 12,\n  /**\n   * The length of the attribute’s value is invalid for the intended operation.\n   */\n  InvalidAttributeValueLength: 13,\n  /**\n   * The ATT request has encountered an unlikely error and therefore could not be completed.\n   */\n  UnlikelyError: 14,\n  /**\n   * The attribute requires encryption before its value can be read or written.\n   */\n  InsufficientEncryption: 15,\n  /**\n   * The attribute type is not a supported grouping attribute as defined by a higher-layer specification.\n   */\n  UnsupportedGroupType: 16,\n  /**\n   * Resources are insufficient to complete the ATT request.\n   */\n  InsufficientResources: 17\n\n  // Values 0x012 – 0x7F are reserved for future use.\n}\n\n/**\n * iOS specific error codes.\n * @name BleIOSErrorCode\n */\nexport const BleIOSErrorCode = {\n  /**\n   * An unknown error occurred.\n   */\n  Unknown: 0,\n  /**\n   * The specified parameters are invalid.\n   */\n  InvalidParameters: 1,\n  /**\n   * The specified attribute handle is invalid.\n   */\n  InvalidHandle: 2,\n  /**\n   * The device is not currently connected.\n   */\n  NotConnected: 3,\n  /**\n   * The device has run out of space to complete the intended operation.\n   */\n  OutOfSpace: 4,\n  /**\n   * The operation is canceled.\n   */\n  OperationCancelled: 5,\n  /**\n   * The connection timed out.\n   */\n  ConnectionTimeout: 6,\n  /**\n   * The peripheral disconnected.\n   */\n  PeripheralDisconnected: 7,\n  /**\n   * The specified UUID is not permitted.\n   */\n  UuidNotAllowed: 8,\n  /**\n   * The peripheral is already advertising.\n   */\n  AlreadyAdvertising: 9,\n  /**\n   * The connection failed.\n   */\n  ConnectionFailed: 10,\n  /**\n   * The device already has the maximum number of connections.\n   */\n  ConnectionLimitReached: 11,\n  /**\n   * Unknown device.\n   */\n  UnknownDevice: 12\n}\n\n/**\n * Android specific error codes.\n * @name BleAndroidErrorCode\n */\nexport const BleAndroidErrorCode = {\n  /**\n   * The device has insufficient resources to complete the intended operation.\n   */\n  NoResources: 0x80,\n  /**\n   * Internal error occurred which may happen due to implementation error in BLE stack.\n   */\n  InternalError: 0x81,\n  /**\n   * BLE stack implementation entered illegal state and operation couldn't complete.\n   */\n  WrongState: 0x82,\n  /**\n   * BLE stack didn't allocate sufficient memory buffer for internal caches.\n   */\n  DbFull: 0x83,\n  /**\n   * Maximum number of pending operations was exceeded.\n   */\n  Busy: 0x84,\n  /**\n   * Generic BLE stack error.\n   */\n  Error: 0x85,\n  /**\n   * Command is already queued up in GATT.\n   */\n  CmdStarted: 0x86,\n  /**\n   * Illegal parameter was passed to internal BLE stack function.\n   */\n  IllegalParameter: 0x87,\n  /**\n   * Operation is pending.\n   */\n  Pending: 0x88,\n  /**\n   * Authorization failed before performing read or write operation.\n   */\n  AuthFail: 0x89,\n  /**\n   * More cache entries were loaded then expected.\n   */\n  More: 0x8a,\n  /**\n   * Invalid configuration\n   */\n  InvalidCfg: 0x8b,\n  /**\n   * GATT service already started.\n   */\n  ServiceStarted: 0x8c,\n  /**\n   * GATT link is encrypted but prone to man in the middle attacks.\n   */\n  EncrypedNoMitm: 0x8d,\n  /**\n   * GATT link is not encrypted.\n   */\n  NotEncrypted: 0x8e,\n  /**\n   * ATT command was sent but channel is congested.\n   */\n  Congested: 0x8f\n}\n"]},"metadata":{},"sourceType":"script"}