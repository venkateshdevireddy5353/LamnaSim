{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Descriptor = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar Descriptor = function () {\n  function Descriptor(nativeDescriptor, manager) {\n    (0, _classCallCheck2.default)(this, Descriptor);\n    (0, _extends2.default)(this, nativeDescriptor, {\n      _manager: manager\n    });\n  }\n\n  (0, _createClass2.default)(Descriptor, [{\n    key: \"read\",\n    value: function read(transactionId) {\n      return _regenerator.default.async(function read$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this._manager._readDescriptor(this.id, transactionId));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"write\",\n    value: function write(valueBase64, transactionId) {\n      return _regenerator.default.async(function write$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this._manager._writeDescriptor(this.id, valueBase64, transactionId));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return Descriptor;\n}();\n\nexports.Descriptor = Descriptor;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-ble-plx/src/Descriptor.js"],"names":["Descriptor","nativeDescriptor","manager","_manager","transactionId","_readDescriptor","id","valueBase64","_writeDescriptor"],"mappings":"AACA;;;;;;;;;;;;;;;;;IASaA,U;AA6CX,sBAAYC,gBAAZ,EAAgDC,OAAhD,EAAqE;AAAA;AACnE,2BAAc,IAAd,EAAoBD,gBAApB,EAAsC;AAAEE,MAAAA,QAAQ,EAAED;AAAZ,KAAtC;AACD;;;;WAUD,cAAWE,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA,+CACS,KAAKD,QAAL,CAAcE,eAAd,CAA8B,KAAKC,EAAnC,EAAuCF,aAAvC,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAWA,eAAYG,WAAZ,EAAiCH,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,gDACS,KAAKD,QAAL,CAAcK,gBAAd,CAA+B,KAAKF,EAApC,EAAwCC,WAAxC,EAAqDH,aAArD,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// @flow\n'use strict'\n\nimport type { BleManager } from './BleManager'\nimport type { NativeDescriptor } from './BleModule'\nimport type { DeviceId, Identifier, UUID, TransactionId, Base64 } from './TypeDefinition'\n\n/**\n * Descriptor object.\n */\nexport class Descriptor implements NativeDescriptor {\n  /**\n   * Internal BLE Manager handle\n   * @private\n   */\n  _manager: BleManager\n  /**\n   * Descriptor unique identifier\n   */\n  id: Identifier\n  /**\n   * Descriptor UUID\n   */\n  uuid: UUID\n  /**\n   * Characteristic's ID to which descriptor belongs\n   */\n  characteristicID: Identifier\n  /**\n   * Characteristic's UUID to which descriptor belongs\n   */\n  characteristicUUID: UUID\n  /**\n   * Service's ID to which descriptor belongs\n   */\n  serviceID: Identifier\n  /**\n   * Service's UUID to which descriptor belongs\n   */\n  serviceUUID: UUID\n  /**\n   * Device's ID to which descriptor belongs\n   */\n  deviceID: DeviceId\n  /**\n   * Descriptor value if present\n   */\n  value: ?Base64\n\n  /**\n   * Private constructor used to create instance of {@link Descriptor}.\n   * @param {NativeDescriptor} nativeDescriptor NativeDescriptor\n   * @param {BleManager} manager BleManager\n   * @private\n   */\n  constructor(nativeDescriptor: NativeDescriptor, manager: BleManager) {\n    Object.assign(this, nativeDescriptor, { _manager: manager })\n  }\n\n  /**\n   * {@link #blemanagerreaddescriptorfordevice|bleManager.readDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   */\n  async read(transactionId: ?TransactionId): Promise<Descriptor> {\n    return this._manager._readDescriptor(this.id, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritedescriptorfordevice|bleManager.writeDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value.\n   */\n  async write(valueBase64: Base64, transactionId: ?TransactionId): Promise<Descriptor> {\n    return this._manager._writeDescriptor(this.id, valueBase64, transactionId)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}