{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Nutrient = exports.SleepStage = exports.MealType = exports.Scopes = exports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _scopes = _interopRequireDefault(require(\"./src/scopes\"));\n\nvar _utils = require(\"./src/utils\");\n\nvar googleFit = _reactNative.NativeModules.RNGoogleFit;\n\nvar RNGoogleFit = function () {\n  function RNGoogleFit() {\n    var _this = this;\n\n    (0, _classCallCheck2.default)(this, RNGoogleFit);\n    this.eventListeners = [];\n    this.isAuthorized = false;\n\n    this.authorize = function _callee() {\n      var options,\n          successResponse,\n          authResult,\n          _args = arguments;\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              successResponse = {\n                success: true\n              };\n              _context.prev = 2;\n              _context.next = 5;\n              return _regenerator.default.awrap(_this.checkIsAuthorized());\n\n            case 5:\n              if (!_this.isAuthorized) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", successResponse);\n\n            case 7:\n              _context.next = 9;\n              return _regenerator.default.awrap(new Promise(function (resolve, reject) {\n                _this.onAuthorize(function () {\n                  _this.isAuthorized = true;\n                  resolve(successResponse);\n                });\n\n                _this.onAuthorizeFailure(function (error) {\n                  _this.isAuthorized = false;\n                  reject({\n                    success: false,\n                    message: error.message\n                  });\n                });\n\n                var defaultScopes = [Scopes.FITNESS_ACTIVITY_READ, Scopes.FITNESS_BODY_WRITE, Scopes.FITNESS_LOCATION_READ];\n                googleFit.authorize({\n                  scopes: options && options.scopes || defaultScopes\n                });\n              }));\n\n            case 9:\n              authResult = _context.sent;\n              return _context.abrupt(\"return\", authResult);\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](2);\n              return _context.abrupt(\"return\", {\n                success: false,\n                message: _context.t0.message\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 13]], Promise);\n    };\n\n    this.checkIsAuthorized = function _callee2() {\n      var _await$googleFit$isAu, isAuthorized;\n\n      return _regenerator.default.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regenerator.default.awrap(googleFit.isAuthorized());\n\n            case 2:\n              _await$googleFit$isAu = _context2.sent;\n              isAuthorized = _await$googleFit$isAu.isAuthorized;\n              _this.isAuthorized = isAuthorized;\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.disconnect = function () {\n      _this.isAuthorized = false;\n      googleFit.disconnect();\n\n      _this.removeListeners();\n    };\n\n    this.removeListeners = function () {\n      _this.eventListeners.forEach(function (eventListener) {\n        return eventListener.remove();\n      });\n\n      _this.eventListeners = [];\n    };\n\n    this.checkPermissionAndroid = function _callee3() {\n      var response;\n      return _regenerator.default.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regenerator.default.awrap(_reactNative.PermissionsAndroid.check(_reactNative.PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));\n\n            case 2:\n              response = _context3.sent;\n              return _context3.abrupt(\"return\", response === true);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.requestPermissionAndroid = function _callee4(dataTypes) {\n      var check, granted;\n      return _regenerator.default.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regenerator.default.awrap(_this.checkPermissionAndroid());\n\n            case 2:\n              check = _context4.sent;\n\n              if (!(dataTypes.includes('distance') && !check)) {\n                _context4.next = 18;\n                break;\n              }\n\n              _context4.prev = 4;\n              _context4.next = 7;\n              return _regenerator.default.awrap(_reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION, {\n                title: \"Access Location Permisson\",\n                message: \"Enable location access for Google Fit Api. \" + \"Cancel may cause inaccuray result\",\n                buttonNegative: \"Cancel\",\n                buttonPositive: \"OK\"\n              }));\n\n            case 7:\n              granted = _context4.sent;\n\n              if (!(granted === _reactNative.PermissionsAndroid.RESULTS.GRANTED)) {\n                _context4.next = 11;\n                break;\n              }\n\n              _context4.next = 12;\n              break;\n\n            case 11:\n              return _context4.abrupt(\"return\", dataTypes.filter(function (data) {\n                return data !== 'distance';\n              }));\n\n            case 12:\n              _context4.next = 17;\n              break;\n\n            case 14:\n              _context4.prev = 14;\n              _context4.t0 = _context4[\"catch\"](4);\n              console.warn(_context4.t0);\n\n            case 17:\n              ;\n\n            case 18:\n              return _context4.abrupt(\"return\", dataTypes);\n\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[4, 14]], Promise);\n    };\n\n    this.startRecording = function (callback) {\n      var dataTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['step'];\n\n      _this.requestPermissionAndroid(dataTypes).then(function (dataTypes) {\n        var _this$eventListeners;\n\n        googleFit.startFitnessRecording(dataTypes);\n        var eventListeners = dataTypes.map(function (dataTypeName) {\n          var eventName = dataTypeName.toUpperCase() + \"_RECORDING\";\n          return _reactNative.DeviceEventEmitter.addListener(eventName, function (event) {\n            return callback(event);\n          });\n        });\n\n        (_this$eventListeners = _this.eventListeners).push.apply(_this$eventListeners, (0, _toConsumableArray2.default)(eventListeners));\n      });\n    };\n\n    this.getDailyStepCountSamples = function _callee5(options) {\n      var _prepareInput, startDate, endDate, bucketInterval, bucketUnit, data, result;\n\n      return _regenerator.default.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _prepareInput = (0, _utils.prepareInput)(options), startDate = _prepareInput.startDate, endDate = _prepareInput.endDate, bucketInterval = _prepareInput.bucketInterval, bucketUnit = _prepareInput.bucketUnit;\n              _context5.next = 3;\n              return _regenerator.default.awrap(googleFit.getDailyStepCountSamples(startDate, endDate, bucketInterval, bucketUnit));\n\n            case 3:\n              data = _context5.sent;\n\n              if (!(data.length > 0)) {\n                _context5.next = 8;\n                break;\n              }\n\n              result = data.map(function (dev) {\n                var obj = {};\n                obj.source = dev.source.appPackage + (dev.source.stream ? ':' + dev.source.stream : '');\n                obj.steps = (0, _utils.buildDailySteps)(dev.steps);\n                obj.rawSteps = dev.steps;\n                return obj;\n              }, _this);\n              _context5.next = 9;\n              break;\n\n            case 8:\n              return _context5.abrupt(\"return\", data);\n\n            case 9:\n              return _context5.abrupt(\"return\", result);\n\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.getUserInputSteps = function (options, callback) {\n      var startDate = !(0, _utils.isNil)(options.startDate) ? Date.parse(options.startDate) : new Date().setHours(0, 0, 0, 0);\n      var endDate = !(0, _utils.isNil)(options.endDate) ? Date.parse(options.endDate) : new Date().valueOf();\n      googleFit.getUserInputSteps(startDate, endDate, function (msg) {\n        return callback(msg, false);\n      }, function (res) {\n        callback(null, res);\n      });\n    };\n\n    this.getDailyDistanceSamples = function _callee6(options) {\n      var _prepareInput2, startDate, endDate, bucketInterval, bucketUnit, result;\n\n      return _regenerator.default.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _prepareInput2 = (0, _utils.prepareInput)(options), startDate = _prepareInput2.startDate, endDate = _prepareInput2.endDate, bucketInterval = _prepareInput2.bucketInterval, bucketUnit = _prepareInput2.bucketUnit;\n              _context6.next = 3;\n              return _regenerator.default.awrap(googleFit.getDailyDistanceSamples(startDate, endDate, bucketInterval, bucketUnit));\n\n            case 3:\n              result = _context6.sent;\n\n              if (!(result.length > 0)) {\n                _context6.next = 6;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", (0, _utils.prepareResponse)(result, 'distance'));\n\n            case 6:\n              return _context6.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.getActivitySamples = function _callee7(options) {\n      var _prepareInput3, startDate, endDate, bucketInterval, bucketUnit, result;\n\n      return _regenerator.default.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _prepareInput3 = (0, _utils.prepareInput)(options), startDate = _prepareInput3.startDate, endDate = _prepareInput3.endDate, bucketInterval = _prepareInput3.bucketInterval, bucketUnit = _prepareInput3.bucketUnit;\n              _context7.next = 3;\n              return _regenerator.default.awrap(googleFit.getActivitySamples(startDate, endDate, bucketInterval, bucketUnit));\n\n            case 3:\n              result = _context7.sent;\n              return _context7.abrupt(\"return\", result);\n\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.getDailyCalorieSamples = function _callee8(options) {\n      var basalCalculation, _prepareInput4, startDate, endDate, bucketInterval, bucketUnit, result;\n\n      return _regenerator.default.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              basalCalculation = options.basalCalculation !== false;\n              _prepareInput4 = (0, _utils.prepareInput)(options), startDate = _prepareInput4.startDate, endDate = _prepareInput4.endDate, bucketInterval = _prepareInput4.bucketInterval, bucketUnit = _prepareInput4.bucketUnit;\n              _context8.next = 4;\n              return _regenerator.default.awrap(googleFit.getDailyCalorieSamples(startDate, endDate, basalCalculation, bucketInterval, bucketUnit));\n\n            case 4:\n              result = _context8.sent;\n\n              if (!(result.length > 0)) {\n                _context8.next = 7;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", (0, _utils.prepareResponse)(result, 'calorie'));\n\n            case 7:\n              return _context8.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.getDailyNutritionSamples = function _callee9(options) {\n      var _prepareInput5, startDate, endDate, bucketInterval, bucketUnit, result;\n\n      return _regenerator.default.async(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _prepareInput5 = (0, _utils.prepareInput)(options), startDate = _prepareInput5.startDate, endDate = _prepareInput5.endDate, bucketInterval = _prepareInput5.bucketInterval, bucketUnit = _prepareInput5.bucketUnit;\n              _context9.next = 3;\n              return _regenerator.default.awrap(googleFit.getDailyNutritionSamples(startDate, endDate, bucketInterval, bucketUnit));\n\n            case 3:\n              result = _context9.sent;\n\n              if (!(result.length > 0)) {\n                _context9.next = 6;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", (0, _utils.prepareDailyResponse)(result));\n\n            case 6:\n              return _context9.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.getWeightSamples = function _callee10(options) {\n      var _prepareInput6, startDate, endDate, bucketInterval, bucketUnit, raw_result, result;\n\n      return _regenerator.default.async(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _prepareInput6 = (0, _utils.prepareInput)(options), startDate = _prepareInput6.startDate, endDate = _prepareInput6.endDate, bucketInterval = _prepareInput6.bucketInterval, bucketUnit = _prepareInput6.bucketUnit;\n              _context10.next = 3;\n              return _regenerator.default.awrap(googleFit.getWeightSamples(startDate, endDate, bucketInterval, bucketUnit));\n\n            case 3:\n              raw_result = _context10.sent;\n\n              if (!(raw_result.length > 0)) {\n                _context10.next = 7;\n                break;\n              }\n\n              result = raw_result.filter(function (value) {\n                return Object.keys(value).length !== 0;\n              }).map(function (el) {\n                if (el.value) {\n                  if (options.unit === 'pound') {\n                    el.value = (0, _utils.KgToLbs)(el.value);\n                  }\n\n                  el.startDate = new Date(el.startDate).toISOString();\n                  el.endDate = new Date(el.endDate).toISOString();\n                  return el;\n                }\n              });\n              return _context10.abrupt(\"return\", result);\n\n            case 7:\n              return _context10.abrupt(\"return\", raw_result);\n\n            case 8:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.getHeightSamples = function _callee11(options) {\n      var _prepareInput7, startDate, endDate, bucketInterval, bucketUnit, result;\n\n      return _regenerator.default.async(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _prepareInput7 = (0, _utils.prepareInput)(options), startDate = _prepareInput7.startDate, endDate = _prepareInput7.endDate, bucketInterval = _prepareInput7.bucketInterval, bucketUnit = _prepareInput7.bucketUnit;\n              _context11.next = 3;\n              return _regenerator.default.awrap(googleFit.getHeightSamples(startDate, endDate, bucketInterval, bucketUnit));\n\n            case 3:\n              result = _context11.sent;\n\n              if (!(result.length > 0)) {\n                _context11.next = 6;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", (0, _utils.prepareResponse)(result, 'value'));\n\n            case 6:\n              return _context11.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.deleteWeight = function (options, callback) {\n      googleFit.deleteWeight((0, _utils.prepareDeleteOptions)(options), function (msg) {\n        callback(msg, false);\n      }, function (res) {\n        callback(false, res);\n      });\n    };\n\n    this.deleteHeight = function (options, callback) {\n      googleFit.deleteHeight((0, _utils.prepareDeleteOptions)(options), function (msg) {\n        callback(msg, false);\n      }, function (res) {\n        callback(false, res);\n      });\n    };\n\n    this.observeSteps = function (callback) {\n      var stepsObserver = _reactNative.DeviceEventEmitter.addListener('StepChangedEvent', function (steps) {\n        return callback(steps);\n      });\n\n      googleFit.observeSteps();\n\n      _this.eventListeners.push(stepsObserver);\n    };\n\n    this.observeHistory = function (callback) {\n      var historyObserver = _reactNative.DeviceEventEmitter.addListener('StepHistoryChangedEvent', function (steps) {\n        return callback(steps);\n      });\n\n      _this.eventListeners.push(historyObserver);\n    };\n\n    this.onAuthorize = function (callback) {\n      var authObserver = _reactNative.DeviceEventEmitter.addListener('GoogleFitAuthorizeSuccess', function (authorized) {\n        return callback(authorized);\n      });\n\n      _this.eventListeners.push(authObserver);\n    };\n\n    this.onAuthorizeFailure = function (callback) {\n      var authFailedObserver = _reactNative.DeviceEventEmitter.addListener('GoogleFitAuthorizeFailure', function (authorized) {\n        return callback(authorized);\n      });\n\n      _this.eventListeners.push(authFailedObserver);\n    };\n\n    this.unsubscribeListeners = function () {\n      _this.removeListeners();\n    };\n\n    this.getHeartRateSamples = function _callee12(options) {\n      var _prepareInput8, startDate, endDate, bucketInterval, bucketUnit, result;\n\n      return _regenerator.default.async(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _prepareInput8 = (0, _utils.prepareInput)(options), startDate = _prepareInput8.startDate, endDate = _prepareInput8.endDate, bucketInterval = _prepareInput8.bucketInterval, bucketUnit = _prepareInput8.bucketUnit;\n              _context12.next = 3;\n              return _regenerator.default.awrap(googleFit.getHeartRateSamples(startDate, endDate, bucketInterval, bucketUnit));\n\n            case 3:\n              result = _context12.sent;\n\n              if (!(result.length > 0)) {\n                _context12.next = 6;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", (0, _utils.prepareResponse)(result, 'value'));\n\n            case 6:\n              return _context12.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.getBloodPressureSamples = function _callee13(options, callback) {\n      var _prepareInput9, startDate, endDate, bucketInterval, bucketUnit, result;\n\n      return _regenerator.default.async(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _prepareInput9 = (0, _utils.prepareInput)(options), startDate = _prepareInput9.startDate, endDate = _prepareInput9.endDate, bucketInterval = _prepareInput9.bucketInterval, bucketUnit = _prepareInput9.bucketUnit;\n              _context13.next = 3;\n              return _regenerator.default.awrap(googleFit.getBloodPressureSamples(startDate, endDate, bucketInterval, bucketUnit));\n\n            case 3:\n              result = _context13.sent;\n\n              if (!(result.length > 0)) {\n                _context13.next = 6;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", (0, _utils.prepareResponse)(result, 'systolic'));\n\n            case 6:\n              return _context13.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.getHydrationSamples = function _callee14(options) {\n      var _prepareInput10, startDate, endDate, result;\n\n      return _regenerator.default.async(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _prepareInput10 = (0, _utils.prepareInput)(options), startDate = _prepareInput10.startDate, endDate = _prepareInput10.endDate;\n              _context14.next = 3;\n              return _regenerator.default.awrap(googleFit.getHydrationSamples(startDate, endDate));\n\n            case 3:\n              result = _context14.sent;\n\n              if (!(result.length > 0)) {\n                _context14.next = 6;\n                break;\n              }\n\n              return _context14.abrupt(\"return\", (0, _utils.prepareHydrationResponse)(result));\n\n            case 6:\n              return _context14.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.deleteHydration = function (options, callback) {\n      googleFit.deleteHydration((0, _utils.prepareDeleteOptions)(options), function (msg) {\n        callback(msg, false);\n      }, function (res) {\n        callback(false, res);\n      });\n    };\n\n    this.getSleepSamples = function _callee15(options) {\n      var _prepareInput11, startDate, endDate, result;\n\n      return _regenerator.default.async(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _prepareInput11 = (0, _utils.prepareInput)(options), startDate = _prepareInput11.startDate, endDate = _prepareInput11.endDate;\n              _context15.next = 3;\n              return _regenerator.default.awrap(googleFit.getSleepSamples(startDate, endDate));\n\n            case 3:\n              result = _context15.sent;\n              return _context15.abrupt(\"return\", (0, _utils.prepareResponse)(result, \"addedBy\"));\n\n            case 5:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.saveSleep = function _callee16(options) {\n      var result;\n      return _regenerator.default.async(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return _regenerator.default.awrap(googleFit.saveSleep(options));\n\n            case 2:\n              result = _context16.sent;\n              return _context16.abrupt(\"return\", result);\n\n            case 4:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n\n  (0, _createClass2.default)(RNGoogleFit, [{\n    key: \"getDailySteps\",\n    value: function getDailySteps() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _moment.default)();\n      var options = {\n        startDate: (0, _moment.default)(date).startOf('day'),\n        endDate: (0, _moment.default)(date).endOf('day')\n      };\n      return this.getDailyStepCountSamples(options);\n    }\n  }, {\n    key: \"getWeeklySteps\",\n    value: function getWeeklySteps() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n      var adjustment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var _getWeekBoundary = (0, _utils.getWeekBoundary)(date, adjustment),\n          _getWeekBoundary2 = (0, _slicedToArray2.default)(_getWeekBoundary, 2),\n          startDate = _getWeekBoundary2[0],\n          endDate = _getWeekBoundary2[1];\n\n      var options = {\n        startDate: startDate,\n        endDate: endDate\n      };\n      return this.getDailyStepCountSamples(options);\n    }\n  }, {\n    key: \"saveFood\",\n    value: function saveFood(options, callback) {\n      options.date = Date.parse(options.date);\n      googleFit.saveFood(options, function (msg) {\n        callback(msg, false);\n      }, function (res) {\n        callback(false, res);\n      });\n    }\n  }, {\n    key: \"saveHeight\",\n    value: function saveHeight(options, callback) {\n      options.date = Date.parse(options.date);\n      googleFit.saveHeight(options, function (msg) {\n        callback(msg, false);\n      }, function (res) {\n        callback(false, res);\n      });\n    }\n  }, {\n    key: \"saveWeight\",\n    value: function saveWeight(options, callback) {\n      if (options.unit == 'pound') {\n        options.value = (0, _utils.lbsAndOzToK)({\n          pounds: options.value,\n          ounces: 0\n        });\n      }\n\n      options.date = Date.parse(options.date);\n      googleFit.saveWeight(options, function (msg) {\n        callback(msg, false);\n      }, function (res) {\n        callback(false, res);\n      });\n    }\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable(callback) {\n      googleFit.isAvailable(function (msg) {\n        callback(msg, false);\n      }, function (res) {\n        callback(false, res);\n      });\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(callback) {\n      googleFit.isEnabled(function (msg) {\n        callback(msg, false);\n      }, function (res) {\n        callback(false, res);\n      });\n    }\n  }, {\n    key: \"openFit\",\n    value: function openFit() {\n      googleFit.openFit();\n    }\n  }, {\n    key: \"saveHydration\",\n    value: function saveHydration(hydrationArray, callback) {\n      googleFit.saveHydration(hydrationArray, function (msg) {\n        callback(true, msg);\n      }, function (res) {\n        callback(false, res);\n      });\n    }\n  }]);\n  return RNGoogleFit;\n}();\n\nvar _default = new RNGoogleFit();\n\nexports.default = _default;\nvar Scopes = Object.freeze(_scopes.default);\nexports.Scopes = Scopes;\nvar MealType = Object.freeze({\n  UNKNOWN: 0,\n  BREAKFAST: 1,\n  LUNCH: 2,\n  DINNER: 3,\n  SNACK: 4\n});\nexports.MealType = MealType;\nvar SleepStage = Object.freeze({\n  AWAKE: 1,\n  SLEEP: 2,\n  OUT_OF_BED: 3,\n  LIGHT_SLEEP: 4,\n  DEEP_SLEEP: 5,\n  REM: 6\n});\nexports.SleepStage = SleepStage;\nvar Nutrient = Object.freeze({\n  CALORIES: 'calories',\n  TOTAL_FAT: 'fat.total',\n  SATURATED_FAT: 'fat.saturated',\n  UNSATURATED_FAT: 'fat.unsaturated',\n  POLYUNSATURATED_FAT: 'fat.polyunsaturated',\n  MONOUNSATURATED_FAT: 'fat.monounsaturated',\n  TRANS_FAT: 'fat.trans',\n  CHOLESTEROL: 'cholesterol',\n  SODIUM: 'sodium',\n  POTASSIUM: 'potassium',\n  TOTAL_CARBS: 'carbs.total',\n  DIETARY_FIBER: 'dietary_fiber',\n  SUGAR: 'sugar',\n  PROTEIN: 'protein',\n  VITAMIN_A: 'vitamin_a',\n  VITAMIN_C: 'vitamin_c',\n  CALCIUM: 'calcium',\n  IRON: 'iron'\n});\nexports.Nutrient = Nutrient;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/node_modules/react-native-google-fit/index.android.js"],"names":["googleFit","NativeModules","RNGoogleFit","eventListeners","isAuthorized","authorize","options","successResponse","success","checkIsAuthorized","Promise","resolve","reject","onAuthorize","onAuthorizeFailure","error","message","defaultScopes","Scopes","FITNESS_ACTIVITY_READ","FITNESS_BODY_WRITE","FITNESS_LOCATION_READ","scopes","authResult","disconnect","removeListeners","forEach","eventListener","remove","checkPermissionAndroid","PermissionsAndroid","check","PERMISSIONS","ACCESS_FINE_LOCATION","response","requestPermissionAndroid","dataTypes","includes","request","title","buttonNegative","buttonPositive","granted","RESULTS","GRANTED","filter","data","console","warn","startRecording","callback","then","startFitnessRecording","map","dataTypeName","eventName","toUpperCase","DeviceEventEmitter","addListener","event","push","getDailyStepCountSamples","startDate","endDate","bucketInterval","bucketUnit","length","result","dev","obj","source","appPackage","stream","steps","rawSteps","getUserInputSteps","Date","parse","setHours","valueOf","msg","res","getDailyDistanceSamples","getActivitySamples","getDailyCalorieSamples","basalCalculation","getDailyNutritionSamples","getWeightSamples","raw_result","value","Object","keys","el","unit","toISOString","getHeightSamples","deleteWeight","deleteHeight","observeSteps","stepsObserver","observeHistory","historyObserver","authObserver","authorized","authFailedObserver","unsubscribeListeners","getHeartRateSamples","getBloodPressureSamples","getHydrationSamples","deleteHydration","getSleepSamples","saveSleep","date","startOf","endOf","adjustment","saveFood","saveHeight","pounds","ounces","saveWeight","isAvailable","isEnabled","openFit","hydrationArray","saveHydration","freeze","PossibleScopes","MealType","UNKNOWN","BREAKFAST","LUNCH","DINNER","SNACK","SleepStage","AWAKE","SLEEP","OUT_OF_BED","LIGHT_SLEEP","DEEP_SLEEP","REM","Nutrient","CALORIES","TOTAL_FAT","SATURATED_FAT","UNSATURATED_FAT","POLYUNSATURATED_FAT","MONOUNSATURATED_FAT","TRANS_FAT","CHOLESTEROL","SODIUM","POTASSIUM","TOTAL_CARBS","DIETARY_FIBER","SUGAR","PROTEIN","VITAMIN_A","VITAMIN_C","CALCIUM","IRON"],"mappings":"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","sourcesContent":["'use strict'\nimport { DeviceEventEmitter, NativeModules, PermissionsAndroid } from 'react-native';\nimport moment from 'moment';\n\nimport PossibleScopes from './src/scopes';\nimport {\n  buildDailySteps,\n  isNil,\n  KgToLbs,\n  lbsAndOzToK,\n  prepareDailyResponse,\n  prepareResponse,\n  prepareHydrationResponse,\n  prepareDeleteOptions,\n  getWeekBoundary,\n  prepareInput,\n} from './src/utils';\n\nconst googleFit = NativeModules.RNGoogleFit\n\nclass RNGoogleFit {\n  eventListeners = []\n  isAuthorized = false\n\n  authorize = async (options = {}) => {\n    const successResponse = { success: true }\n    try {\n      await this.checkIsAuthorized()\n      if (this.isAuthorized) {\n        return successResponse\n      }\n      const authResult = await new Promise((resolve, reject) => {\n        this.onAuthorize(() => {\n          this.isAuthorized = true\n          resolve(successResponse)\n        })\n        this.onAuthorizeFailure(error => {\n          this.isAuthorized = false\n          reject({ success: false, message: error.message })\n        })\n\n        const defaultScopes = [\n          Scopes.FITNESS_ACTIVITY_READ,\n          Scopes.FITNESS_BODY_WRITE,\n          Scopes.FITNESS_LOCATION_READ,\n        ]\n\n        googleFit.authorize({\n          scopes: (options && options.scopes) || defaultScopes,\n        })\n      })\n      return authResult\n    } catch (error) {\n      return { success: false, message: error.message }\n    }\n  }\n\n  checkIsAuthorized = async () => {\n    const { isAuthorized } = await googleFit.isAuthorized()\n    this.isAuthorized = isAuthorized\n  }\n\n  disconnect = () => {\n    this.isAuthorized = false\n    googleFit.disconnect()\n    this.removeListeners()\n  }\n\n  removeListeners = () => {\n    this.eventListeners.forEach(eventListener => eventListener.remove())\n    this.eventListeners = []\n  }\n\n\n  // recommend to refactor both permission to allow other permission options besides PERMISSONS.ACCESS_FINE_LOCATION\n  // check permissions\n  checkPermissionAndroid = async () => {\n    const response = await PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);\n    return response === true;\n  }\n\n  // request permissions\n  requestPermissionAndroid = async (dataTypes) => {\n    const check = await this.checkPermissionAndroid();\n\n    if (dataTypes.includes('distance') && !check) {\n      try {\n        const granted = await PermissionsAndroid.request(\n          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\n          {\n            title: \"Access Location Permisson\",\n            message:\n              \"Enable location access for Google Fit Api. \" +\n              \"Cancel may cause inaccuray result\",\n            buttonNegative: \"Cancel\",\n            buttonPositive: \"OK\"\n          }\n        );\n\n        // this need to be changed in the future if we want to use RecordingAPI for more sensitive permissions\n        if( granted === PermissionsAndroid.RESULTS.GRANTED ) {\n          // we don't do anything here since the permissons are granted\n        } else {\n          // remove distance from array to avoid crash,\n          return dataTypes.filter(data => data !== 'distance');\n        }\n      } catch (err) {\n        console.warn(err);\n      };\n    }\n    return dataTypes;\n  }\n\n  /**\n   * Start recording fitness data\n   *\n   * You could specify data by array dataTypes. Possible values - step, distance, activity which corresponds\n   * DataTypes.TYPE_STEP_CUMULATIVE, DataType.TYPE_DISTANCE_DELTA and DataType.TYPE_ACTIVITIES_SAMPLES\n   *\n   * Default value for dataTypes is steps and distance data\n   *\n   * This function relies on sending events to signal the RecordingAPI status\n   * Simply create an event listener for the {DATA_TYPE}_RECORDING (ex. STEP_RECORDING)\n   * and check for {recording: true} as the event data\n   */\n  startRecording = (callback, dataTypes = ['step']) => {\n    this.requestPermissionAndroid(dataTypes).then((dataTypes) => {\n      googleFit.startFitnessRecording(dataTypes)\n\n      const eventListeners = dataTypes.map(dataTypeName => {\n        const eventName = `${dataTypeName.toUpperCase()}_RECORDING`\n\n        return DeviceEventEmitter.addListener(eventName, event => callback(event))\n      })\n\n      this.eventListeners.push(...eventListeners)\n    })\n  }\n\n\n  /**\n   * A shortcut to get the total steps of a given day by using getDailyStepCountSamples\n   * @param {Date} date optional param, new moment() will be used if date is not provided\n   */\n  getDailySteps(date = moment()) {\n    const options = {\n      startDate: moment(date).startOf('day'),\n      endDate: moment(date).endOf('day'),\n    };\n    return this.getDailyStepCountSamples(options);\n  }\n\n  /**\n   * A shortcut to get the weekly steps of a given day by using getDailyStepCountSamples\n   * @param {Date} date optional param, new Date() will be used if date is not provided\n   * @param {number} adjustment, use to adjust the default start day of week, 0 = Sunday, 1 = Monday, etc.\n   */\n  getWeeklySteps(date=new Date(), adjustment=0) {\n    const [startDate, endDate] = getWeekBoundary(date, adjustment);\n    const options = {\n      startDate: startDate,\n      endDate: endDate,\n    }\n    return this.getDailyStepCountSamples(options);\n  }\n\n  /**\n   * Get the total steps per day over a specified date range.\n   * @param {Object} options getDailyStepCountSamples accepts an options object containing required startDate: ISO8601Timestamp and endDate: ISO8601Timestamp.\n   */\n\n  getDailyStepCountSamples = async (options) => {\n    const { startDate, endDate, bucketInterval, bucketUnit } = prepareInput(options);\n\n    const data = await googleFit.getDailyStepCountSamples(\n      startDate,\n      endDate,\n      bucketInterval,\n      bucketUnit,\n    );\n\n    var result;\n    if(data.length > 0) {\n      result = data.map(function(dev) {\n        const obj = {}\n        obj.source =\n          dev.source.appPackage +\n          (dev.source.stream ? ':' + dev.source.stream : '')\n        obj.steps = buildDailySteps(dev.steps)\n        obj.rawSteps = dev.steps\n        return obj\n      }, this);\n    }else{\n      //simply return raw result for better debugging;\n      return data;\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the total steps per day over a specified date range.\n   * @param {Object} options getUserInputSteps accepts an options object containing required startDate: ISO8601Timestamp and endDate: ISO8601Timestamp.\n   * @param {Function} callback The function will be called with an array of elements.\n   */\n\n  getUserInputSteps = (options, callback) => {\n    const startDate = !isNil(options.startDate) ? Date.parse(options.startDate) : (new Date()).setHours(0, 0, 0, 0)\n    const endDate = !isNil(options.endDate) ? Date.parse(options.endDate) : (new Date()).valueOf()\n    googleFit.getUserInputSteps(startDate, endDate,\n      (msg) => callback(msg, false),\n      (res) => {\n        callback(null, res);\n      }\n    )\n  }\n\n  /**\n   * Get the total distance per day over a specified date range.\n   * @param {Object} options getDailyDistanceSamples accepts an options object containing required startDate: ISO8601Timestamp and endDate: ISO8601Timestamp.\n   */\n\n  getDailyDistanceSamples = async (options) => {\n    const { startDate, endDate, bucketInterval, bucketUnit } = prepareInput(options);\n\n    const result = await googleFit.getDailyDistanceSamples(\n      startDate,\n      endDate,\n      bucketInterval,\n      bucketUnit,\n    );\n\n    //construct dataset when callback is successful\n    if (result.length > 0) {\n      return prepareResponse(result, 'distance');\n    }\n    //else either no data exists or something wrong;\n    return result;\n  }\n\n  getActivitySamples = async (options) => {\n    const { startDate, endDate, bucketInterval, bucketUnit } = prepareInput(options);\n\n    const result = await googleFit.getActivitySamples(\n      startDate,\n      endDate,\n      bucketInterval,\n      bucketUnit\n    );\n\n    return result;\n  }\n\n  /**\n   * Get the total calories per day over a specified date range.\n   * @param {Object} options getDailyCalorieSamples accepts an options object containing:\n   * required startDate: ISO8601Timestamp and endDate: ISO8601Timestamp\n   * optional basalCalculation - {true || false} should we substract the basal metabolic rate averaged over a week\n   */\n\n  getDailyCalorieSamples = async (options) => {\n    const basalCalculation = options.basalCalculation !== false\n    const { startDate, endDate, bucketInterval, bucketUnit } = prepareInput(options);\n\n    const result = await googleFit.getDailyCalorieSamples(\n      startDate,\n      endDate,\n      basalCalculation,\n      bucketInterval,\n      bucketUnit,\n    );\n\n    //construct dataset when callback is successful\n    if (result.length > 0) {\n      return prepareResponse(result, 'calorie');\n    }\n    //else either no data exists or something wrong;\n    return result;\n  }\n\n  getDailyNutritionSamples = async (options) => {\n    const { startDate, endDate, bucketInterval, bucketUnit } = prepareInput(options);\n    const result = await googleFit.getDailyNutritionSamples(\n      startDate,\n      endDate,\n      bucketInterval,\n      bucketUnit,\n    );\n    //construct dataset when callback is successful\n    if (result.length > 0) {\n      return prepareDailyResponse(result);\n    }\n    //else either no data exists or something wrong;\n    return result;\n  }\n\n  saveFood(options, callback) {\n    options.date = Date.parse(options.date)\n    googleFit.saveFood(\n      options,\n      msg => {\n        callback(msg, false)\n      },\n      res => {\n        callback(false, res)\n      }\n    )\n  }\n\n  /**\n   * Query for weight samples. the options object is used to setup a query to retrieve relevant samples.\n   * @param {Object} options  getDailyStepCountSamples accepts an options object containing unit: \"pound\"/\"kg\",\n   *                          startDate: ISO8601Timestamp and endDate: ISO8601Timestamp.\n   */\n\n  getWeightSamples = async (options) => {\n    const { startDate, endDate, bucketInterval, bucketUnit } = prepareInput(options);\n\n    const raw_result = await googleFit.getWeightSamples(\n      startDate,\n      endDate,\n      bucketInterval,\n      bucketUnit\n    );\n\n    if (raw_result.length > 0) {\n      //remove empty object first and then parse fitness data\n      const result = raw_result\n        .filter(value => Object.keys(value).length !== 0)\n        .map(el => {\n          if (el.value) {\n            if (options.unit === 'pound') {\n              el.value = KgToLbs(el.value) //convert back to pounds\n            }\n            el.startDate = new Date(el.startDate).toISOString()\n            el.endDate = new Date(el.endDate).toISOString()\n            return el\n          }\n        });\n\n      return result;\n    }\n\n    return raw_result;\n  }\n\n  /**\n   * Query for height samples. the options object is used to setup a query to retrieve relevant samples.\n   * @param {Object} options  getDailyStepCountSamples accepts an options object containing unit: \"pound\"/\"kg\",\n   *                          startDate: ISO8601Timestamp and endDate: ISO8601Timestamp.\n   * Note that bucketInterval and bucketUnit have no effect at the result since GoogleFit only contains one height data.\n   */\n\n  getHeightSamples = async (options) => {\n    const { startDate, endDate, bucketInterval, bucketUnit } = prepareInput(options);\n    const result = await googleFit.getHeightSamples(\n      startDate,\n      endDate,\n      bucketInterval,\n      bucketUnit\n    );\n    if (result.length > 0) {\n      return prepareResponse(result, 'value');\n    }\n\n    return result;\n  }\n\n  saveHeight(options, callback) {\n    options.date = Date.parse(options.date)\n    googleFit.saveHeight(\n      options,\n      msg => {\n        callback(msg, false)\n      },\n      res => {\n        callback(false, res)\n      }\n    )\n  }\n\n  saveWeight(options, callback) {\n    if (options.unit == 'pound') {\n      options.value = lbsAndOzToK({ pounds: options.value, ounces: 0 }) //convert pounds and ounces to kg\n    }\n    options.date = Date.parse(options.date)\n    googleFit.saveWeight(\n      options,\n      msg => {\n        callback(msg, false)\n      },\n      res => {\n        callback(false, res)\n      }\n    )\n  }\n\n  deleteWeight = (options, callback) => {\n    googleFit.deleteWeight(\n      prepareDeleteOptions(options),\n      msg => {\n        callback(msg, false)\n      },\n      res => {\n        callback(false, res)\n      }\n    )\n  }\n\n  deleteHeight = (options, callback) => {\n    googleFit.deleteHeight(\n      prepareDeleteOptions(options),\n      msg => {\n        callback(msg, false)\n      },\n      res => {\n        callback(false, res)\n      }\n    )\n  }\n\n  isAvailable(callback) {\n    // true if GoogleFit installed\n    googleFit.isAvailable(\n      msg => {\n        callback(msg, false)\n      },\n      res => {\n        callback(false, res)\n      }\n    )\n  }\n\n  isEnabled(callback) {\n    // true if permission granted\n    googleFit.isEnabled(\n      msg => {\n        callback(msg, false)\n      },\n      res => {\n        callback(false, res)\n      }\n    )\n  }\n\n  openFit() {\n    googleFit.openFit()\n  }\n\n  observeSteps = callback => {\n    const stepsObserver = DeviceEventEmitter.addListener(\n      'StepChangedEvent',\n      steps => callback(steps)\n    )\n    googleFit.observeSteps()\n    this.eventListeners.push(stepsObserver)\n  }\n\n  observeHistory = callback => {\n    const historyObserver = DeviceEventEmitter.addListener(\n      'StepHistoryChangedEvent',\n      steps => callback(steps)\n    )\n    this.eventListeners.push(historyObserver)\n  }\n\n  onAuthorize = callback => {\n    const authObserver = DeviceEventEmitter.addListener(\n      'GoogleFitAuthorizeSuccess',\n      authorized => callback(authorized)\n    )\n    this.eventListeners.push(authObserver)\n  }\n\n  onAuthorizeFailure = callback => {\n    const authFailedObserver = DeviceEventEmitter.addListener(\n      'GoogleFitAuthorizeFailure',\n      authorized => callback(authorized)\n    )\n    this.eventListeners.push(authFailedObserver)\n  }\n\n  unsubscribeListeners = () => {\n    this.removeListeners()\n  }\n\n  getHeartRateSamples = async (options) => {\n    const { startDate, endDate, bucketInterval, bucketUnit } = prepareInput(options);\n    const result = await googleFit.getHeartRateSamples(\n      startDate,\n      endDate,\n      bucketInterval,\n      bucketUnit\n    );\n    if (result.length > 0) {\n      return prepareResponse(result, 'value');\n    }\n    return result;\n  }\n\n  getBloodPressureSamples = async (options, callback) => {\n    const { startDate, endDate, bucketInterval, bucketUnit } = prepareInput(options);\n    const result = await googleFit.getBloodPressureSamples(\n      startDate,\n      endDate,\n      bucketInterval,\n      bucketUnit,\n    );\n    if (result.length > 0) {\n      return prepareResponse(result, 'systolic');\n    }\n    return result;\n  }\n\n  getHydrationSamples = async (options) => {\n    const { startDate, endDate } = prepareInput(options);\n    const result = await googleFit.getHydrationSamples(\n      startDate,\n      endDate\n    );\n\n    if (result.length > 0) {\n      return prepareHydrationResponse(result);\n    }\n    return result;\n  }\n\n  saveHydration(hydrationArray, callback) {\n    googleFit.saveHydration(\n      hydrationArray,\n      msg => {\n        callback(true, msg)\n      },\n      res => {\n        callback(false, res)\n      }\n    )\n  }\n\n  deleteHydration = (options, callback) => {\n    googleFit.deleteHydration(\n      prepareDeleteOptions(options),\n      msg => {\n        callback(msg, false)\n      },\n      res => {\n        callback(false, res)\n      }\n    )\n  }\n\n  /**\n   * Get the sleep sessions over a specified date range.\n   * @param {Object} options getSleepData accepts an options object containing required startDate: ISO8601Timestamp and endDate: ISO8601Timestamp.\n   */\n\n  getSleepSamples = async (options) => {\n    const { startDate, endDate } = prepareInput(options);\n\n    const result = await googleFit.getSleepSamples(\n      startDate,\n      endDate\n    );\n\n    return prepareResponse(result, \"addedBy\");\n  }\n\n  saveSleep = async (options) => {\n    const result = await googleFit.saveSleep(options);\n    return result;\n  }\n}\n\nexport default new RNGoogleFit()\n\n// Possible Scopes\nexport const Scopes = Object.freeze(PossibleScopes)\n\n//Data types for food addition\nexport const MealType = Object.freeze({\n  UNKNOWN: 0,\n  BREAKFAST: 1,\n  LUNCH: 2,\n  DINNER: 3,\n  SNACK: 4,\n})\n\nexport const SleepStage = Object.freeze({\n  AWAKE: 1,\n  SLEEP: 2,\n  OUT_OF_BED: 3,\n  LIGHT_SLEEP: 4,\n  DEEP_SLEEP: 5,\n  REM: 6\n});\n\nexport const Nutrient = Object.freeze({\n  /**\n   * Calories in kcal\n   * @type {string}\n   */\n  CALORIES: 'calories',\n  /**\n   * Total fat in grams.\n   * @type {string}\n   */\n  TOTAL_FAT: 'fat.total',\n  /**\n   * Saturated fat in grams.\n   * @type {string}\n   */\n  SATURATED_FAT: 'fat.saturated',\n  /**\n   * Unsaturated fat in grams.\n   * @type {string}\n   */\n  UNSATURATED_FAT: 'fat.unsaturated',\n  /**\n   * Polyunsaturated fat in grams.\n   * @type {string}\n   */\n  POLYUNSATURATED_FAT: 'fat.polyunsaturated',\n  /**\n   * Monounsaturated fat in grams.\n   * @type {string}\n   */\n  MONOUNSATURATED_FAT: 'fat.monounsaturated',\n  /**\n   * Trans fat in grams.\n   * @type {string}\n   */\n  TRANS_FAT: 'fat.trans',\n  /**\n   * Cholesterol in milligrams.\n   * @type {string}\n   */\n  CHOLESTEROL: 'cholesterol',\n  /**\n   * Sodium in milligrams.\n   * @type {string}\n   */\n  SODIUM: 'sodium',\n  /**\n   * Potassium in milligrams.\n   * @type {string}\n   */\n  POTASSIUM: 'potassium',\n  /**\n   * Total carbohydrates in grams.\n   * @type {string}\n   */\n  TOTAL_CARBS: 'carbs.total',\n  /**\n   * Dietary fiber in grams\n   * @type {string}\n   */\n  DIETARY_FIBER: 'dietary_fiber',\n  /**\n   * Sugar amount in grams.\n   * @type {string}\n   */\n  SUGAR: 'sugar',\n  /**\n   * Protein amount in grams.\n   * @type {string}\n   */\n  PROTEIN: 'protein',\n  /**\n   * Vitamin A amount in International Units (IU).\n   * @type {string}\n   */\n  VITAMIN_A: 'vitamin_a',\n  /**\n   * Vitamin C amount in milligrams.\n   * @type {string}\n   */\n  VITAMIN_C: 'vitamin_c',\n  /**\n   * Calcium amount in milligrams.\n   * @type {string}\n   */\n  CALCIUM: 'calcium',\n  /**\n   * Iron amount in milligrams\n   * @type {string}\n   */\n  IRON: 'iron',\n})\n"]},"metadata":{},"sourceType":"script"}