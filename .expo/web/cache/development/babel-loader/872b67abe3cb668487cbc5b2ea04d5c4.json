{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BleDevice = exports.BleManager = exports.DATA_AVAILABLE_EVENT = exports.PoweredOffError = exports.UnsupportedError = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _wrapNativeSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));\n\nvar _models = require(\"../models\");\n\nvar _reactNativeBlePlx = require(\"react-native-ble-plx\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _events = require(\"events\");\n\nvar _buffer = require(\"buffer\");\n\nvar _manufacterMap = require(\"./manufacterMap\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar UnsupportedError = function (_Error) {\n  (0, _inherits2.default)(UnsupportedError, _Error);\n\n  var _super = _createSuper(UnsupportedError);\n\n  function UnsupportedError() {\n    (0, _classCallCheck2.default)(this, UnsupportedError);\n    return _super.apply(this, arguments);\n  }\n\n  return UnsupportedError;\n}((0, _wrapNativeSuper2.default)(Error));\n\nexports.UnsupportedError = UnsupportedError;\n\nvar PoweredOffError = function (_Error2) {\n  (0, _inherits2.default)(PoweredOffError, _Error2);\n\n  var _super2 = _createSuper(PoweredOffError);\n\n  function PoweredOffError() {\n    (0, _classCallCheck2.default)(this, PoweredOffError);\n    return _super2.apply(this, arguments);\n  }\n\n  return PoweredOffError;\n}((0, _wrapNativeSuper2.default)(Error));\n\nexports.PoweredOffError = PoweredOffError;\nvar DATA_AVAILABLE_EVENT = 'data_available';\nexports.DATA_AVAILABLE_EVENT = DATA_AVAILABLE_EVENT;\n\nvar BleManager = function () {\n  function BleManager(nativeManager) {\n    (0, _classCallCheck2.default)(this, BleManager);\n    this.nativeManager = nativeManager;\n  }\n\n  (0, _createClass2.default)(BleManager, [{\n    key: \"startScan\",\n    value: function startScan(onDeviceFound) {\n      this.nativeManager.startDeviceScan(null, null, function _callee(error, device) {\n        return _regenerator.default.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(error || !device)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.t0 = onDeviceFound;\n                _context.next = 5;\n                return _regenerator.default.awrap(getManufacturerDeviceFromId(device));\n\n              case 5:\n                _context.t1 = _context.sent;\n                (0, _context.t0)(_context.t1);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    }\n  }, {\n    key: \"stopScan\",\n    value: function stopScan() {\n      this.nativeManager.stopDeviceScan();\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(deviceId) {\n      var dev, discoveredDev, healthDev;\n      return _regenerator.default.async(function connect$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regenerator.default.awrap(this.nativeManager.connectToDevice(deviceId));\n\n            case 2:\n              dev = _context2.sent;\n              _context2.next = 5;\n              return _regenerator.default.awrap(dev.discoverAllServicesAndCharacteristics());\n\n            case 5:\n              discoveredDev = _context2.sent;\n              _context2.next = 8;\n              return _regenerator.default.awrap(discoveredDev.services());\n\n            case 8:\n              _context2.next = 10;\n              return _regenerator.default.awrap(getManufacturerDeviceFromId(discoveredDev));\n\n            case 10:\n              healthDev = _context2.sent;\n              healthDev.connected = true;\n              return _context2.abrupt(\"return\", healthDev);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }], [{\n    key: \"GetManager\",\n    value: function GetManager() {\n      return _regenerator.default.async(function GetManager$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", new Promise(function _callee2(resolve, reject) {\n                var native, granted, nativeState, sub;\n                return _regenerator.default.async(function _callee2$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        native = new _reactNativeBlePlx.BleManager();\n\n                        if (!(_reactNative.Platform.OS === 'android')) {\n                          _context3.next = 6;\n                          break;\n                        }\n\n                        _context3.next = 4;\n                        return _regenerator.default.awrap(_reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION, {\n                          title: 'Bluetooth Permission',\n                          message: \"Application would like to use bluetooth and location permissions\",\n                          buttonNeutral: 'Ask Me Later',\n                          buttonNegative: 'Cancel',\n                          buttonPositive: 'OK'\n                        }));\n\n                      case 4:\n                        granted = _context3.sent;\n\n                        if (granted !== _reactNative.PermissionsAndroid.RESULTS.GRANTED) {\n                          reject(new Error('Bluetooth permissions not granted'));\n                        }\n\n                      case 6:\n                        _context3.next = 8;\n                        return _regenerator.default.awrap(native.state());\n\n                      case 8:\n                        nativeState = _context3.sent;\n\n                        if (nativeState === _reactNativeBlePlx.State.PoweredOn) {\n                          console.log('Bluetooth on');\n                          resolve(new BleManager(native));\n                        }\n\n                        if (!(nativeState === _reactNativeBlePlx.State.Unsupported)) {\n                          _context3.next = 15;\n                          break;\n                        }\n\n                        console.log(\"Bluetooth unsupported\");\n                        reject(new UnsupportedError('Bluetooth not supported in this device'));\n                        _context3.next = 23;\n                        break;\n\n                      case 15:\n                        if (!(nativeState === _reactNativeBlePlx.State.PoweredOff)) {\n                          _context3.next = 20;\n                          break;\n                        }\n\n                        console.log('Bluetooth off');\n                        reject(new PoweredOffError('Bluetooth disabled on the device'));\n                        _context3.next = 23;\n                        break;\n\n                      case 20:\n                        sub = native.onStateChange(function (state) {\n                          console.log(\"Current Bluetooth Adapter state: \" + state);\n\n                          if (state === 'PoweredOn') {\n                            sub.remove();\n                            resolve(new BleManager(native));\n                          } else if (state === 'Unknown') {\n                            return;\n                          } else {\n                            reject();\n                          }\n                        }, true);\n                        _context3.next = 23;\n                        return _regenerator.default.awrap(native.state());\n\n                      case 23:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n  return BleManager;\n}();\n\nexports.BleManager = BleManager;\n\nvar BleDevice = function () {\n  function BleDevice(nativeDevice) {\n    (0, _classCallCheck2.default)(this, BleDevice);\n    this.nativeDevice = nativeDevice;\n    this.type = 'real';\n    this.id = nativeDevice.id;\n    this.name = nativeDevice.name ? nativeDevice.name : nativeDevice.id;\n    this.paired = true;\n    this.enabled = {};\n    this.connected = false;\n    this.eventEmitter = new _events.EventEmitter();\n  }\n\n  (0, _createClass2.default)(BleDevice, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      this.eventEmitter.addListener(eventType, listener);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      this.eventEmitter.removeListener(eventType, listener);\n    }\n  }, {\n    key: \"enableItem\",\n    value: function enableItem(item, status) {\n      var _this = this;\n\n      return _regenerator.default.async(function enableItem$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (status) {\n                _context5.next = 4;\n                break;\n              }\n\n              if (this.enabled[item.id]) {\n                this.enabled[item.id].remove();\n                delete this.enabled[item.id];\n              }\n\n              item.enabled = false;\n              return _context5.abrupt(\"return\", false);\n\n            case 4:\n              this.enabled[item.id] = this.nativeDevice.monitorCharacteristicForService(item.parentId, item.id, function (error, characteristic) {\n                if (error || !characteristic) {\n                  return;\n                }\n\n                _this.eventEmitter.emit(DATA_AVAILABLE_EVENT, {\n                  itemId: item.id,\n                  value: _this.getValue(characteristic),\n                  itemName: item.name\n                });\n              });\n              item.enabled = true;\n              return _context5.abrupt(\"return\", true);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(characteristic) {\n      if (characteristic.value == null) {\n        return null;\n      }\n\n      var val = _buffer.Buffer.from(characteristic.value, 'base64');\n\n      if (val.length === 1) {\n        var intval = val.readInt8();\n        return intval;\n      } else if (val.length === 4) {\n        return new DataView(val.buffer).getFloat32(0);\n      }\n\n      return +val;\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch() {\n      var _this2 = this;\n\n      return _regenerator.default.async(function fetch$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (this.connected) {\n                _context7.next = 2;\n                break;\n              }\n\n              throw new Error('Device not connected');\n\n            case 2:\n              _context7.t0 = _regenerator.default;\n              _context7.t1 = Promise;\n              _context7.next = 6;\n              return _regenerator.default.awrap(this.nativeDevice.services());\n\n            case 6:\n              _context7.t2 = _context7.sent.map(function _callee3(service) {\n                return _regenerator.default.async(function _callee3$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        _context6.t0 = _regenerator.default;\n                        _context6.t1 = Promise;\n                        _context6.next = 4;\n                        return _regenerator.default.awrap(service.characteristics());\n\n                      case 4:\n                        _context6.t2 = _context6.sent.map(function (characteristic) {\n                          var c = {\n                            id: characteristic.uuid,\n                            parentId: characteristic.serviceUUID,\n                            name: characteristic.uuid,\n                            enabled: (0, _models.isHealthService)(characteristic.serviceUUID),\n                            value: undefined\n                          };\n\n                          c.enable = function (status) {\n                            return this.enableItem(c, status);\n                          }.bind(_this2);\n\n                          return c;\n                        }, _this2);\n                        _context6.t3 = _context6.t1.all.call(_context6.t1, _context6.t2);\n                        _context6.next = 8;\n                        return _context6.t0.awrap.call(_context6.t0, _context6.t3);\n\n                      case 8:\n                        return _context6.abrupt(\"return\", _context6.sent);\n\n                      case 9:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }, this);\n              _context7.t3 = _context7.t1.all.call(_context7.t1, _context7.t2);\n              _context7.next = 10;\n              return _context7.t0.awrap.call(_context7.t0, _context7.t3);\n\n            case 10:\n              this.items = _context7.sent.reduce(function (a, b) {\n                return a.concat(b);\n              });\n              this.items.forEach(function (item) {\n                if (item.enabled) {\n                  item.enable(true);\n                }\n              });\n\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _this3 = this;\n\n      return _regenerator.default.async(function disconnect$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              Object.keys(this.enabled).forEach(function (enabledItem) {\n                _this3.enabled[enabledItem].remove();\n\n                delete _this3.enabled[enabledItem];\n              });\n              this.eventEmitter.removeAllListeners(DATA_AVAILABLE_EVENT);\n              _context8.next = 4;\n              return _regenerator.default.awrap(this.nativeDevice.cancelConnection());\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return BleDevice;\n}();\n\nexports.BleDevice = BleDevice;\n\nfunction getManufacturerDeviceFromId(nativeDevice) {\n  var custom;\n  return _regenerator.default.async(function getManufacturerDeviceFromId$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          custom = null;\n\n          if (nativeDevice.serviceUUIDs) {\n            _manufacterMap.ManufacturerMap.getManufacturers().forEach(function (manId) {\n              var ids = _manufacterMap.ManufacturerMap.getManufacturerIds(manId);\n\n              if (!ids) {\n                return;\n              }\n\n              if (ids.filter(function (id) {\n                var _nativeDevice$service;\n\n                return (_nativeDevice$service = nativeDevice.serviceUUIDs) == null ? void 0 : _nativeDevice$service.includes(id);\n              }).length > 0) {\n                var ctor = _manufacterMap.ManufacturerMap.getManufacturerConstructor(manId);\n\n                if (!ctor) {\n                  return;\n                }\n\n                custom = new ctor(nativeDevice);\n              }\n            });\n          }\n\n          if (!custom) {\n            _context9.next = 4;\n            break;\n          }\n\n          return _context9.abrupt(\"return\", custom);\n\n        case 4:\n          return _context9.abrupt(\"return\", new BleDevice(nativeDevice));\n\n        case 5:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/health/ble.ts"],"names":["UnsupportedError","Error","PoweredOffError","DATA_AVAILABLE_EVENT","BleManager","nativeManager","onDeviceFound","startDeviceScan","error","device","getManufacturerDeviceFromId","stopDeviceScan","deviceId","connectToDevice","dev","discoverAllServicesAndCharacteristics","discoveredDev","services","healthDev","connected","Promise","resolve","reject","native","NativeManager","Platform","OS","PermissionsAndroid","request","PERMISSIONS","ACCESS_COARSE_LOCATION","title","message","buttonNeutral","buttonNegative","buttonPositive","granted","RESULTS","GRANTED","state","nativeState","State","PoweredOn","console","log","Unsupported","PoweredOff","sub","onStateChange","remove","BleDevice","nativeDevice","type","id","name","paired","enabled","eventEmitter","EventEmitter","eventType","listener","context","addListener","removeListener","item","status","monitorCharacteristicForService","parentId","characteristic","emit","itemId","value","getValue","itemName","val","Buffer","from","length","intval","readInt8","DataView","buffer","getFloat32","map","service","characteristics","c","uuid","serviceUUID","undefined","enable","enableItem","bind","all","items","reduce","a","b","concat","forEach","Object","keys","enabledItem","removeAllListeners","cancelConnection","custom","serviceUUIDs","ManufacturerMap","getManufacturers","manId","ids","getManufacturerIds","filter","includes","ctor","getManufacturerConstructor"],"mappings":"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","sourcesContent":["import { IHealthManager, IHealthDevice, IHealthItem, DeviceType, isHealthService } from \"../models\";\r\nimport { BleManager as NativeManager, State, Device, Subscription, Characteristic } from 'react-native-ble-plx';\r\nimport { Platform, PermissionsAndroid } from \"react-native\";\r\nimport { EventEmitter } from 'events';\r\nimport { Buffer } from 'buffer';\r\nimport { ManufacturerMap } from \"./manufacterMap\";\r\n\r\n\r\nexport class UnsupportedError extends Error {\r\n\r\n}\r\n\r\nexport class PoweredOffError extends Error {\r\n\r\n}\r\n\r\nexport const DATA_AVAILABLE_EVENT = 'data_available';\r\n\r\n\r\n\r\nexport class BleManager implements IHealthManager {\r\n\r\n\r\n    constructor(protected nativeManager: NativeManager) {\r\n\r\n    }\r\n\r\n    static async GetManager(): Promise<BleManager> {\r\n        return new Promise<BleManager>(async (resolve, reject) => {\r\n            const native = new NativeManager();\r\n            if (Platform.OS === 'android') {\r\n                const granted = await PermissionsAndroid.request(\r\n                    PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION,\r\n                    {\r\n                        title: 'Bluetooth Permission',\r\n                        message: `Application would like to use bluetooth and location permissions`,\r\n                        buttonNeutral: 'Ask Me Later',\r\n                        buttonNegative: 'Cancel',\r\n                        buttonPositive: 'OK',\r\n                    }\r\n                );\r\n                if (granted !== PermissionsAndroid.RESULTS.GRANTED) {\r\n                    reject(new Error('Bluetooth permissions not granted'));\r\n                }\r\n            }\r\n            let nativeState = await native.state();\r\n            if (nativeState === State.PoweredOn) {\r\n                console.log('Bluetooth on');\r\n                resolve(new BleManager(native));\r\n            }\r\n            if (nativeState === State.Unsupported) {\r\n                console.log(`Bluetooth unsupported`);\r\n                reject(new UnsupportedError('Bluetooth not supported in this device'));\r\n            }\r\n            else if (nativeState === State.PoweredOff) {\r\n                console.log('Bluetooth off');\r\n                reject(new PoweredOffError('Bluetooth disabled on the device'));\r\n            }\r\n            else {\r\n                const sub = native.onStateChange((state) => {\r\n                    console.log(`Current Bluetooth Adapter state: ${state}`);\r\n                    if (state === 'PoweredOn') {\r\n                        sub.remove();\r\n                        resolve(new BleManager(native));\r\n                    }\r\n                    else if (state === 'Unknown') {\r\n                        return;\r\n                    }\r\n                    else {\r\n                        reject();\r\n                    }\r\n                }, true);\r\n                await native.state();\r\n            }\r\n        });\r\n    }\r\n    startScan(onDeviceFound: (device: IHealthDevice) => void): void {\r\n        this.nativeManager.startDeviceScan(null, null, async (error, device) => {\r\n            if (error || !device) {\r\n                return;\r\n            }\r\n            onDeviceFound(await getManufacturerDeviceFromId(device));\r\n        });\r\n    }\r\n    stopScan(): void {\r\n        this.nativeManager.stopDeviceScan();\r\n    }\r\n    async connect(deviceId: string): Promise<IHealthDevice> {\r\n        const dev = await this.nativeManager.connectToDevice(deviceId);\r\n        const discoveredDev = await dev.discoverAllServicesAndCharacteristics();\r\n        await discoveredDev.services();\r\n        const healthDev = await getManufacturerDeviceFromId(discoveredDev);\r\n        healthDev.connected = true;\r\n        return healthDev;\r\n    }\r\n}\r\n\r\nexport class BleDevice implements IHealthDevice {\r\n    public paired: boolean\r\n    public id: string;\r\n    public name: string;\r\n    public items: IHealthItem[] | undefined;\r\n    public connected: boolean;\r\n    private eventEmitter: EventEmitter\r\n    public type: DeviceType = 'real';\r\n\r\n    /**\r\n    * keeps track of the enabled notifications\r\n    */\r\n    protected enabled: { [itemId: string]: Subscription };\r\n\r\n    constructor(protected nativeDevice: Device) {\r\n        this.id = nativeDevice.id;\r\n        this.name = nativeDevice.name ? nativeDevice.name : nativeDevice.id;\r\n        this.paired = true;\r\n        this.enabled = {};\r\n        this.connected = false;\r\n        this.eventEmitter = new EventEmitter();\r\n    }\r\n\r\n    addListener(eventType: string, listener: (...args: any[]) => any, context?: any) {\r\n        this.eventEmitter.addListener(eventType, listener)\r\n    }\r\n    removeListener(eventType: string, listener: (...args: any[]) => any) {\r\n        this.eventEmitter.removeListener(eventType, listener);\r\n    }\r\n\r\n    private async enableItem(item: IHealthItem, status: boolean): Promise<boolean> {\r\n        if (!status) {\r\n            if (this.enabled[item.id]) {\r\n                this.enabled[item.id].remove();\r\n                delete this.enabled[item.id];\r\n            }\r\n            item.enabled = false;\r\n            return false;\r\n        }\r\n        this.enabled[item.id] = this.nativeDevice.monitorCharacteristicForService(item.parentId as string, item.id, (error, characteristic) => {\r\n            if (error || !characteristic) {\r\n                return;\r\n            }\r\n            this.eventEmitter.emit(DATA_AVAILABLE_EVENT, { itemId: item.id, value: this.getValue(characteristic), itemName: item.name });\r\n        });\r\n        item.enabled = true;\r\n        return true;\r\n    }\r\n\r\n    protected getValue(characteristic: Characteristic): number | null {\r\n        if (characteristic.value == null) {\r\n            return null;\r\n        }\r\n        const val = Buffer.from(characteristic.value, 'base64');\r\n        if (val.length === 1) {\r\n            const intval = val.readInt8();\r\n            return intval;\r\n        }\r\n        else if (val.length === 4) {\r\n            return new DataView(val.buffer).getFloat32(0);\r\n        }\r\n        return +val;\r\n    }\r\n\r\n    async fetch(): Promise<void> {\r\n        if (!this.connected) {\r\n            throw new Error('Device not connected');\r\n        }\r\n        this.items = (await Promise.all((await this.nativeDevice.services()).map(async (service) =>\r\n            await Promise.all((await service.characteristics()).map<IHealthItem>(characteristic => {\r\n                let c: any = {\r\n                    id: characteristic.uuid,\r\n                    parentId: characteristic.serviceUUID,\r\n                    name: characteristic.uuid,\r\n                    enabled: isHealthService(characteristic.serviceUUID),\r\n                    value: undefined\r\n                };\r\n                c.enable = function (this: BleDevice, status: boolean) {\r\n                    return this.enableItem(c, status);\r\n                }.bind(this);\r\n                return c;\r\n            }, this)), this\r\n        ))).reduce((a, b) => (a.concat(b)))\r\n\r\n        this.items.forEach(item => {\r\n            if (item.enabled) {\r\n                item.enable(true);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    async disconnect() {\r\n        // loop through listeners\r\n        Object.keys(this.enabled).forEach(enabledItem => {\r\n            this.enabled[enabledItem].remove();\r\n            delete this.enabled[enabledItem];\r\n        });\r\n        // remove all data listeners\r\n        this.eventEmitter.removeAllListeners(DATA_AVAILABLE_EVENT);\r\n\r\n        // disconnect\r\n        await this.nativeDevice.cancelConnection();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nasync function getManufacturerDeviceFromId(nativeDevice: Device): Promise<IHealthDevice> {\r\n    let custom = null;\r\n    if (nativeDevice.serviceUUIDs) {\r\n        ManufacturerMap.getManufacturers().forEach(manId => {\r\n            const ids = ManufacturerMap.getManufacturerIds(manId);\r\n            if (!ids) {\r\n                return;\r\n            }\r\n            if (ids.filter(id => nativeDevice.serviceUUIDs?.includes(id)).length > 0) {\r\n                const ctor = ManufacturerMap.getManufacturerConstructor(manId)\r\n                if (!ctor) {\r\n                    return;\r\n                }\r\n                custom = new ctor(nativeDevice);\r\n            }\r\n        });\r\n    }\r\n    if (custom) {\r\n        return custom;\r\n    }\r\n    return new BleDevice(nativeDevice);\r\n}"]},"metadata":{},"sourceType":"script"}