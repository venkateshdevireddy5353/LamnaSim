{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HealthRealTimeData = exports.CONSTANTS = void 0;\nvar CONSTANTS = {\n  Screens: {\n    'DEVICES_SCREEN': 'Devices',\n    'INSIGHT_SCREEN': 'Insight',\n    'HOME_SCREEN': 'Home',\n    'PROVIDERS_SCREEN': 'Health Provider'\n  }\n};\nexports.CONSTANTS = CONSTANTS;\nvar HealthRealTimeData = {\n  Walking: 'Walking',\n  StairClimbing: 'StairClimbing',\n  Running: 'Running',\n  Cycling: 'Cycling',\n  Workout: 'Workout'\n};\nexports.HealthRealTimeData = HealthRealTimeData;","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/types.ts"],"names":["CONSTANTS","Screens","HealthRealTimeData","Walking","StairClimbing","Running","Cycling","Workout"],"mappings":";;;;AAMO,IAAMA,SAAS,GAAG;AACrBC,EAAAA,OAAO,EAAE;AACL,sBAAkB,SADb;AAEL,sBAAkB,SAFb;AAGL,mBAAe,MAHV;AAIL,wBAAoB;AAJf;AADY,CAAlB;;AAgEA,IAAMC,kBAAkB,GAAG;AAC9BC,EAAAA,OAAO,EAAE,SADqB;AAE9BC,EAAAA,aAAa,EAAE,eAFe;AAG9BC,EAAAA,OAAO,EAAE,SAHqB;AAI9BC,EAAAA,OAAO,EAAE,SAJqB;AAK9BC,EAAAA,OAAO,EAAE;AALqB,CAA3B","sourcesContent":["import { Route } from \"@react-navigation/native\";\r\nimport { StackNavigationProp } from \"@react-navigation/stack\";\r\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\r\nimport { LineData, LineValue, LineDatasetConfig } from \"react-native-charts-wrapper\";\r\nimport { ItemData } from \"./models\";\r\n\r\nexport const CONSTANTS = {\r\n    Screens: {\r\n        'DEVICES_SCREEN': 'Devices',\r\n        'INSIGHT_SCREEN': 'Insight',\r\n        'HOME_SCREEN': 'Home',\r\n        'PROVIDERS_SCREEN': 'Health Provider'\r\n    }\r\n}\r\n\r\n// Type for getting the values of an object (lookup)\r\nexport type valueof<T> = T[keyof T];\r\n\r\nexport type ReactDispatch<T> = React.Dispatch<React.SetStateAction<T>>;\r\nexport type ContextDispatch<T> = React.Dispatch<T>;\r\n\r\n/**\r\n * Parameters available for all routes\r\n */\r\nexport type NavigationParams = {\r\n    title?: string\r\n}\r\n\r\n/**\r\n * Defines type of screens\r\n */\r\nexport type NavigationScreens = {\r\n    [k in valueof<typeof CONSTANTS.Screens>]: NavigationParams | undefined\r\n}\r\n\r\n/**\r\n * Defines type of parameters shared between routes\r\n */\r\nexport type RouteParams<T extends string> = Omit<Route<T>, 'params'> & {\r\n    params?: NavigationParams\r\n};\r\n\r\n/**\r\n * Defines type of navigator properties\r\n */\r\nexport type NavigationProperty = StackNavigationProp<NavigationScreens, string>;\r\n\r\nexport type DrawerProperty = DrawerNavigationProp<any, string>;\r\n\r\n\r\n/**\r\n * Chart typings\r\n */\r\nexport interface ExtendedLineData extends LineData {\r\n    dataSets: {\r\n        itemId: string,\r\n        values?: Array<number | LineValue>,\r\n        label?: string,\r\n        config?: LineDatasetConfig\r\n    }[]\r\n}\r\n\r\nexport type ChartUpdateCallback = (itemdata: ItemData) => void;\r\n\r\n\r\n\r\n/**\r\n * Health typings\r\n */\r\n\r\nexport const HealthRealTimeData = {\r\n    Walking: 'Walking',\r\n    StairClimbing: 'StairClimbing',\r\n    Running: 'Running',\r\n    Cycling: 'Cycling',\r\n    Workout: 'Workout'\r\n} as const;\r\n\r\nexport type GoogleFitStepResult = {\r\n    source: string,\r\n    steps: {\r\n        date: string,\r\n        value: number\r\n    }[]\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"script"}