{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Main;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _config = require(\"../contexts/config\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _footer = require(\"../components/footer\");\n\nvar _styles = _interopRequireDefault(require(\"../styles\"));\n\nvar _appbar = _interopRequireDefault(require(\"../components/appbar\"));\n\nvar _typography = require(\"../components/typography\");\n\nvar _auth = require(\"../hooks/auth\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _home_connected_logo = _interopRequireDefault(require(\"../assets/home_connected_logo.svg\"));\n\nvar _devices = _interopRequireDefault(require(\"./devices\"));\n\nvar _insight = _interopRequireDefault(require(\"./insight\"));\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _types = require(\"../types\");\n\nvar _drawer = require(\"@react-navigation/drawer\");\n\nvar _insightDrawer = _interopRequireDefault(require(\"../components/insightDrawer\"));\n\nvar _providers = _interopRequireDefault(require(\"./providers\"));\n\nvar _utils = require(\"../components/utils\");\n\nvar _common = require(\"../hooks/common\");\n\nvar _utils2 = require(\"../utils\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\venkatesh.devireddy\\\\Projects\\\\IoT_Central_CPM\\\\src\\\\screens\\\\main.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar instructions = 'Start seeing insights by pairing a bluetooth device or syncing data from your health app.';\n\nvar sync = _reactNative.Platform.select({\n  android: 'SYNC GOOGLE FIT',\n  ios: 'SYNC APPLE HEALTH'\n});\n\nvar headerMode = _reactNative.Platform.select({\n  android: 'screen',\n  ios: 'float'\n});\n\nvar Stack = (0, _stack.createStackNavigator)();\nvar Drawer = (0, _drawer.createDrawerNavigator)();\n\nvar getTitle = function getTitle(scene) {\n  if (scene.route.params) {\n    var routeTitle = scene.route.params.title;\n\n    if (routeTitle) {\n      return routeTitle;\n    }\n  }\n\n  return scene.route.name;\n};\n\nfunction Navigation() {\n  return _react.default.createElement(Stack.Navigator, {\n    initialRouteName: _types.CONSTANTS.Screens.HOME_SCREEN,\n    headerMode: headerMode,\n    screenOptions: {\n      header: function header(_ref) {\n        var scene = _ref.scene,\n            previous = _ref.previous,\n            navigation = _ref.navigation;\n        return _react.default.createElement(_appbar.default, {\n          goBack: navigation.pop,\n          hasPrevious: previous != undefined,\n          title: getTitle(scene),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }\n        });\n      },\n      transitionSpec: {\n        open: _stack.TransitionPresets.DefaultTransition.transitionSpec.open,\n        close: _objectSpread(_objectSpread({}, _stack.TransitionPresets.DefaultTransition.transitionSpec.close), {}, {\n          config: {\n            duration: 0\n          },\n          animation: 'timing'\n        })\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(Stack.Screen, {\n    name: _types.CONSTANTS.Screens.HOME_SCREEN,\n    component: Home,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(Stack.Screen, {\n    name: _types.CONSTANTS.Screens.DEVICES_SCREEN,\n    component: _devices.default,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(Stack.Screen, {\n    name: _types.CONSTANTS.Screens.PROVIDERS_SCREEN,\n    component: _providers.default,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(Stack.Screen, {\n    name: _types.CONSTANTS.Screens.INSIGHT_SCREEN,\n    component: _insight.default,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }));\n}\n\nfunction Main() {\n  var _this = this;\n\n  var _useContext = (0, _react.useContext)(_config.ConfigContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useUser = (0, _auth.useUser)(),\n      _useUser2 = (0, _slicedToArray2.default)(_useUser, 1),\n      user = _useUser2[0];\n\n  if (!user || state.centralClient === undefined) {\n    return null;\n  }\n\n  return _react.default.createElement(_react.default.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(Drawer.Navigator, {\n    drawerContent: function drawerContent(_ref2) {\n      var navigationState = _ref2.state,\n          navigation = _ref2.navigation;\n      var currentScreen = '';\n      var stackState = navigationState.routes[0].state;\n\n      if (stackState && stackState.index) {\n        currentScreen = stackState.routes[stackState.index].name;\n      }\n\n      return _react.default.createElement(_insightDrawer.default, {\n        sourceSide: \"left\",\n        close: function close() {\n          navigation.dispatch(_native.DrawerActions.closeDrawer());\n        },\n        currentScreen: currentScreen,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }\n      });\n    },\n    edgeWidth: -100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(Drawer.Screen, {\n    name: \"Main\",\n    component: Navigation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  })));\n}\n\nfunction Home() {\n  var navigation = (0, _native.useNavigation)();\n  (0, _common.useHeaderTitle)('Home');\n  return _react.default.createElement(_reactNative.View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: {\n      flex: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: _objectSpread(_objectSpread({}, _styles.default.elevated), style.box),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_utils.GetConnectedHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }), _react.default.createElement(_home_connected_logo.default, {\n    width: \"100%\",\n    height: 250,\n    style: {\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }), _react.default.createElement(_typography.CPMText, {\n    style: {\n      paddingHorizontal: 20,\n      paddingVertical: (0, _utils2.normalize)(10)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, instructions), _react.default.createElement(Options, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }))), _react.default.createElement(_footer.Footer, {\n    text: \"If you choose to pair a BLE device, you can use a real device or a simulated device. You can also choose to access your phone\\u2019s health data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }));\n}\n\nfunction Options() {\n  var navigation = (0, _native.useNavigation)();\n  var envs = (0, _common.useEnv)();\n  return _react.default.createElement(_reactNative.View, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      padding: 20,\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    onPress: function onPress() {\n      navigation.navigate(_types.CONSTANTS.Screens.DEVICES_SCREEN);\n      navigation.setParams({\n        title: 'Devices'\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNativePaper.IconButton, {\n    icon: \"bluetooth\",\n    size: 30,\n    style: {\n      marginRight: -5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(_typography.CPMText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, \"PAIR DEVICE\")), _reactNative.Platform.OS === 'android' && envs['GoogleFit'] || _reactNative.Platform.OS === 'ios' && envs['AppleHealth'] ? _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    onPress: function onPress() {\n      navigation.navigate(_types.CONSTANTS.Screens.PROVIDERS_SCREEN);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, _react.default.createElement(_reactNativePaper.IconButton, {\n    icon: \"sync\",\n    size: 30,\n    style: {\n      marginRight: -5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }), _react.default.createElement(_typography.CPMText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, sync)) : _react.default.createElement(_react.default.Fragment, null));\n}\n\nvar style = _reactNative.StyleSheet.create({\n  box: {\n    backgroundColor: 'white',\n    marginTop: 20,\n    marginHorizontal: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/screens/main.tsx"],"names":["instructions","sync","Platform","select","android","ios","headerMode","Stack","Drawer","getTitle","scene","route","params","routeTitle","title","name","Navigation","CONSTANTS","Screens","HOME_SCREEN","header","previous","navigation","pop","undefined","transitionSpec","open","TransitionPresets","DefaultTransition","close","config","duration","animation","Home","DEVICES_SCREEN","Devices","PROVIDERS_SCREEN","Providers","INSIGHT_SCREEN","Insight","Main","ConfigContext","state","dispatch","user","centralClient","navigationState","currentScreen","stackState","routes","index","DrawerActions","closeDrawer","flex","DefaultStyles","elevated","style","box","justifyContent","paddingHorizontal","paddingVertical","Options","envs","flexDirection","alignItems","padding","marginTop","navigate","setParams","marginRight","OS","StyleSheet","create","backgroundColor","marginHorizontal"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;AAGA,IAAMA,YAAY,GAAG,2FAArB;;AAGA,IAAMC,IAAI,GAAGC,sBAASC,MAAT,CAAgB;AACzBC,EAAAA,OAAO,EAAE,iBADgB;AAEzBC,EAAAA,GAAG,EAAE;AAFoB,CAAhB,CAAb;;AAKA,IAAMC,UAAU,GAAGJ,sBAASC,MAAT,CAAoC;AACnDC,EAAAA,OAAO,EAAE,QAD0C;AAEnDC,EAAAA,GAAG,EAAE;AAF8C,CAApC,CAAnB;;AAKA,IAAME,KAAK,GAAG,kCAAd;AACA,IAAMC,MAAM,GAAG,oCAAf;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAUC,KAAV,EAA6C;AAC1D,MAAIA,KAAK,CAACC,KAAN,CAAYC,MAAhB,EAAwB;AACpB,QAAMC,UAAU,GAAIH,KAAK,CAACC,KAAN,CAAYC,MAAb,CAAyCE,KAA5D;;AACA,QAAID,UAAJ,EAAgB;AACZ,aAAOA,UAAP;AACH;AACJ;;AACD,SAAOH,KAAK,CAACC,KAAN,CAAYI,IAAnB;AACH,CARD;;AAUA,SAASC,UAAT,GAAsB;AAClB,SACI,6BAAC,KAAD,CAAO,SAAP;AAAiB,IAAA,gBAAgB,EAAEC,iBAAUC,OAAV,CAAkBC,WAArD;AAAkE,IAAA,UAAU,EAAEb,UAA9E;AACI,IAAA,aAAa,EAAE;AACXc,MAAAA,MAAM,EAAE,sBAA2C;AAAA,YAA/BV,KAA+B,QAA/BA,KAA+B;AAAA,YAAxBW,QAAwB,QAAxBA,QAAwB;AAAA,YAAdC,UAAc,QAAdA,UAAc;AAC/C,eACI,6BAAC,eAAD;AAAgB,UAAA,MAAM,EAAEA,UAAU,CAACC,GAAnC;AAAwC,UAAA,WAAW,EAAEF,QAAQ,IAAIG,SAAjE;AAA4E,UAAA,KAAK,EAAEf,QAAQ,CAACC,KAAD,CAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,OALU;AAMXe,MAAAA,cAAc,EAAE;AACZC,QAAAA,IAAI,EAAEC,yBAAkBC,iBAAlB,CAAoCH,cAApC,CAAmDC,IAD7C;AAEZG,QAAAA,KAAK,kCACEF,yBAAkBC,iBAAlB,CAAoCH,cAApC,CAAmDI,KADrD;AAEDC,UAAAA,MAAM,EAAE;AACJC,YAAAA,QAAQ,EAAE;AADN,WAFP;AAKDC,UAAAA,SAAS,EAAE;AALV;AAFO;AANL,KADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAkBI,6BAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAEf,iBAAUC,OAAV,CAAkBC,WAAtC;AACI,IAAA,SAAS,EAAEc,IADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,EAoBI,6BAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAEhB,iBAAUC,OAAV,CAAkBgB,cAAtC;AACI,IAAA,SAAS,EAAEC,gBADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBJ,EAuBI,6BAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAElB,iBAAUC,OAAV,CAAkBkB,gBAAtC;AACI,IAAA,SAAS,EAAEC,kBADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBJ,EA0BI,6BAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAEpB,iBAAUC,OAAV,CAAkBoB,cAAtC;AACI,IAAA,SAAS,EAAEC,gBADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BJ,CADJ;AAgCH;;AAEc,SAASC,IAAT,GAAgB;AAAA;;AAC3B,oBAA4B,uBAAWC,qBAAX,CAA5B;AAAA,MAAQC,KAAR,eAAQA,KAAR;AAAA,MAAeC,QAAf,eAAeA,QAAf;;AACA,iBAAe,oBAAf;AAAA;AAAA,MAAOC,IAAP;;AAEA,MAAI,CAACA,IAAD,IAASF,KAAK,CAACG,aAAN,KAAwBrB,SAArC,EAAgD;AAC5C,WAAQ,IAAR;AACH;;AAED,SAAQ,6BAAC,cAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACJ,6BAAC,MAAD,CAAQ,SAAR;AAAkB,IAAA,aAAa,EAAE,8BAA4C;AAAA,UAAlCsB,eAAkC,SAAzCJ,KAAyC;AAAA,UAAjBpB,UAAiB,SAAjBA,UAAiB;AACzE,UAAIyB,aAAa,GAAG,EAApB;AACA,UAAMC,UAAU,GAAGF,eAAe,CAACG,MAAhB,CAAuB,CAAvB,EAA0BP,KAA7C;;AACA,UAAIM,UAAU,IAAIA,UAAU,CAACE,KAA7B,EAAoC;AAChCH,QAAAA,aAAa,GAAGC,UAAU,CAACC,MAAX,CAAkBD,UAAU,CAACE,KAA7B,EAAoCnC,IAApD;AACH;;AACD,aAAQ,6BAAC,sBAAD;AAAe,QAAA,UAAU,EAAC,MAA1B;AAAiC,QAAA,KAAK,EAAE,iBAAM;AAClDO,UAAAA,UAAU,CAACqB,QAAX,CAAoBQ,sBAAcC,WAAd,EAApB;AACH,SAFO;AAEL,QAAA,aAAa,EAAEL,aAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AAGH,KATD;AAUI,IAAA,SAAS,EAAE,CAAC,GAVhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYI,6BAAC,MAAD,CAAQ,MAAR;AAAe,IAAA,IAAI,EAAC,MAApB;AAA2B,IAAA,SAAS,EAAE/B,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,CADI,CAAR;AAgBH;;AAED,SAASiB,IAAT,GAAgB;AACZ,MAAMX,UAAU,GAAG,4BAAnB;AACA,8BAAe,MAAf;AAEA,SAAQ,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE;AAAE+B,MAAAA,IAAI,EAAE;AAAR,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACJ,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6BAAC,iBAAD;AAAM,IAAA,KAAK,kCAAOC,gBAAcC,QAArB,GAAkCC,KAAK,CAACC,GAAxC,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6BAAC,yBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,6BAAC,4BAAD;AAAe,IAAA,KAAK,EAAC,MAArB;AAA4B,IAAA,MAAM,EAAE,GAApC;AAAyC,IAAA,KAAK,EAAE;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,6BAAC,mBAAD;AAAS,IAAA,KAAK,EAAE;AAAEC,MAAAA,iBAAiB,EAAE,EAArB;AAAyBC,MAAAA,eAAe,EAAE,uBAAU,EAAV;AAA1C,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4E5D,YAA5E,CAHJ,EAII,6BAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,CADI,EASJ,6BAAC,cAAD;AAAQ,IAAA,IAAI,EAAC,kJAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATI,CAAR;AAWH;;AAGD,SAAS6D,OAAT,GAAmB;AACf,MAAMvC,UAAU,GAAG,4BAAnB;AACA,MAAMwC,IAAI,GAAG,qBAAb;AAEA,SAAQ,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,aAAa,EAAE,KAAjB;AAAwBC,MAAAA,UAAU,EAAE,QAApC;AAA8CN,MAAAA,cAAc,EAAE,eAA9D;AAA+EO,MAAAA,OAAO,EAAE,EAAxF;AAA4FC,MAAAA,SAAS,EAAE;AAAvG,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACJ,6BAAC,2CAAD;AAAkB,IAAA,KAAK,EAAE;AAAEH,MAAAA,aAAa,EAAE,KAAjB;AAAwBC,MAAAA,UAAU,EAAE;AAApC,KAAzB;AAAyE,IAAA,OAAO,EAAE,mBAAM;AACpF1C,MAAAA,UAAU,CAAC6C,QAAX,CAAoBlD,iBAAUC,OAAV,CAAkBgB,cAAtC;AAEAZ,MAAAA,UAAU,CAAC8C,SAAX,CAAqB;AAAEtD,QAAAA,KAAK,EAAE;AAAT,OAArB;AACH,KAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,6BAAC,4BAAD;AAAY,IAAA,IAAI,EAAC,WAAjB;AAA6B,IAAA,IAAI,EAAE,EAAnC;AAAuC,IAAA,KAAK,EAAE;AAAEuD,MAAAA,WAAW,EAAE,CAAC;AAAhB,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAMI,6BAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBANJ,CADI,EAUCnE,sBAASoE,EAAT,KAAgB,SAAhB,IAA6BR,IAAI,CAAC,WAAD,CAAlC,IACQ5D,sBAASoE,EAAT,KAAgB,KAAhB,IAAyBR,IAAI,CAAC,aAAD,CADrC,GAEI,6BAAC,2CAAD;AAAkB,IAAA,KAAK,EAAE;AAAEC,MAAAA,aAAa,EAAE,KAAjB;AAAwBC,MAAAA,UAAU,EAAE;AAApC,KAAzB;AAAyE,IAAA,OAAO,EAAE,mBAAM;AAEpF1C,MAAAA,UAAU,CAAC6C,QAAX,CAAoBlD,iBAAUC,OAAV,CAAkBkB,gBAAtC;AACH,KAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,6BAAC,4BAAD;AAAY,IAAA,IAAI,EAAC,MAAjB;AAAwB,IAAA,IAAI,EAAE,EAA9B;AAAkC,IAAA,KAAK,EAAE;AAAEiC,MAAAA,WAAW,EAAE,CAAC;AAAhB,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI,6BAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUpE,IAAV,CALJ,CAFJ,GAQ0B,2DAlB1B,CAAR;AAoBH;;AAED,IAAMuD,KAAK,GAAGe,wBAAWC,MAAX,CAAkB;AAC5Bf,EAAAA,GAAG,EAAE;AACDgB,IAAAA,eAAe,EAAE,OADhB;AAEDP,IAAAA,SAAS,EAAE,EAFV;AAGDQ,IAAAA,gBAAgB,EAAE;AAHjB;AADuB,CAAlB,CAAd","sourcesContent":["import React, { useContext, useEffect, useState, memo } from \"react\";\r\nimport { ConfigContext } from \"../contexts/config\";\r\nimport { View, StyleSheet, Platform } from \"react-native\";\r\nimport { Text, IconButton } from \"react-native-paper\";\r\nimport { Footer } from \"../components/footer\";\r\nimport DefaultStyles from \"../styles\";\r\nimport ApplicationBar from \"../components/appbar\";\r\nimport { Detail, CPMText } from \"../components/typography\";\r\nimport { useUser } from \"../hooks/auth\";\r\nimport { createStackNavigator, TransitionPresets } from '@react-navigation/stack';\r\nimport ConnectedLogo from '../assets/home_connected_logo.svg';\r\nimport Devices from './devices';\r\nimport Insight from './insight';\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport { useNavigation, DrawerActions, Route } from \"@react-navigation/native\";\r\nimport { CONSTANTS, NavigationScreens, NavigationParams, RouteParams } from \"../types\";\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport InsightDrawer from '../components/insightDrawer';\r\nimport Providers from \"./providers\";\r\nimport { GetConnectedHeader } from \"../components/utils\";\r\nimport { useEnv, useHeaderTitle } from \"../hooks/common\";\r\nimport { Scene } from \"@react-navigation/stack/lib/typescript/src/types\";\r\nimport { normalize } from \"../utils\";\r\n\r\n\r\nconst instructions = 'Start seeing insights by pairing a bluetooth device or syncing data from your health app.'\r\n\r\n\r\nconst sync = Platform.select({\r\n    android: 'SYNC GOOGLE FIT',\r\n    ios: 'SYNC APPLE HEALTH'\r\n});\r\n\r\nconst headerMode = Platform.select<'screen' | 'float'>({\r\n    android: 'screen',\r\n    ios: 'float'\r\n});\r\n\r\nconst Stack = createStackNavigator<NavigationScreens>();\r\nconst Drawer = createDrawerNavigator();\r\nconst getTitle = function (scene: Scene<RouteParams<string>>) {\r\n    if (scene.route.params) {\r\n        const routeTitle = (scene.route.params as NavigationParams).title!;\r\n        if (routeTitle) {\r\n            return routeTitle;\r\n        }\r\n    }\r\n    return scene.route.name;\r\n}\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <Stack.Navigator initialRouteName={CONSTANTS.Screens.HOME_SCREEN} headerMode={headerMode}\r\n            screenOptions={{\r\n                header: function ({ scene, previous, navigation }) {\r\n                    return (\r\n                        <ApplicationBar goBack={navigation.pop} hasPrevious={previous != undefined} title={getTitle(scene)} />\r\n                    )\r\n                },\r\n                transitionSpec: {\r\n                    open: TransitionPresets.DefaultTransition.transitionSpec.open,\r\n                    close: {\r\n                        ...TransitionPresets.DefaultTransition.transitionSpec.close,\r\n                        config: {\r\n                            duration: 0\r\n                        },\r\n                        animation: 'timing'\r\n                    }\r\n                }\r\n            }} >\r\n            <Stack.Screen name={CONSTANTS.Screens.HOME_SCREEN}\r\n                component={Home} />\r\n            <Stack.Screen name={CONSTANTS.Screens.DEVICES_SCREEN}\r\n                component={Devices}\r\n            />\r\n            <Stack.Screen name={CONSTANTS.Screens.PROVIDERS_SCREEN}\r\n                component={Providers}\r\n            />\r\n            <Stack.Screen name={CONSTANTS.Screens.INSIGHT_SCREEN}\r\n                component={Insight}\r\n            />\r\n        </Stack.Navigator >\r\n    )\r\n}\r\n\r\nexport default function Main() {\r\n    const { state, dispatch } = useContext(ConfigContext);\r\n    const [user] = useUser();\r\n\r\n    if (!user || state.centralClient === undefined) {\r\n        return (null);\r\n    }\r\n\r\n    return (<React.Fragment>\r\n        <Drawer.Navigator drawerContent={({ state: navigationState, navigation }) => {\r\n            let currentScreen = '';\r\n            const stackState = navigationState.routes[0].state;\r\n            if (stackState && stackState.index) {\r\n                currentScreen = stackState.routes[stackState.index].name;\r\n            }\r\n            return (<InsightDrawer sourceSide='left' close={() => {\r\n                navigation.dispatch(DrawerActions.closeDrawer());\r\n            }} currentScreen={currentScreen} />)\r\n        }}\r\n            edgeWidth={-100}\r\n        >\r\n            <Drawer.Screen name='Main' component={Navigation} />\r\n        </Drawer.Navigator>\r\n    </React.Fragment>);\r\n}\r\n\r\nfunction Home() {\r\n    const navigation = useNavigation();\r\n    useHeaderTitle('Home');\r\n\r\n    return (<View style={{ flex: 1 }}>\r\n        <View style={{ flex: 3 }}>\r\n            <View style={{ ...DefaultStyles.elevated, ...style.box }}>\r\n                <GetConnectedHeader />\r\n                <ConnectedLogo width='100%' height={250} style={{ justifyContent: 'center' }} />\r\n                <CPMText style={{ paddingHorizontal: 20, paddingVertical: normalize(10) }}>{instructions}</CPMText>\r\n                <Options />\r\n            </View>\r\n        </View>\r\n        <Footer text='If you choose to pair a BLE device, you can use a real device or a simulated device. You can also choose to access your phone’s health data' />\r\n    </View>);\r\n}\r\n\r\n\r\nfunction Options() {\r\n    const navigation = useNavigation();\r\n    const envs = useEnv();\r\n\r\n    return (<View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', padding: 20, marginTop: 10 }}>\r\n        <TouchableOpacity style={{ flexDirection: 'row', alignItems: 'center' }} onPress={() => {\r\n            navigation.navigate(CONSTANTS.Screens.DEVICES_SCREEN);\r\n            // Custom title can be set in this way. However, this will not be reverted when going back\r\n            navigation.setParams({ title: 'Devices' });\r\n        }}>\r\n            <IconButton icon='bluetooth' size={30} style={{ marginRight: -5 }} />\r\n            <CPMText>PAIR DEVICE</CPMText>\r\n        </TouchableOpacity>\r\n        {\r\n            (Platform.OS === 'android' && envs['GoogleFit'])\r\n                || (Platform.OS === 'ios' && envs['AppleHealth']) ?\r\n                <TouchableOpacity style={{ flexDirection: 'row', alignItems: 'center' }} onPress={() => {\r\n\r\n                    navigation.navigate(CONSTANTS.Screens.PROVIDERS_SCREEN);\r\n                }}>\r\n                    <IconButton icon='sync' size={30} style={{ marginRight: -5 }} />\r\n                    <CPMText>{sync}</CPMText>\r\n                </TouchableOpacity> : <></>}\r\n    </View>)\r\n}\r\n\r\nconst style = StyleSheet.create({\r\n    box: {\r\n        backgroundColor: 'white',\r\n        marginTop: 20,\r\n        marginHorizontal: 10\r\n    }\r\n})"]},"metadata":{},"sourceType":"script"}