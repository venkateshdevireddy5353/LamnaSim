{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = InsightDrawer;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _typography = require(\"./typography\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _types = require(\"../types\");\n\nvar _config = require(\"../contexts/config\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _appleHealth = require(\"../health/appleHealth\");\n\nvar _googleFit = require(\"../health/googleFit\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\venkatesh.devireddy\\\\Projects\\\\IoT_Central_CPM\\\\src\\\\components\\\\insightDrawer.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction InsightDrawer(props) {\n  var _this = this;\n\n  var _useContext = (0, _react.useContext)(_config.ConfigContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var sourceSide = props.sourceSide,\n      currentScreen = props.currentScreen;\n  var alignSelf = sourceSide === 'left' ? 'flex-start' : 'flex-end';\n  var icon = 'bluetooth';\n\n  if (state.healthManager) {\n    if (state.healthManager instanceof _appleHealth.AppleHealthManager) {\n      icon = function icon(_ref) {\n        var size = _ref.size;\n        return _react.default.createElement(_reactNative.Image, {\n          source: require('../assets/health_kit.png'),\n          style: {\n            width: 60,\n            height: 60\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }\n        });\n      };\n    } else if (state.healthManager instanceof _googleFit.GoogleFitManager) {\n      icon = function icon(_ref2) {\n        var size = _ref2.size;\n        return _react.default.createElement(_reactNative.Image, {\n          source: require('../assets/google_fit.png'),\n          style: {\n            width: size,\n            height: size - 5\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }\n        });\n      };\n    }\n  }\n\n  if (!state.device || !state.device.items || currentScreen !== _types.CONSTANTS.Screens.INSIGHT_SCREEN) {\n    return null;\n  }\n\n  return _react.default.createElement(_reactNative.SafeAreaView, {\n    style: style.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: style.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNativePaper.IconButton, {\n    icon: icon,\n    size: 30,\n    style: {\n      marginLeft: -5,\n      marginRight: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: {\n      width: '60%',\n      paddingBottom: 100\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, _react.default.createElement(_typography.Headline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, \"Sync options\"), _react.default.createElement(_reactNativePaper.IconButton, {\n    onPress: function onPress() {\n      props.close();\n    },\n    icon: \"chevron-left\",\n    style: {\n      marginLeft: 40,\n      marginTop: -5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  })), _react.default.createElement(_typography.Detail, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, \"Which kind of device data would you like to show?\"))), _react.default.createElement(_typography.Name, {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, state.device.name), _react.default.createElement(_reactNativePaper.Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(_reactNativeGestureHandler.ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, state.device.items.map(function (item, index) {\n    return _react.default.createElement(_reactNative.View, {\n      style: style.itemContainer,\n      key: \"view-\" + item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, _react.default.createElement(_typography.Item, {\n      style: {\n        width: 150\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }\n    }, item.name), _react.default.createElement(_reactNativePaper.Switch, {\n      refId: item.parentId + \"/\" + item.id,\n      value: item.enabled,\n      onValueChange: function _callee(current) {\n        return _regenerator.default.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regenerator.default.awrap(item.enable(current));\n\n              case 2:\n                dispatch({\n                  type: 'HEALTH_CONNECT',\n                  payload: state.device\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }\n    }));\n  })));\n}\n\nvar style = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    marginLeft: 20\n  },\n  header: {\n    marginTop: 30,\n    flexDirection: 'row'\n  },\n  itemContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 20\n  }\n});","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/components/insightDrawer.tsx"],"names":["InsightDrawer","props","ConfigContext","state","dispatch","sourceSide","currentScreen","alignSelf","icon","healthManager","AppleHealthManager","size","require","width","height","GoogleFitManager","device","items","CONSTANTS","Screens","INSIGHT_SCREEN","style","container","header","marginLeft","marginRight","paddingBottom","flexDirection","close","marginTop","marginBottom","name","map","item","index","itemContainer","id","refId","parentId","enabled","current","enable","type","payload","StyleSheet","create","flex","alignItems","justifyContent","padding"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAYe,SAASA,aAAT,CAAuBC,KAAvB,EAA2C;AAAA;;AACtD,oBAA4B,uBAAWC,qBAAX,CAA5B;AAAA,MAAQC,KAAR,eAAQA,KAAR;AAAA,MAAeC,QAAf,eAAeA,QAAf;;AACA,MAAQC,UAAR,GAAsCJ,KAAtC,CAAQI,UAAR;AAAA,MAAoBC,aAApB,GAAsCL,KAAtC,CAAoBK,aAApB;AACA,MAAMC,SAAS,GAAGF,UAAU,KAAK,MAAf,GAAwB,YAAxB,GAAuC,UAAzD;AACA,MAAIG,IAAS,GAAG,WAAhB;;AAGA,MAAIL,KAAK,CAACM,aAAV,EAAyB;AACrB,QAAIN,KAAK,CAACM,aAAN,YAA+BC,+BAAnC,EAAuD;AACnDF,MAAAA,IAAI,GAAG;AAAA,YAAGG,IAAH,QAAGA,IAAH;AAAA,eACH,6BAAC,kBAAD;AACI,UAAA,MAAM,EAAEC,OAAO,CAAC,0BAAD,CADnB;AAEI,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE,EAAT;AAAaC,YAAAA,MAAM,EAAE;AAArB,WAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADG;AAAA,OAAP;AAMH,KAPD,MAQK,IAAIX,KAAK,CAACM,aAAN,YAA+BM,2BAAnC,EAAqD;AACtDP,MAAAA,IAAI,GAAG;AAAA,YAAGG,IAAH,SAAGA,IAAH;AAAA,eACH,6BAAC,kBAAD;AACI,UAAA,MAAM,EAAEC,OAAO,CAAC,0BAAD,CADnB;AAEI,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAEF,IAAT;AAAeG,YAAAA,MAAM,EAAEH,IAAI,GAAG;AAA9B,WAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADG;AAAA,OAAP;AAMH;AACJ;;AAED,MAAI,CAACR,KAAK,CAACa,MAAP,IAAiB,CAACb,KAAK,CAACa,MAAN,CAAaC,KAA/B,IAAwCX,aAAa,KAAKY,iBAAUC,OAAV,CAAkBC,cAAhF,EAAgG;AAC5F,WAAQ,IAAR;AACH;;AACD,SACI,6BAAC,yBAAD;AAAc,IAAA,KAAK,EAAEC,KAAK,CAACC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAED,KAAK,CAACE,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6BAAC,4BAAD;AAAY,IAAA,IAAI,EAAEf,IAAlB;AAAwB,IAAA,IAAI,EAAE,EAA9B;AAAkC,IAAA,KAAK,EAAE;AAAEgB,MAAAA,UAAU,EAAE,CAAC,CAAf;AAAkBC,MAAAA,WAAW,EAAE;AAA/B,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE;AAAEZ,MAAAA,KAAK,EAAE,KAAT;AAAgBa,MAAAA,aAAa,EAAE;AAA/B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6BAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI,6BAAC,4BAAD;AAAY,IAAA,OAAO,EAAE,mBAAM;AACvB1B,MAAAA,KAAK,CAAC2B,KAAN;AACH,KAFD;AAEG,IAAA,IAAI,EAAC,cAFR;AAEuB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,UAAU,EAAE,EAAd;AAAkBK,MAAAA,SAAS,EAAE,CAAC;AAA9B,KAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAOI,6BAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAPJ,CAFJ,CADJ,EAaI,6BAAC,gBAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoC3B,KAAK,CAACa,MAAN,CAAae,IAAjD,CAbJ,EAcI,6BAAC,yBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,EAeI,6BAAC,qCAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK5B,KAAK,CAACa,MAAN,CAAaC,KAAb,CAAmBe,GAAnB,CAAuB,UAACC,IAAD,EAAOC,KAAP;AAAA,WACpB,6BAAC,iBAAD;AAAM,MAAA,KAAK,EAAEb,KAAK,CAACc,aAAnB;AAAkC,MAAA,GAAG,YAAUF,IAAI,CAACG,EAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,6BAAC,gBAAD;AAAM,MAAA,KAAK,EAAE;AAAEvB,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BoB,IAAI,CAACF,IAAnC,CADJ,EAGI,6BAAC,wBAAD;AAAcM,MAAAA,KAAK,EAAKJ,IAAI,CAACK,QAAV,SAAsBL,IAAI,CAACG,EAA9C;AAAsD,MAAA,KAAK,EAAEH,IAAI,CAACM,OAAlE;AAA2E,MAAA,aAAa,EAAE,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAChFP,IAAI,CAACQ,MAAL,CAAYD,OAAZ,CADgF;;AAAA;AAGtFpC,gBAAAA,QAAQ,CAAC;AACLsC,kBAAAA,IAAI,EAAE,gBADD;AAELC,kBAAAA,OAAO,EAAExC,KAAK,CAACa;AAFV,iBAAD,CAAR;;AAHsF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADoB;AAAA,GAAvB,CADL,CAfJ,CADJ;AAiCH;;AAED,IAAMK,KAAK,GAAGuB,wBAAWC,MAAX,CAAkB;AAC5BvB,EAAAA,SAAS,EAAE;AACPwB,IAAAA,IAAI,EAAE,CADC;AAEPtB,IAAAA,UAAU,EAAE;AAFL,GADiB;AAK5BD,EAAAA,MAAM,EAAE;AACJM,IAAAA,SAAS,EAAE,EADP;AAEJF,IAAAA,aAAa,EAAE;AAFX,GALoB;AAS5BQ,EAAAA,aAAa,EAAE;AACXR,IAAAA,aAAa,EAAE,KADJ;AAEXoB,IAAAA,UAAU,EAAE,QAFD;AAGXC,IAAAA,cAAc,EAAE,eAHL;AAIXC,IAAAA,OAAO,EAAE;AAJE;AATa,CAAlB,CAAd","sourcesContent":["import React, { useContext, useEffect, useRef } from 'react';\r\nimport { SafeAreaView, View, StyleSheet, Image } from 'react-native';\r\nimport { Name, Headline, Detail, Item } from './typography';\r\nimport { Switch, IconButton, Divider } from 'react-native-paper';\r\nimport { ChartUpdateCallback, NavigationProperty, CONSTANTS } from '../types';\r\nimport { ConfigContext } from '../contexts/config';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport { AppleHealthManager } from '../health/appleHealth';\r\nimport { GoogleFitManager } from '../health/googleFit';\r\ninterface DrawerProps {\r\n    sourceSide: 'left' | 'right',\r\n    currentScreen: string,\r\n    close(): void\r\n}\r\n\r\n/**\r\n * This navigator doesn't actually navigate to any screen.\r\n * It is used to have a drawer for chart management by levereging on what react-navigation already offers (gestures, styles...).\r\n * @param props \r\n */\r\nexport default function InsightDrawer(props: DrawerProps) {\r\n    const { state, dispatch } = useContext(ConfigContext);\r\n    const { sourceSide, currentScreen } = props;\r\n    const alignSelf = sourceSide === 'left' ? 'flex-start' : 'flex-end';\r\n    let icon: any = 'bluetooth';\r\n\r\n\r\n    if (state.healthManager) {\r\n        if (state.healthManager instanceof AppleHealthManager) {\r\n            icon = ({ size }: { size: number }) => (\r\n                <Image\r\n                    source={require('../assets/health_kit.png')}\r\n                    style={{ width: 60, height: 60 }}\r\n                />\r\n            );\r\n        }\r\n        else if (state.healthManager instanceof GoogleFitManager) {\r\n            icon = ({ size }: { size: number }) => (\r\n                <Image\r\n                    source={require('../assets/google_fit.png')}\r\n                    style={{ width: size, height: size - 5 }}\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    if (!state.device || !state.device.items || currentScreen !== CONSTANTS.Screens.INSIGHT_SCREEN) {\r\n        return (null);\r\n    }\r\n    return (\r\n        <SafeAreaView style={style.container}>\r\n            <View style={style.header}>\r\n                <IconButton icon={icon} size={30} style={{ marginLeft: -5, marginRight: 20 }} />\r\n                <View style={{ width: '60%', paddingBottom: 100 }}>\r\n                    <View style={{ flexDirection: 'row' }}>\r\n                        <Headline>Sync options</Headline>\r\n                        <IconButton onPress={() => {\r\n                            props.close()\r\n                        }} icon='chevron-left' style={{ marginLeft: 40, marginTop: -5 }} />\r\n                    </View>\r\n                    <Detail>Which kind of device data would you like to show?</Detail>\r\n                </View>\r\n            </View>\r\n            <Name style={{ marginBottom: 20 }}>{state.device.name}</Name>\r\n            <Divider />\r\n            <ScrollView>\r\n                {state.device.items.map((item, index) => (\r\n                    <View style={style.itemContainer} key={`view-${item.id}`}>\r\n                        <Item style={{ width: 150 }}>{item.name}</Item>\r\n                        {/* pass extra parameter to the ref in order to process and enable only valid ids */}\r\n                        <Switch {...{ refId: `${item.parentId}/${item.id}` }} value={item.enabled} onValueChange={async (current) => {\r\n                            await item.enable(current);\r\n                            // dispatch is needed to update state of device items\r\n                            dispatch({\r\n                                type: 'HEALTH_CONNECT',\r\n                                payload: state.device\r\n                            });\r\n                        }} />\r\n                    </View>\r\n                ))}\r\n            </ScrollView>\r\n        </SafeAreaView>)\r\n}\r\n\r\nconst style = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        marginLeft: 20\r\n    },\r\n    header: {\r\n        marginTop: 30,\r\n        flexDirection: 'row'\r\n    },\r\n    itemContainer: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        padding: 20\r\n    }\r\n});"]},"metadata":{},"sourceType":"script"}