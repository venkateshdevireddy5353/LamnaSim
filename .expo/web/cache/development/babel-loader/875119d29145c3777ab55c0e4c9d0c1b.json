{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isHealthService = isHealthService;\nvar bluetoothHealthServices = ['180d', '1810', '181f', '1808', '1809', '180d', '183a', '181d'];\n\nfunction isHealthService(serviceUUID) {\n  if (bluetoothHealthServices.indexOf(serviceUUID.substring(4, 8).toLowerCase()) > -1) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Users/venkatesh.devireddy/Projects/IoT_Central_CPM/src/models.ts"],"names":["bluetoothHealthServices","isHealthService","serviceUUID","indexOf","substring","toLowerCase"],"mappings":";;;;AA6CA,IAAMA,uBAAuB,GAAG,CAC5B,MAD4B,EAE5B,MAF4B,EAG5B,MAH4B,EAI5B,MAJ4B,EAK5B,MAL4B,EAM5B,MAN4B,EAO5B,MAP4B,EAQ5B,MAR4B,CAAhC;;AAWO,SAASC,eAAT,CAAyBC,WAAzB,EAA8C;AACjD,MAAIF,uBAAuB,CAACG,OAAxB,CAAgCD,WAAW,CAACE,SAAZ,CAAsB,CAAtB,EAAyB,CAAzB,EAA4BC,WAA5B,EAAhC,IAA6E,CAAC,CAAlF,EAAqF;AACjF,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH","sourcesContent":["import { EventEmitter, EmitterSubscription } from \"react-native\";\r\n\r\nexport type DataAvailableCallback = (itemId: string, value: any, itemName?: string) => void;\r\nexport interface IHealthManager {\r\n    startScan(onDeviceFound: (device: IHealthDevice) => void): void,\r\n    stopScan(): void,\r\n    connect(deviceId: string): Promise<IHealthDevice>\r\n}\r\n\r\nexport type DeviceType = 'real' | 'simulated' | 'platform';\r\nexport interface IHealthDevice {\r\n    name: string,\r\n    id: string,\r\n    paired: boolean,\r\n    connected: boolean,\r\n    type: DeviceType,\r\n    fetch(): Promise<void>,\r\n    disconnect(): Promise<void>,\r\n    items?: IHealthItem[],\r\n    addListener(eventType: string, listener: (...args: any[]) => any, context?: any): void,\r\n    removeListener(eventType: string, listener: (...args: any[]) => any): void\r\n}\r\n\r\nexport interface IHealthItem {\r\n    id: string,\r\n    name?: string,\r\n    parentId?: string,\r\n    value: any | undefined,\r\n    enabled: boolean,\r\n    enable(status: boolean): Promise<boolean>\r\n    getData?(): any\r\n}\r\n\r\nexport type ItemData = {\r\n    itemId: string,\r\n    itemName?: string,\r\n    value: any\r\n}\r\n\r\nexport type MonitoredDevice = IHealthDevice & {\r\n    monitorIds: {\r\n        [itemId: string]: number // the value is the id for the setInterval loop. Used to clear it\r\n    }\r\n}\r\n\r\nconst bluetoothHealthServices = [\r\n    '180d',\r\n    '1810',\r\n    '181f',\r\n    '1808',\r\n    '1809',\r\n    '180d',\r\n    '183a',\r\n    '181d'\r\n]\r\n\r\nexport function isHealthService(serviceUUID: string) {\r\n    if (bluetoothHealthServices.indexOf(serviceUUID.substring(4, 8).toLowerCase()) > -1) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"]},"metadata":{},"sourceType":"script"}